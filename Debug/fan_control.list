
fan_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e8  080080e8  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f0  080080f0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080080f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000040  08008138  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08008138  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180ac  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e2  00000000  00000000  0003811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002928b  00000000  00000000  0003daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018283  00000000  00000000  00066d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106293  00000000  00000000  0007efb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  0018529c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008088 	.word	0x08008088

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08008088 	.word	0x08008088

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000d10:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d12:	f001 fc55 	bl	80025c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1a:	483c      	ldr	r0, [pc, #240]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d1c:	f001 fd3e 	bl	800279c <HAL_ADC_PollForConversion>
	uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000d20:	483a      	ldr	r0, [pc, #232]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d22:	f001 fe13 	bl	800294c <HAL_ADC_GetValue>
 8000d26:	4603      	mov	r3, r0
 8000d28:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000d2a:	4838      	ldr	r0, [pc, #224]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d2c:	f001 fd02 	bl	8002734 <HAL_ADC_Stop>
	//TO DO: temperature formula
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) power_page_address;
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]
	float temp = ((float)value) / 4095 * 3300;
 8000d3c:	8afb      	ldrh	r3, [r7, #22]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d46:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000e18 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d4e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000e1c <HAL_TIM_PeriodElapsedCallback+0x114>
 8000d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d56:	edc7 7a02 	vstr	s15, [r7, #8]
	temperature = ((temp - 760.0) / 2.5) + 25;
 8000d5a:	68b8      	ldr	r0, [r7, #8]
 8000d5c:	f7ff fb98 	bl	8000490 <__aeabi_f2d>
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000d66:	f7ff fa33 	bl	80001d0 <__aeabi_dsub>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d78:	f7ff fd0c 	bl	8000794 <__aeabi_ddiv>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000d8a:	f7ff fa23 	bl	80001d4 <__adddf3>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fde5 	bl	8000964 <__aeabi_d2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000d9e:	6013      	str	r3, [r2, #0]
	if(temp < 0){
 8000da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	d503      	bpl.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0xae>
		temperature = 0;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
	}
	if(*p_control_mode == AUTOMATIC && *p_power == ON){
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d122      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d11e      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0xfc>
		if(temperature < 15){
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	d503      	bpl.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0xda>
			mutate_wind_mode(LEVEL_2);
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f000 fd16 	bl	800180c <mutate_wind_mode>
		}
		else{
			mutate_wind_mode(LEVEL_0);
		}
	}
}
 8000de0:	e010      	b.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0xfc>
		else if(temperature <= 30){
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	d803      	bhi.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0xf6>
			mutate_wind_mode(LEVEL_1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fd08 	bl	800180c <mutate_wind_mode>
}
 8000dfc:	e002      	b.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0xfc>
			mutate_wind_mode(LEVEL_0);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 fd04 	bl	800180c <mutate_wind_mode>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000005c 	.word	0x2000005c
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000008 	.word	0x20000008
 8000e18:	457ff000 	.word	0x457ff000
 8000e1c:	454e4000 	.word	0x454e4000
 8000e20:	4087c000 	.word	0x4087c000
 8000e24:	40040000 	.word	0x40040000
 8000e28:	40390000 	.word	0x40390000
 8000e2c:	200001f0 	.word	0x200001f0

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e36:	f000 ffc6 	bl	8001dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3a:	f000 f851 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f000 fa11 	bl	8001264 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e42:	f000 f9df 	bl	8001204 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e46:	f000 f913 	bl	8001070 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e4a:	f000 f89b 	bl	8000f84 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000e4e:	f000 f985 	bl	800115c <MX_TIM8_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e52:	f000 f88a 	bl	8000f6a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  flash_erase_init();
 8000e56:	f000 fbeb 	bl	8001630 <flash_erase_init>
  check_and_fix_variables();
 8000e5a:	f000 fd73 	bl	8001944 <check_and_fix_variables>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <main+0x98>)
 8000e62:	f004 fe19 	bl	8005a98 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 8000e66:	4819      	ldr	r0, [pc, #100]	; (8000ecc <main+0x9c>)
 8000e68:	f004 fd44 	bl	80058f4 <HAL_TIM_Base_Start_IT>
  restore_last_state();
 8000e6c:	f000 fda6 	bl	80019bc <restore_last_state>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e74:	2202      	movs	r2, #2
 8000e76:	4916      	ldr	r1, [pc, #88]	; (8000ed0 <main+0xa0>)
 8000e78:	4816      	ldr	r0, [pc, #88]	; (8000ed4 <main+0xa4>)
 8000e7a:	f005 fff1 	bl	8006e60 <HAL_UART_Receive>
	  if(*(receiveBuffer+1) == 0x04){
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <main+0xa0>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d107      	bne.n	8000e96 <main+0x66>
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 2, HAL_MAX_DELAY);
 8000e86:	4914      	ldr	r1, [pc, #80]	; (8000ed8 <main+0xa8>)
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <main+0xa4>)
 8000e90:	f005 ffe6 	bl	8006e60 <HAL_UART_Receive>
 8000e94:	e006      	b.n	8000ea4 <main+0x74>
	  }
	  else{
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 3, HAL_MAX_DELAY);
 8000e96:	4910      	ldr	r1, [pc, #64]	; (8000ed8 <main+0xa8>)
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <main+0xa4>)
 8000ea0:	f005 ffde 	bl	8006e60 <HAL_UART_Receive>
	  }
	  uint8_t status = handle_message(receiveBuffer, sendBuffer);
 8000ea4:	490d      	ldr	r1, [pc, #52]	; (8000edc <main+0xac>)
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <main+0xa0>)
 8000ea8:	f000 fa2c 	bl	8001304 <handle_message>
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
	  if(status != 0){
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0dc      	beq.n	8000e70 <main+0x40>
		  HAL_UART_Transmit(&huart1, sendBuffer, status, HAL_MAX_DELAY);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebe:	4907      	ldr	r1, [pc, #28]	; (8000edc <main+0xac>)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <main+0xa4>)
 8000ec2:	f005 ff39 	bl	8006d38 <HAL_UART_Transmit>
  while(1){
 8000ec6:	e7d3      	b.n	8000e70 <main+0x40>
 8000ec8:	200000c0 	.word	0x200000c0
 8000ecc:	2000010c 	.word	0x2000010c
 8000ed0:	200001dc 	.word	0x200001dc
 8000ed4:	20000158 	.word	0x20000158
 8000ed8:	200001de 	.word	0x200001de
 8000edc:	200001e4 	.word	0x200001e4

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2244      	movs	r2, #68	; 0x44
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 f8c2 	bl	8008078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f06:	f003 f98b 	bl	8004220 <HAL_PWREx_ControlVoltageScaling>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f10:	f000 f9f2 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 f9ce 	bl	80042cc <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000f36:	f000 f9df 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fd96 	bl	8004a84 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f5e:	f000 f9cb 	bl	80012f8 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3758      	adds	r7, #88	; 0x58
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2102      	movs	r1, #2
 8000f72:	2025      	movs	r0, #37	; 0x25
 8000f74:	f002 fc3b 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f78:	2025      	movs	r0, #37	; 0x25
 8000f7a:	f002 fc54 	bl	8003826 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000faa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0xe0>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <MX_ADC1_Init+0xe0>)
 8001008:	f001 f984 	bl	8002314 <HAL_ADC_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001012:	f000 f971 	bl	80012f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <MX_ADC1_Init+0xe0>)
 8001022:	f002 fa59 	bl	80034d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800102c:	f000 f964 	bl	80012f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_ADC1_Init+0xe8>)
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2306      	movs	r3, #6
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800103c:	237f      	movs	r3, #127	; 0x7f
 800103e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001040:	2304      	movs	r3, #4
 8001042:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0xe0>)
 800104e:	f001 fc8b 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001058:	f000 f94e 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000005c 	.word	0x2000005c
 8001068:	50040000 	.word	0x50040000
 800106c:	19200040 	.word	0x19200040

08001070 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010ac:	224f      	movs	r2, #79	; 0x4f
 80010ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ca:	4823      	ldr	r0, [pc, #140]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010cc:	f004 fbba 	bl	8005844 <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010d6:	f000 f90f 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e4:	4619      	mov	r1, r3
 80010e6:	481c      	ldr	r0, [pc, #112]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010e8:	f005 f810 	bl	800610c <HAL_TIM_ConfigClockSource>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010f2:	f000 f901 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_TIM2_Init+0xe8>)
 80010f8:	f004 fc6c 	bl	80059d4 <HAL_TIM_PWM_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001102:	f000 f8f9 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <MX_TIM2_Init+0xe8>)
 8001116:	f005 fd1b 	bl	8006b50 <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001120:	f000 f8ea 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001124:	2360      	movs	r3, #96	; 0x60
 8001126:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM2_Init+0xe8>)
 800113c:	f004 fed2 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001146:	f000 f8d7 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM2_Init+0xe8>)
 800114c:	f000 fd30 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3738      	adds	r7, #56	; 0x38
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200000c0 	.word	0x200000c0

0800115c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_TIM8_Init+0xa0>)
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <MX_TIM8_Init+0xa4>)
 800117e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_TIM8_Init+0xa0>)
 8001182:	224f      	movs	r2, #79	; 0x4f
 8001184:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM8_Init+0xa0>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM8_Init+0xa0>)
 800118e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001192:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM8_Init+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM8_Init+0xa0>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM8_Init+0xa0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_TIM8_Init+0xa0>)
 80011a8:	f004 fb4c 	bl	8005844 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80011b2:	f000 f8a1 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_TIM8_Init+0xa0>)
 80011c4:	f004 ffa2 	bl	800610c <HAL_TIM_ConfigClockSource>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80011ce:	f000 f893 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_TIM8_Init+0xa0>)
 80011e4:	f005 fcb4 	bl	8006b50 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011ee:	f000 f883 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000010c 	.word	0x2000010c
 8001200:	40013400 	.word	0x40013400

08001204 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_USART1_UART_Init+0x58>)
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <MX_USART1_UART_Init+0x5c>)
 800120c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001210:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_USART1_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART1_UART_Init+0x58>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART1_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART1_UART_Init+0x58>)
 8001248:	f005 fd28 	bl	8006c9c <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001252:	f000 f851 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000158 	.word	0x20000158
 8001260:	40013800 	.word	0x40013800

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_GPIO_Init+0x8c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_GPIO_Init+0x8c>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_GPIO_Init+0x8c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_GPIO_Init+0x8c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MX_GPIO_Init+0x8c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_GPIO_Init+0x8c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_GPIO_Init+0x8c>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <MX_GPIO_Init+0x8c>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_GPIO_Init+0x8c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_GPIO_Init+0x90>)
 80012c8:	f002 ff84 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012cc:	2304      	movs	r3, #4
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0x90>)
 80012e4:	f002 fdcc 	bl	8003e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <handle_message>:
 */

#include "message_handler.h"
#include "mutate_flash.h"

uint8_t handle_message(unsigned char* received_buf, unsigned char* sent_buf){
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	 * @param write_buf sending message's buffer
	 * @return 0 if don't send the reply
	 * return the length of reply message buff otherwise
	 */
	uint8_t sent_buf_length;
	uint8_t* stx = received_buf;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	623b      	str	r3, [r7, #32]
	if(*stx != 0x02){
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d003      	beq.n	8001322 <handle_message+0x1e>
		sent_buf_length = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 8001320:	e072      	b.n	8001408 <handle_message+0x104>
	}

	uint8_t* received_frame_type  = received_buf + 1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buf + 1;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buf + 2;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3302      	adds	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
	
	*sent_buf = 0x02;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	701a      	strb	r2, [r3, #0]
	switch(*received_frame_type){
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	2b03      	cmp	r3, #3
 8001342:	d837      	bhi.n	80013b4 <handle_message+0xb0>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <handle_message+0x48>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800135d 	.word	0x0800135d
 8001350:	08001373 	.word	0x08001373
 8001354:	08001389 	.word	0x08001389
 8001358:	0800139f 	.word	0x0800139f
		case 0x01:
			process_power_message(received_buf, sent_buf);
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f858 	bl	8001414 <process_power_message>
			sent_data_length = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8001370:	e024      	b.n	80013bc <handle_message+0xb8>
		case 0x02:
			process_control_mode_message(received_buf, sent_buf);
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f87d 	bl	8001474 <process_control_mode_message>
			sent_data_length = 1;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8001386:	e019      	b.n	80013bc <handle_message+0xb8>
		case 0x03:
			process_wind_mode_message(received_buf, sent_buf);
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f8a7 	bl	80014de <process_wind_mode_message>
			sent_data_length = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 800139c:	e00e      	b.n	80013bc <handle_message+0xb8>
		case 0x04:
			sent_data_length = process_states_request_message(received_buf, sent_buf);
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f8d9 	bl	8001558 <process_states_request_message>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 0; 
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 80013b2:	e003      	b.n	80013bc <handle_message+0xb8>
		default:
			sent_buf_length = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto terminate;
 80013ba:	e025      	b.n	8001408 <handle_message+0x104>
	}
	*sent_frame_type = *received_frame_type + 0x80;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3b80      	subs	r3, #128	; 0x80
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80013ce:	701a      	strb	r2, [r3, #0]

	uint8_t* received_ETX = received_buf + 3 + received_data_length;
 80013d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013d4:	3303      	adds	r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d003      	beq.n	80013ec <handle_message+0xe8>
		sent_buf_length = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 80013ea:	e00d      	b.n	8001408 <handle_message+0x104>
	}


	uint8_t* sent_ETX = sent_buf + 3 + sent_data_length; 
 80013ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f0:	3303      	adds	r3, #3
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2203      	movs	r2, #3
 80013fc:	701a      	strb	r2, [r3, #0]
	sent_buf_length = sent_data_length + 4;
 80013fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001402:	3304      	adds	r3, #4
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	terminate: return sent_buf_length;
 8001408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800140c:	4618      	mov	r0, r3
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <process_power_message>:



void process_power_message(unsigned char* received_buf, unsigned char* sent_buf){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	 * @param received_buf power message's buffer
	 * @param sent_buf reply message's buffer 
	 * return message data length otherwise
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 800141e:	2101      	movs	r1, #1
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f8ed 	bl	8001600 <check_message_data_length>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01f      	beq.n	800146c <process_power_message+0x58>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3303      	adds	r3, #3
 8001430:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3303      	adds	r3, #3
 8001436:	60bb      	str	r3, [r7, #8]
	if(*received_data == OFF){
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <process_power_message+0x3a>
		mutate_power(OFF);
 8001440:	2000      	movs	r0, #0
 8001442:	f000 f92f 	bl	80016a4 <mutate_power>
		*sent_data = 0x00;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e00f      	b.n	800146e <process_power_message+0x5a>
	}
	else if(*received_data == ON){
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d106      	bne.n	8001464 <process_power_message+0x50>
		mutate_power(ON);
 8001456:	2001      	movs	r0, #1
 8001458:	f000 f924 	bl	80016a4 <mutate_power>
		*sent_data = 0x00;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e004      	b.n	800146e <process_power_message+0x5a>
	}
	else{
		*sent_data = 0xFF;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e000      	b.n	800146e <process_power_message+0x5a>
		return;
 800146c:	bf00      	nop
	}
}
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <process_control_mode_message>:

void process_control_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	 * @brief read mode control message from received_buf and replies in sent_buf 
	 * @param received_buf mode control message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 800147e:	2101      	movs	r1, #1
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f8bd 	bl	8001600 <check_message_data_length>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d024      	beq.n	80014d6 <process_control_mode_message+0x62>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3303      	adds	r3, #3
 8001490:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3303      	adds	r3, #3
 8001496:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8001498:	f000 f9f8 	bl	800188c <get_power>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <process_control_mode_message+0x36>
		*sent_data = 0xFF;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	701a      	strb	r2, [r3, #0]
		goto terminate;
 80014a8:	e014      	b.n	80014d4 <process_control_mode_message+0x60>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <process_control_mode_message+0x46>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <process_control_mode_message+0x58>
		mutate_control_mode(*received_data);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f95a 	bl	8001778 <mutate_control_mode>
		*sent_data = 0x00;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e003      	b.n	80014d4 <process_control_mode_message+0x60>
	}
	else{
		*sent_data = 0xFF;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	701a      	strb	r2, [r3, #0]
	}
	terminate: return;
 80014d2:	e001      	b.n	80014d8 <process_control_mode_message+0x64>
 80014d4:	e000      	b.n	80014d8 <process_control_mode_message+0x64>
		return;
 80014d6:	bf00      	nop
}
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <process_wind_mode_message>:

void process_wind_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
	 * @brief read win mode message from received_buf and replies in sent_buf 
	 * @param received_buf win mode message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 80014e8:	2101      	movs	r1, #1
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f888 	bl	8001600 <check_message_data_length>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d02a      	beq.n	800154c <process_wind_mode_message+0x6e>
		goto terminate;
	}

	uint8_t* received_data = received_buf + 3;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3303      	adds	r3, #3
 80014fa:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3303      	adds	r3, #3
 8001500:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8001502:	f000 f9c3 	bl	800188c <get_power>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <process_wind_mode_message+0x36>
		*sent_data = 0xFF;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	22ff      	movs	r2, #255	; 0xff
 8001510:	701a      	strb	r2, [r3, #0]
		goto terminate;
 8001512:	e01c      	b.n	800154e <process_wind_mode_message+0x70>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <process_wind_mode_message+0x4e>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <process_wind_mode_message+0x4e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d10b      	bne.n	8001544 <process_wind_mode_message+0x66>
		mutate_wind_mode(*received_data);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f96b 	bl	800180c <mutate_wind_mode>
		*sent_data = 0x00;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
		mutate_control_mode(MANUAL);
 800153c:	2001      	movs	r0, #1
 800153e:	f000 f91b 	bl	8001778 <mutate_control_mode>
 8001542:	e004      	b.n	800154e <process_wind_mode_message+0x70>
	}
	else{
		*sent_data = 0xFF;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	701a      	strb	r2, [r3, #0]
	}
	terminate: return;
 800154a:	e000      	b.n	800154e <process_wind_mode_message+0x70>
		goto terminate;
 800154c:	bf00      	nop
	terminate: return;
 800154e:	bf00      	nop
}
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <process_states_request_message>:

uint8_t process_states_request_message(unsigned char* received_buf, unsigned char* sent_buf){
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	 * @brief read states request message from received_buf and replies in sent_buf 
	 * @param received_buf sates request message's buffer
	 * @param sent_buf reply message's buffer 
	 * @return sent message's data length
	*/
	uint8_t* sent_data = sent_buf + 3;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3303      	adds	r3, #3
 8001566:	61fb      	str	r3, [r7, #28]
	uint8_t* power_state = sent_data + 1;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	3301      	adds	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
	uint8_t* control_mode_state = sent_data + 2;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3302      	adds	r3, #2
 8001572:	617b      	str	r3, [r7, #20]
	uint8_t* wind_mode_state = sent_data + 3;	
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3303      	adds	r3, #3
 8001578:	613b      	str	r3, [r7, #16]
	uint8_t* temperature_state = sent_data + 4;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	60fb      	str	r3, [r7, #12]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buf, 0)){
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f83c 	bl	8001600 <check_message_data_length>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <process_states_request_message+0x44>
		sent_data_length = 1;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sent_data = 0xFF;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	22ff      	movs	r2, #255	; 0xff
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e028      	b.n	80015ee <process_states_request_message+0x96>
	}
	else{
		*sent_data = 0x00;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
		*power_state = get_power();
 80015a2:	f000 f973 	bl	800188c <get_power>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	701a      	strb	r2, [r3, #0]
		*control_mode_state = get_control_mode();
 80015ae:	f000 f97f 	bl	80018b0 <get_control_mode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = get_wind_mode();
 80015ba:	f000 f98b 	bl	80018d4 <get_wind_mode>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	701a      	strb	r2, [r3, #0]
		int temp = (int) temperature;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <process_states_request_message+0xa4>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d0:	ee17 3a90 	vmov	r3, s15
 80015d4:	623b      	str	r3, [r7, #32]
		if(temp < 0){
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da01      	bge.n	80015e0 <process_states_request_message+0x88>
			temp = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
		}
		*temperature_state = (uint8_t) temp;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 80015e8:	2305      	movs	r3, #5
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return sent_data_length;
 80015ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200001f0 	.word	0x200001f0

08001600 <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buf, uint8_t expected_value){
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
	/**
	* @brief check whether the length message is correct or not 
	* @return 1 if it is correct 
	* return  0 other wise  
	*/
	uint8_t* length = received_buf + 2;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3302      	adds	r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
	if(*length == expected_value){
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	429a      	cmp	r2, r3
 800161a:	d101      	bne.n	8001620 <check_message_data_length+0x20>
		return 1;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <check_message_data_length+0x22>
	}
	else{
		return 0;
 8001620:	2300      	movs	r3, #0
	}
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <flash_erase_init>:

FLASH_EraseInitTypeDef flash_erase_power_init ;
FLASH_EraseInitTypeDef flash_erase_control_mode_init;
FLASH_EraseInitTypeDef flash_erase_wind_mode_init;

void flash_erase_init(){
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	/*
	 * @brief init flash erase variables
	 */
	flash_erase_power_init.TypeErase =  0x00;
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <flash_erase_init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	flash_erase_power_init.Banks = FLASH_BANK_2;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <flash_erase_init+0x5c>)
 800163c:	2202      	movs	r2, #2
 800163e:	605a      	str	r2, [r3, #4]
	flash_erase_power_init.NbPages = 1;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <flash_erase_init+0x5c>)
 8001642:	2201      	movs	r2, #1
 8001644:	60da      	str	r2, [r3, #12]
	flash_erase_power_init.Page = power_page;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <flash_erase_init+0x60>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <flash_erase_init+0x5c>)
 800164c:	6093      	str	r3, [r2, #8]

	flash_erase_control_mode_init.TypeErase =  0x00;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <flash_erase_init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	flash_erase_control_mode_init.Banks = FLASH_BANK_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <flash_erase_init+0x64>)
 8001656:	2202      	movs	r2, #2
 8001658:	605a      	str	r2, [r3, #4]
	flash_erase_control_mode_init.NbPages = 1;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <flash_erase_init+0x64>)
 800165c:	2201      	movs	r2, #1
 800165e:	60da      	str	r2, [r3, #12]
	flash_erase_control_mode_init.Page = control_mode_page;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <flash_erase_init+0x68>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <flash_erase_init+0x64>)
 8001666:	6093      	str	r3, [r2, #8]

	flash_erase_wind_mode_init.TypeErase = 0x00;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <flash_erase_init+0x6c>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	flash_erase_wind_mode_init.Banks = FLASH_BANK_2;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <flash_erase_init+0x6c>)
 8001670:	2202      	movs	r2, #2
 8001672:	605a      	str	r2, [r3, #4]
	flash_erase_wind_mode_init.NbPages = 1;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <flash_erase_init+0x6c>)
 8001676:	2201      	movs	r2, #1
 8001678:	60da      	str	r2, [r3, #12]
	flash_erase_wind_mode_init.Page = wind_mode_page;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <flash_erase_init+0x70>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <flash_erase_init+0x6c>)
 8001680:	6093      	str	r3, [r2, #8]

}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200001fc 	.word	0x200001fc
 8001690:	200001f4 	.word	0x200001f4
 8001694:	2000020c 	.word	0x2000020c
 8001698:	20000000 	.word	0x20000000
 800169c:	2000021c 	.word	0x2000021c
 80016a0:	20000004 	.word	0x20000004

080016a4 <mutate_power>:

void mutate_power(POWER power){
 80016a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a8:	b097      	sub	sp, #92	; 0x5c
 80016aa:	af10      	add	r7, sp, #64	; 0x40
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Mutate power variable
	 * @param power set value
	 */
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <mutate_power+0xbc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	617b      	str	r3, [r7, #20]
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <mutate_power+0xc0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) power_page_address;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <mutate_power+0xc4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
	if(*p_power != power){
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d044      	beq.n	8001756 <mutate_power+0xb2>
		if(power == OFF){
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d114      	bne.n	80016fc <mutate_power+0x58>
			wind_control(htim2, LEVEL_0);
 80016d2:	4e26      	ldr	r6, [pc, #152]	; (800176c <mutate_power+0xc8>)
 80016d4:	2300      	movs	r3, #0
 80016d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80016d8:	466d      	mov	r5, sp
 80016da:	f106 0410 	add.w	r4, r6, #16
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016f6:	f000 f8ff 	bl	80018f8 <wind_control>
 80016fa:	e019      	b.n	8001730 <mutate_power+0x8c>
		}
		else{
			if(*p_control_mode == MANUAL){
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d115      	bne.n	8001730 <mutate_power+0x8c>
				wind_control(htim2, *p_wind_mode);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4e18      	ldr	r6, [pc, #96]	; (800176c <mutate_power+0xc8>)
 800170c:	930f      	str	r3, [sp, #60]	; 0x3c
 800170e:	466d      	mov	r5, sp
 8001710:	f106 0410 	add.w	r4, r6, #16
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001724:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001728:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800172c:	f000 f8e4 	bl	80018f8 <wind_control>
			}
		}
		HAL_FLASH_Unlock();
 8001730:	f002 f97e 	bl	8003a30 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <mutate_power+0xcc>)
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <mutate_power+0xd0>)
 8001738:	f002 fa5e 	bl	8003bf8 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, power_page_address, power);
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <mutate_power+0xc4>)
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2200      	movs	r2, #0
 8001744:	4698      	mov	r8, r3
 8001746:	4691      	mov	r9, r2
 8001748:	4642      	mov	r2, r8
 800174a:	464b      	mov	r3, r9
 800174c:	2000      	movs	r0, #0
 800174e:	f002 f903 	bl	8003958 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8001752:	f002 f98f 	bl	8003a74 <HAL_FLASH_Lock>
	}
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001760:	2000000c 	.word	0x2000000c
 8001764:	20000010 	.word	0x20000010
 8001768:	20000008 	.word	0x20000008
 800176c:	200000c0 	.word	0x200000c0
 8001770:	200001f8 	.word	0x200001f8
 8001774:	200001fc 	.word	0x200001fc

08001778 <mutate_control_mode>:


void mutate_control_mode(CONTROL_MODE control_mode){
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b095      	sub	sp, #84	; 0x54
 800177c:	af10      	add	r7, sp, #64	; 0x40
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate control mode variable
	 * @control_mode set value
	 */
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <mutate_control_mode+0x80>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode != control_mode){
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	429a      	cmp	r2, r3
 8001790:	d02e      	beq.n	80017f0 <mutate_control_mode+0x78>
		HAL_FLASH_Unlock();
 8001792:	f002 f94d 	bl	8003a30 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 8001796:	4919      	ldr	r1, [pc, #100]	; (80017fc <mutate_control_mode+0x84>)
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <mutate_control_mode+0x88>)
 800179a:	f002 fa2d 	bl	8003bf8 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, control_mode_page_address, control_mode);
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <mutate_control_mode+0x80>)
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2200      	movs	r2, #0
 80017a6:	461c      	mov	r4, r3
 80017a8:	4615      	mov	r5, r2
 80017aa:	4622      	mov	r2, r4
 80017ac:	462b      	mov	r3, r5
 80017ae:	2000      	movs	r0, #0
 80017b0:	f002 f8d2 	bl	8003958 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80017b4:	f002 f95e 	bl	8003a74 <HAL_FLASH_Lock>
		if(control_mode == MANUAL){
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d118      	bne.n	80017f0 <mutate_control_mode+0x78>
			uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <mutate_control_mode+0x8c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60bb      	str	r3, [r7, #8]
			wind_control(htim2, *p_wind_mode);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4e0f      	ldr	r6, [pc, #60]	; (8001808 <mutate_control_mode+0x90>)
 80017cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80017ce:	466d      	mov	r5, sp
 80017d0:	f106 0410 	add.w	r4, r6, #16
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017ec:	f000 f884 	bl	80018f8 <wind_control>
		}
	}
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	200001f8 	.word	0x200001f8
 8001800:	2000020c 	.word	0x2000020c
 8001804:	20000010 	.word	0x20000010
 8001808:	200000c0 	.word	0x200000c0

0800180c <mutate_wind_mode>:


void mutate_wind_mode(WIND_MODE wind_mode){
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b095      	sub	sp, #84	; 0x54
 8001810:	af10      	add	r7, sp, #64	; 0x40
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate wind mode variable
	 * @wind_mode set value
	 */

	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <mutate_wind_mode+0x70>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
	if(*p_wind_mode != wind_mode){
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	429a      	cmp	r2, r3
 8001824:	d026      	beq.n	8001874 <mutate_wind_mode+0x68>
		HAL_FLASH_Unlock();
 8001826:	f002 f903 	bl	8003a30 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 800182a:	4915      	ldr	r1, [pc, #84]	; (8001880 <mutate_wind_mode+0x74>)
 800182c:	4815      	ldr	r0, [pc, #84]	; (8001884 <mutate_wind_mode+0x78>)
 800182e:	f002 f9e3 	bl	8003bf8 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, wind_mode_page_address, wind_mode);
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <mutate_wind_mode+0x70>)
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2200      	movs	r2, #0
 800183a:	461c      	mov	r4, r3
 800183c:	4615      	mov	r5, r2
 800183e:	4622      	mov	r2, r4
 8001840:	462b      	mov	r3, r5
 8001842:	2000      	movs	r0, #0
 8001844:	f002 f888 	bl	8003958 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8001848:	f002 f914 	bl	8003a74 <HAL_FLASH_Lock>
		wind_control(htim2, wind_mode);
 800184c:	4e0e      	ldr	r6, [pc, #56]	; (8001888 <mutate_wind_mode+0x7c>)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	930f      	str	r3, [sp, #60]	; 0x3c
 8001852:	466d      	mov	r5, sp
 8001854:	f106 0410 	add.w	r4, r6, #16
 8001858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001864:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001868:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800186c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001870:	f000 f842 	bl	80018f8 <wind_control>
	}
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187c:	20000010 	.word	0x20000010
 8001880:	200001f8 	.word	0x200001f8
 8001884:	2000021c 	.word	0x2000021c
 8001888:	200000c0 	.word	0x200000c0

0800188c <get_power>:

uint8_t get_power(){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
	/*
	 * @return power
	 */
	uint32_t* p_power = (uint32_t*) power_page_address;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <get_power+0x20>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	607b      	str	r3, [r7, #4]
	return *p_power;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008

080018b0 <get_control_mode>:

uint8_t get_control_mode(){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
	/*
	 * @return control mode
	 */
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <get_control_mode+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	607b      	str	r3, [r7, #4]
	return *p_control_mode;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <get_wind_mode>:

uint8_t get_wind_mode(){
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
	/*
	 * @return wind mode
	 */
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <get_wind_mode+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	607b      	str	r3, [r7, #4]
	return *p_wind_mode;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010

080018f8 <wind_control>:

void wind_control(TIM_HandleTypeDef tim_handler, WIND_MODE wind_mode){
 80018f8:	b084      	sub	sp, #16
 80018fa:	b490      	push	{r4, r7}
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	f107 0408 	add.w	r4, r7, #8
 8001902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * @brief Control PWM
	 * @param tim_handler timer handler
	 * @param wind_mode wind level to be controlled
	 */
	switch(wind_mode){
 8001906:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800190a:	2b02      	cmp	r3, #2
 800190c:	d00f      	beq.n	800192e <wind_control+0x36>
 800190e:	2b02      	cmp	r3, #2
 8001910:	dc12      	bgt.n	8001938 <wind_control+0x40>
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <wind_control+0x24>
 8001916:	2b01      	cmp	r3, #1
 8001918:	d004      	beq.n	8001924 <wind_control+0x2c>
		break;
	case LEVEL_2:
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 799);
		break;
	}
}
 800191a:	e00d      	b.n	8001938 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 0);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2200      	movs	r2, #0
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001922:	e009      	b.n	8001938 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 599);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f240 2257 	movw	r2, #599	; 0x257
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800192c:	e004      	b.n	8001938 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 799);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f240 321f 	movw	r2, #799	; 0x31f
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001936:	bf00      	nop
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc90      	pop	{r4, r7}
 800193e:	b004      	add	sp, #16
 8001940:	4770      	bx	lr
	...

08001944 <check_and_fix_variables>:

void check_and_fix_variables(){
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
	/*
	 *@brief check correctness of the flash memory storing state variables and fix
	 */
	uint32_t* p_power = (uint32_t*) power_page_address;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <check_and_fix_variables+0x6c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <check_and_fix_variables+0x70>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <check_and_fix_variables+0x74>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	607b      	str	r3, [r7, #4]
	if(*p_power != ON && *p_power != OFF){
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d006      	beq.n	8001972 <check_and_fix_variables+0x2e>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <check_and_fix_variables+0x2e>
		mutate_power(OFF);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fe99 	bl	80016a4 <mutate_power>
	}
	if(*p_control_mode != AUTOMATIC && *p_control_mode != MANUAL){
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <check_and_fix_variables+0x44>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d002      	beq.n	8001988 <check_and_fix_variables+0x44>
		mutate_control_mode(AUTOMATIC);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fef8 	bl	8001778 <mutate_control_mode>
	}
	if(*p_wind_mode != LEVEL_0 && *p_wind_mode != LEVEL_1 && *p_wind_mode != LEVEL_2){
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <check_and_fix_variables+0x62>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d006      	beq.n	80019a6 <check_and_fix_variables+0x62>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d002      	beq.n	80019a6 <check_and_fix_variables+0x62>
		mutate_wind_mode(LEVEL_0);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff ff33 	bl	800180c <mutate_wind_mode>
	}
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008
 80019b4:	2000000c 	.word	0x2000000c
 80019b8:	20000010 	.word	0x20000010

080019bc <restore_last_state>:

void restore_last_state(){
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	b095      	sub	sp, #84	; 0x54
 80019c0:	af10      	add	r7, sp, #64	; 0x40
	uint32_t* p_power = (uint32_t*) power_page_address;
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <restore_last_state+0x5c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <restore_last_state+0x60>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <restore_last_state+0x64>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	607b      	str	r3, [r7, #4]
	if(*p_power == ON && *p_control_mode == MANUAL){
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d119      	bne.n	8001a10 <restore_last_state+0x54>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d115      	bne.n	8001a10 <restore_last_state+0x54>
		wind_control(htim2, *p_wind_mode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4e0e      	ldr	r6, [pc, #56]	; (8001a24 <restore_last_state+0x68>)
 80019ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80019ee:	466d      	mov	r5, sp
 80019f0:	f106 0410 	add.w	r4, r6, #16
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a0c:	f7ff ff74 	bl	80018f8 <wind_control>
	}
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000010 	.word	0x20000010
 8001a24:	200000c0 	.word	0x200000c0

08001a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_MspInit+0x44>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_MspInit+0x44>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_MspInit+0x44>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_MspInit+0x44>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0ac      	sub	sp, #176	; 0xb0
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2288      	movs	r2, #136	; 0x88
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f006 faf1 	bl	8008078 <memset>
  if(hadc->Instance==ADC1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d147      	bne.n	8001b30 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aa4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001aa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 f9fb 	bl	8004ecc <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001adc:	f7ff fc0c 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b10:	2302      	movs	r3, #2
 8001b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b16:	230b      	movs	r3, #11
 8001b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f002 f9a8 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	37b0      	adds	r7, #176	; 0xb0
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	50040000 	.word	0x50040000
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b50:	d10c      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_TIM_Base_MspInit+0x68>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_TIM_Base_MspInit+0x68>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_TIM_Base_MspInit+0x68>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b6a:	e018      	b.n	8001b9e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_TIM_Base_MspInit+0x6c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d113      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_TIM_Base_MspInit+0x68>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_TIM_Base_MspInit+0x68>)
 8001b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b80:	6613      	str	r3, [r2, #96]	; 0x60
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_TIM_Base_MspInit+0x68>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 2, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2102      	movs	r1, #2
 8001b92:	202c      	movs	r0, #44	; 0x2c
 8001b94:	f001 fe2b 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001b98:	202c      	movs	r0, #44	; 0x2c
 8001b9a:	f001 fe44 	bl	8003826 <HAL_NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40013400 	.word	0x40013400

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d11c      	bne.n	8001c0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_TIM_MspPostInit+0x64>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_TIM_MspPostInit+0x64>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_MspPostInit+0x64>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bea:	2320      	movs	r3, #32
 8001bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 f93a 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0ac      	sub	sp, #176	; 0xb0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2288      	movs	r2, #136	; 0x88
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f006 fa1d 	bl	8008078 <memset>
  if(huart->Instance==USART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <HAL_UART_MspInit+0xb0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13a      	bne.n	8001cbe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 f939 	bl	8004ecc <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f7ff fb4a 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c94:	23c0      	movs	r3, #192	; 0xc0
 8001c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cac:	2307      	movs	r3, #7
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001cba:	f002 f8e1 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	37b0      	adds	r7, #176	; 0xb0
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 f8a6 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART1_IRQHandler+0x10>)
 8001d2e:	f005 f969 	bl	8007004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000158 	.word	0x20000158

08001d3c <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <TIM8_UP_IRQHandler+0x10>)
 8001d42:	f003 ffaf 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000010c 	.word	0x2000010c

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff ffea 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopForever+0xe>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopForever+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f006 f945 	bl	8008030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da6:	f7ff f843 	bl	8000e30 <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001db8:	080080f8 	.word	0x080080f8
  ldr r2, =_sbss
 8001dbc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001dc0:	20000230 	.word	0x20000230

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>

08001dc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f001 fd01 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f000 f80e 	bl	8001df8 <HAL_InitTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	e001      	b.n	8001dec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de8:	f7ff fe1e 	bl	8001a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_InitTick+0x70>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fd0d 	bl	8003842 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d809      	bhi.n	8001e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e3c:	f001 fcd7 	bl	80037ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_InitTick+0x74>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e004      	b.n	8001e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e001      	b.n	8001e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000001c 	.word	0x2000001c
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	20000018 	.word	0x20000018

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000001c 	.word	0x2000001c
 8001e94:	2000022c 	.word	0x2000022c

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000022c 	.word	0x2000022c

08001eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3360      	adds	r3, #96	; 0x60
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <LL_ADC_SetOffset+0x44>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	03fff000 	.word	0x03fff000

08001f60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3360      	adds	r3, #96	; 0x60
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3330      	adds	r3, #48	; 0x30
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	211f      	movs	r1, #31
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 011f 	and.w	r1, r3, #31
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3314      	adds	r3, #20
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0e5b      	lsrs	r3, r3, #25
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2107      	movs	r1, #7
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	401a      	ands	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0d1b      	lsrs	r3, r3, #20
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0318 	and.w	r3, r3, #24
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80020bc:	40d9      	lsrs	r1, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	400b      	ands	r3, r1
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	0007ffff 	.word	0x0007ffff

080020e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 031f 	and.w	r3, r3, #31
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6093      	str	r3, [r2, #8]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002150:	d101      	bne.n	8002156 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021a0:	d101      	bne.n	80021a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <LL_ADC_IsEnabled+0x18>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_ADC_IsEnabled+0x1a>
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d101      	bne.n	8002242 <LL_ADC_IsDisableOngoing+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_ADC_IsDisableOngoing+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d101      	bne.n	80022b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022da:	f043 0220 	orr.w	r2, r3, #32
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d101      	bne.n	8002306 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e136      	b.n	800259c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fb97 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fef1 	bl	800213c <LL_ADC_IsDeepPowerDownEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fed7 	bl	8002118 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff0c 	bl	800218c <LL_ADC_IsInternalRegulatorEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d115      	bne.n	80023a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fef0 	bl	8002164 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002384:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_ADC_Init+0x290>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_ADC_Init+0x294>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	3301      	adds	r3, #1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3b01      	subs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff feee 	bl	800218c <LL_ADC_IsInternalRegulatorEnabled>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff62 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 80cf 	bne.w	800258a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80cb 	bne.w	800258a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023fc:	f043 0202 	orr.w	r2, r3, #2
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fefb 	bl	8002204 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d115      	bne.n	8002440 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002414:	4865      	ldr	r0, [pc, #404]	; (80025ac <HAL_ADC_Init+0x298>)
 8002416:	f7ff fef5 	bl	8002204 <LL_ADC_IsEnabled>
 800241a:	4604      	mov	r4, r0
 800241c:	4864      	ldr	r0, [pc, #400]	; (80025b0 <HAL_ADC_Init+0x29c>)
 800241e:	f7ff fef1 	bl	8002204 <LL_ADC_IsEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	431c      	orrs	r4, r3
 8002426:	4863      	ldr	r0, [pc, #396]	; (80025b4 <HAL_ADC_Init+0x2a0>)
 8002428:	f7ff feec 	bl	8002204 <LL_ADC_IsEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	4323      	orrs	r3, r4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4619      	mov	r1, r3
 800243a:	485f      	ldr	r0, [pc, #380]	; (80025b8 <HAL_ADC_Init+0x2a4>)
 800243c:	f7ff fd38 	bl	8001eb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e5b      	ldrb	r3, [r3, #25]
 8002444:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002450:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002456:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d106      	bne.n	800247c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	3b01      	subs	r3, #1
 8002474:	045b      	lsls	r3, r3, #17
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_ADC_Init+0x2a8>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fef5 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 80024b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff16 	bl	80022ee <LL_ADC_INJ_IsConversionOngoing>
 80024c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13d      	bne.n	8002546 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d13a      	bne.n	8002546 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ec:	f023 0302 	bic.w	r3, r3, #2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	430b      	orrs	r3, r1
 80024f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002500:	2b01      	cmp	r3, #1
 8002502:	d118      	bne.n	8002536 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002520:	4311      	orrs	r1, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002526:	430a      	orrs	r2, r1
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	e007      	b.n	8002546 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10c      	bne.n	8002568 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f023 010f 	bic.w	r1, r3, #15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
 8002566:	e007      	b.n	8002578 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020f 	bic.w	r2, r2, #15
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f023 0303 	bic.w	r3, r3, #3
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
 8002588:	e007      	b.n	800259a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3724      	adds	r7, #36	; 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	20000014 	.word	0x20000014
 80025a8:	053e2d63 	.word	0x053e2d63
 80025ac:	50040000 	.word	0x50040000
 80025b0:	50040100 	.word	0x50040100
 80025b4:	50040200 	.word	0x50040200
 80025b8:	50040300 	.word	0x50040300
 80025bc:	fff0c007 	.word	0xfff0c007

080025c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c8:	4857      	ldr	r0, [pc, #348]	; (8002728 <HAL_ADC_Start+0x168>)
 80025ca:	f7ff fd89 	bl	80020e0 <LL_ADC_GetMultimode>
 80025ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fe63 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 809c 	bne.w	800271a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_Start+0x30>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e097      	b.n	8002720 <HAL_ADC_Start+0x160>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fe61 	bl	80032c0 <ADC_Enable>
 80025fe:	4603      	mov	r3, r0
 8002600:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 8083 	bne.w	8002710 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_ADC_Start+0x16c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d002      	beq.n	800262e <HAL_ADC_Start+0x6e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e000      	b.n	8002630 <HAL_ADC_Start+0x70>
 800262e:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_ADC_Start+0x170>)
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	4293      	cmp	r3, r2
 8002636:	d002      	beq.n	800263e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002656:	d106      	bne.n	8002666 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f023 0206 	bic.w	r2, r3, #6
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	659a      	str	r2, [r3, #88]	; 0x58
 8002664:	e002      	b.n	800266c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	221c      	movs	r2, #28
 8002672:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2a      	ldr	r2, [pc, #168]	; (800272c <HAL_ADC_Start+0x16c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d002      	beq.n	800268c <HAL_ADC_Start+0xcc>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	e000      	b.n	800268e <HAL_ADC_Start+0xce>
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_ADC_Start+0x170>)
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	4293      	cmp	r3, r2
 8002694:	d008      	beq.n	80026a8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d114      	bne.n	80026d2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fdc0 	bl	8002250 <LL_ADC_REG_StartConversion>
 80026d0:	e025      	b.n	800271e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_ADC_Start+0x16c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d002      	beq.n	80026ee <HAL_ADC_Start+0x12e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_Start+0x130>
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_ADC_Start+0x170>)
 80026f0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00f      	beq.n	800271e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002706:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
 800270e:	e006      	b.n	800271e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002718:	e001      	b.n	800271e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	50040300 	.word	0x50040300
 800272c:	50040100 	.word	0x50040100
 8002730:	50040000 	.word	0x50040000

08002734 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_Stop+0x16>
 8002746:	2302      	movs	r3, #2
 8002748:	e023      	b.n	8002792 <HAL_ADC_Stop+0x5e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002752:	2103      	movs	r1, #3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fcf7 	bl	8003148 <ADC_ConversionStop>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d111      	bne.n	8002788 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fe31 	bl	80033cc <ADC_Disable>
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a6:	4866      	ldr	r0, [pc, #408]	; (8002940 <HAL_ADC_PollForConversion+0x1a4>)
 80027a8:	f7ff fc9a 	bl	80020e0 <LL_ADC_GetMultimode>
 80027ac:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d102      	bne.n	80027bc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027b6:	2308      	movs	r3, #8
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e02a      	b.n	8002812 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d002      	beq.n	80027ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	d111      	bne.n	80027f2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0a4      	b.n	8002936 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027ec:	2304      	movs	r3, #4
 80027ee:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027f0:	e00f      	b.n	8002812 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027f2:	4853      	ldr	r0, [pc, #332]	; (8002940 <HAL_ADC_PollForConversion+0x1a4>)
 80027f4:	f7ff fc82 	bl	80020fc <LL_ADC_GetMultiDMATransfer>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e093      	b.n	8002936 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800280e:	2304      	movs	r3, #4
 8002810:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002812:	f7ff fb41 	bl	8001e98 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002818:	e021      	b.n	800285e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002820:	d01d      	beq.n	800285e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002822:	f7ff fb39 	bl	8001e98 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <HAL_ADC_PollForConversion+0x9c>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d112      	bne.n	800285e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0204 	orr.w	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e06b      	b.n	8002936 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0d6      	beq.n	800281a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fba0 	bl	8001fc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01c      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7e5b      	ldrb	r3, [r3, #25]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d118      	bne.n	80028c2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d111      	bne.n	80028c2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_ADC_PollForConversion+0x1a8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d002      	beq.n	80028d2 <HAL_ADC_PollForConversion+0x136>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	e000      	b.n	80028d4 <HAL_ADC_PollForConversion+0x138>
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_ADC_PollForConversion+0x1ac>)
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	4293      	cmp	r3, r2
 80028da:	d008      	beq.n	80028ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d002      	beq.n	80028ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d104      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e00c      	b.n	8002912 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_ADC_PollForConversion+0x1a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d002      	beq.n	8002908 <HAL_ADC_PollForConversion+0x16c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e000      	b.n	800290a <HAL_ADC_PollForConversion+0x16e>
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_ADC_PollForConversion+0x1ac>)
 800290a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d104      	bne.n	8002922 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2208      	movs	r2, #8
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e008      	b.n	8002934 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	220c      	movs	r2, #12
 8002932:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	50040300 	.word	0x50040300
 8002944:	50040100 	.word	0x50040100
 8002948:	50040000 	.word	0x50040000

0800294c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0b6      	sub	sp, #216	; 0xd8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x22>
 8002986:	2302      	movs	r3, #2
 8002988:	e3c7      	b.n	800311a <HAL_ADC_ConfigChannel+0x7b2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fc82 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 83a8 	bne.w	80030f4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d824      	bhi.n	80029f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	3b02      	subs	r3, #2
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d81b      	bhi.n	80029ee <HAL_ADC_ConfigChannel+0x86>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <HAL_ADC_ConfigChannel+0x54>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d5 	.word	0x080029d5
 80029c4:	080029dd 	.word	0x080029dd
 80029c8:	080029e5 	.word	0x080029e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	220c      	movs	r2, #12
 80029d0:	605a      	str	r2, [r3, #4]
          break;
 80029d2:	e011      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2212      	movs	r2, #18
 80029d8:	605a      	str	r2, [r3, #4]
          break;
 80029da:	e00d      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2218      	movs	r2, #24
 80029e0:	605a      	str	r2, [r3, #4]
          break;
 80029e2:	e009      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ea:	605a      	str	r2, [r3, #4]
          break;
 80029ec:	e004      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2206      	movs	r2, #6
 80029f2:	605a      	str	r2, [r3, #4]
          break;
 80029f4:	e000      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80029f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f7ff faef 	bl	8001fe8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fc46 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 8002a14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fc66 	bl	80022ee <LL_ADC_INJ_IsConversionOngoing>
 8002a22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 81a6 	bne.w	8002d7c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 81a1 	bne.w	8002d7c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f7ff fafa 	bl	8002040 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d00a      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a7e:	f7ff fa4b 	bl	8001f18 <LL_ADC_SetOffset>
 8002a82:	e17b      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fa68 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x148>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fa5d 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	e01e      	b.n	8002aee <HAL_ADC_ConfigChannel+0x186>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa52 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e004      	b.n	8002aec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x19e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e018      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x1d0>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e004      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fa21 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fa05 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x20e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f9fa 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	0e9b      	lsrs	r3, r3, #26
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	e01e      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x24c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f9ef 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e004      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x264>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	e018      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x296>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002be0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e004      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f9be 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f9a2 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x2d4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f997 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	e01e      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x312>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2102      	movs	r1, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f98c 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x32a>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	e016      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x358>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e004      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d106      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2102      	movs	r1, #2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f95d 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2103      	movs	r1, #3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f941 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x396>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2103      	movs	r1, #3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f936 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	e017      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x3c6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2103      	movs	r1, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f92b 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x3de>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	e011      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x402>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d106      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	2103      	movs	r1, #3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f908 	bl	8001f8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fa3f 	bl	8002204 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 813f 	bne.w	800300c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f7ff f97c 	bl	8002098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a8e      	ldr	r2, [pc, #568]	; (8002fe0 <HAL_ADC_ConfigChannel+0x678>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	f040 8130 	bne.w	800300c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x46c>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2b09      	cmp	r3, #9
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e019      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x4a0>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002dec:	2320      	movs	r3, #32
 8002dee:	e003      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2b09      	cmp	r3, #9
 8002e00:	bf94      	ite	ls
 8002e02:	2301      	movls	r3, #1
 8002e04:	2300      	movhi	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d079      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x4c0>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	3301      	adds	r3, #1
 8002e20:	069b      	lsls	r3, r3, #26
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e26:	e015      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x4ec>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002e40:	2320      	movs	r3, #32
 8002e42:	e003      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	069b      	lsls	r3, r3, #26
 8002e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x50c>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	e017      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x53c>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e003      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	ea42 0103 	orr.w	r1, r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x562>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	051b      	lsls	r3, r3, #20
 8002ec8:	e018      	b.n	8002efc <HAL_ADC_ConfigChannel+0x594>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e003      	b.n	8002eee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efc:	430b      	orrs	r3, r1
 8002efe:	e080      	b.n	8003002 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x5b4>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	3301      	adds	r3, #1
 8002f14:	069b      	lsls	r3, r3, #26
 8002f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f1a:	e015      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x5e0>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002f34:	2320      	movs	r3, #32
 8002f36:	e003      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x600>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0e9b      	lsrs	r3, r3, #26
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	e017      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x630>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	61fb      	str	r3, [r7, #28]
  return result;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e003      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	ea42 0103 	orr.w	r1, r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x65c>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b1e      	subs	r3, #30
 8002fbc:	051b      	lsls	r3, r3, #20
 8002fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	e01d      	b.n	8003000 <HAL_ADC_ConfigChannel+0x698>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	613b      	str	r3, [r7, #16]
  return result;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e005      	b.n	8002fec <HAL_ADC_ConfigChannel+0x684>
 8002fe0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f003 021f 	and.w	r2, r3, #31
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b1e      	subs	r3, #30
 8002ffa:	051b      	lsls	r3, r3, #20
 8002ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003000:	430b      	orrs	r3, r1
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	6892      	ldr	r2, [r2, #8]
 8003006:	4619      	mov	r1, r3
 8003008:	f7ff f81a 	bl	8002040 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_ADC_ConfigChannel+0x7bc>)
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d07a      	beq.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003018:	4843      	ldr	r0, [pc, #268]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 800301a:	f7fe ff6f 	bl	8001efc <LL_ADC_GetCommonPathInternalCh>
 800301e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a41      	ldr	r2, [pc, #260]	; (800312c <HAL_ADC_ConfigChannel+0x7c4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d12c      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800302c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d126      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3c      	ldr	r2, [pc, #240]	; (8003130 <HAL_ADC_ConfigChannel+0x7c8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_ADC_ConfigChannel+0x6e4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3b      	ldr	r2, [pc, #236]	; (8003134 <HAL_ADC_ConfigChannel+0x7cc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d15d      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800304c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003054:	4619      	mov	r1, r3
 8003056:	4834      	ldr	r0, [pc, #208]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 8003058:	f7fe ff3d 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_ADC_ConfigChannel+0x7d0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	4a36      	ldr	r2, [pc, #216]	; (800313c <HAL_ADC_ConfigChannel+0x7d4>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003076:	e002      	b.n	800307e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b01      	subs	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f9      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003084:	e040      	b.n	8003108 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <HAL_ADC_ConfigChannel+0x7d8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d118      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x75a>
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d112      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	; (8003130 <HAL_ADC_ConfigChannel+0x7c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_ADC_ConfigChannel+0x748>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_ADC_ConfigChannel+0x7cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d12d      	bne.n	800310c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b8:	4619      	mov	r1, r3
 80030ba:	481b      	ldr	r0, [pc, #108]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 80030bc:	f7fe ff0b 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c0:	e024      	b.n	800310c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_ADC_ConfigChannel+0x7dc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d120      	bne.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11a      	bne.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <HAL_ADC_ConfigChannel+0x7c8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d115      	bne.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ea:	4619      	mov	r1, r3
 80030ec:	480e      	ldr	r0, [pc, #56]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 80030ee:	f7fe fef2 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
 80030f2:	e00c      	b.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003106:	e002      	b.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003116:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800311a:	4618      	mov	r0, r3
 800311c:	37d8      	adds	r7, #216	; 0xd8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	80080000 	.word	0x80080000
 8003128:	50040300 	.word	0x50040300
 800312c:	c7520000 	.word	0xc7520000
 8003130:	50040000 	.word	0x50040000
 8003134:	50040200 	.word	0x50040200
 8003138:	20000014 	.word	0x20000014
 800313c:	053e2d63 	.word	0x053e2d63
 8003140:	cb840000 	.word	0xcb840000
 8003144:	80000001 	.word	0x80000001

08003148 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f89e 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 8003164:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f8bf 	bl	80022ee <LL_ADC_INJ_IsConversionOngoing>
 8003170:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8098 	beq.w	80032b0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02a      	beq.n	80031e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7e5b      	ldrb	r3, [r3, #25]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d126      	bne.n	80031e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7e1b      	ldrb	r3, [r3, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d122      	bne.n	80031e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800319e:	2301      	movs	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031a2:	e014      	b.n	80031ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4a45      	ldr	r2, [pc, #276]	; (80032bc <ADC_ConversionStop+0x174>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d90d      	bls.n	80031c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e074      	b.n	80032b2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	3301      	adds	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d1e3      	bne.n	80031a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d014      	beq.n	8003214 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f856 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f813 	bl	800222a <LL_ADC_IsDisableOngoing>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f832 	bl	8002278 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d014      	beq.n	8003244 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f865 	bl	80022ee <LL_ADC_INJ_IsConversionOngoing>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fffb 	bl	800222a <LL_ADC_IsDisableOngoing>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f841 	bl	80022c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d005      	beq.n	8003256 <ADC_ConversionStop+0x10e>
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d105      	bne.n	800325c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003250:	230c      	movs	r3, #12
 8003252:	617b      	str	r3, [r7, #20]
        break;
 8003254:	e005      	b.n	8003262 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003256:	2308      	movs	r3, #8
 8003258:	617b      	str	r3, [r7, #20]
        break;
 800325a:	e002      	b.n	8003262 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800325c:	2304      	movs	r3, #4
 800325e:	617b      	str	r3, [r7, #20]
        break;
 8003260:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003262:	f7fe fe19 	bl	8001e98 <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003268:	e01b      	b.n	80032a2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800326a:	f7fe fe15 	bl	8001e98 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b05      	cmp	r3, #5
 8003276:	d914      	bls.n	80032a2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e007      	b.n	80032b2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1dc      	bne.n	800326a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	a33fffff 	.word	0xa33fffff

080032c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe ff97 	bl	8002204 <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d169      	bne.n	80033b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	4b36      	ldr	r3, [pc, #216]	; (80033bc <ADC_Enable+0xfc>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e055      	b.n	80033b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe ff52 	bl	80021b4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003310:	482b      	ldr	r0, [pc, #172]	; (80033c0 <ADC_Enable+0x100>)
 8003312:	f7fe fdf3 	bl	8001efc <LL_ADC_GetCommonPathInternalCh>
 8003316:	4603      	mov	r3, r0
 8003318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <ADC_Enable+0x104>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <ADC_Enable+0x108>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800333a:	e002      	b.n	8003342 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3b01      	subs	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003348:	f7fe fda6 	bl	8001e98 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334e:	e028      	b.n	80033a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe ff55 	bl	8002204 <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ff25 	bl	80021b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336a:	f7fe fd95 	bl	8001e98 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d914      	bls.n	80033a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d00d      	beq.n	80033a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d1cf      	bne.n	8003350 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	8000003f 	.word	0x8000003f
 80033c0:	50040300 	.word	0x50040300
 80033c4:	20000014 	.word	0x20000014
 80033c8:	053e2d63 	.word	0x053e2d63

080033cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe ff26 	bl	800222a <LL_ADC_IsDisableOngoing>
 80033de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe ff0d 	bl	8002204 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d047      	beq.n	8003480 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d144      	bne.n	8003480 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030d 	and.w	r3, r3, #13
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10c      	bne.n	800341e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fee7 	bl	80021dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2203      	movs	r2, #3
 8003414:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003416:	f7fe fd3f 	bl	8001e98 <HAL_GetTick>
 800341a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800341c:	e029      	b.n	8003472 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e023      	b.n	8003482 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800343a:	f7fe fd2d 	bl	8001e98 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d914      	bls.n	8003472 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e007      	b.n	8003482 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1dc      	bne.n	800343a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <LL_ADC_IsEnabled>:
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <LL_ADC_IsEnabled+0x18>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <LL_ADC_IsEnabled+0x1a>
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_REG_IsConversionOngoing>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d101      	bne.n	80034c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b09f      	sub	sp, #124	; 0x7c
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e093      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80034fe:	2300      	movs	r3, #0
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003502:	2300      	movs	r3, #0
 8003504:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d102      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	e001      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e072      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ffb8 	bl	80034b0 <LL_ADC_REG_IsConversionOngoing>
 8003540:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ffb2 	bl	80034b0 <LL_ADC_REG_IsConversionOngoing>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d154      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003554:	2b00      	cmp	r3, #0
 8003556:	d151      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800355a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02c      	beq.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003576:	035b      	lsls	r3, r3, #13
 8003578:	430b      	orrs	r3, r1
 800357a:	431a      	orrs	r2, r3
 800357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003580:	4829      	ldr	r0, [pc, #164]	; (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003582:	f7ff ff82 	bl	800348a <LL_ADC_IsEnabled>
 8003586:	4604      	mov	r4, r0
 8003588:	4828      	ldr	r0, [pc, #160]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800358a:	f7ff ff7e 	bl	800348a <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	431c      	orrs	r4, r3
 8003592:	4828      	ldr	r0, [pc, #160]	; (8003634 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003594:	f7ff ff79 	bl	800348a <LL_ADC_IsEnabled>
 8003598:	4603      	mov	r3, r0
 800359a:	4323      	orrs	r3, r4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d137      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035a8:	f023 030f 	bic.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	6811      	ldr	r1, [r2, #0]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035bc:	e028      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ca:	4817      	ldr	r0, [pc, #92]	; (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035cc:	f7ff ff5d 	bl	800348a <LL_ADC_IsEnabled>
 80035d0:	4604      	mov	r4, r0
 80035d2:	4816      	ldr	r0, [pc, #88]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035d4:	f7ff ff59 	bl	800348a <LL_ADC_IsEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	431c      	orrs	r4, r3
 80035dc:	4815      	ldr	r0, [pc, #84]	; (8003634 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035de:	f7ff ff54 	bl	800348a <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4323      	orrs	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d112      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035fa:	e009      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800360e:	e000      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800361e:	4618      	mov	r0, r3
 8003620:	377c      	adds	r7, #124	; 0x7c
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	50040000 	.word	0x50040000
 800362c:	50040100 	.word	0x50040100
 8003630:	50040300 	.word	0x50040300
 8003634:	50040200 	.word	0x50040200

08003638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60d3      	str	r3, [r2, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <__NVIC_GetPriorityGrouping+0x18>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 0307 	and.w	r3, r3, #7
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db0b      	blt.n	80036c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <__NVIC_EnableIRQ+0x38>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2001      	movs	r0, #1
 80036be:	fa00 f202 	lsl.w	r2, r0, r2
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf28      	it	cs
 800374a:	2304      	movcs	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <NVIC_EncodePriority+0x30>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3b03      	subs	r3, #3
 800375a:	e000      	b.n	800375e <NVIC_EncodePriority+0x32>
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	401a      	ands	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43d9      	mvns	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	4313      	orrs	r3, r2
         );
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a4:	d301      	bcc.n	80037aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00f      	b.n	80037ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <SysTick_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b2:	210f      	movs	r1, #15
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b8:	f7ff ff8e 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <SysTick_Config+0x40>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <SysTick_Config+0x40>)
 80037c4:	2207      	movs	r2, #7
 80037c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff29 	bl	8003638 <__NVIC_SetPriorityGrouping>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003800:	f7ff ff3e 	bl	8003680 <__NVIC_GetPriorityGrouping>
 8003804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7ff ff8e 	bl	800372c <NVIC_EncodePriority>
 8003810:	4602      	mov	r2, r0
 8003812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff5d 	bl	80036d8 <__NVIC_SetPriority>
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff31 	bl	800369c <__NVIC_EnableIRQ>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffa2 	bl	8003794 <SysTick_Config>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d008      	beq.n	8003884 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2204      	movs	r2, #4
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e022      	b.n	80038ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 020e 	bic.w	r2, r2, #14
 8003892:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f003 021c 	and.w	r2, r3, #28
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f202 	lsl.w	r2, r1, r2
 80038b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d005      	beq.n	80038fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e029      	b.n	800394e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 020e 	bic.w	r2, r2, #14
 8003908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f003 021c 	and.w	r2, r3, #28
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f202 	lsl.w	r2, r1, r2
 800392c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
    }
  }
  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800396a:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <HAL_FLASH_Program+0xd0>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_FLASH_Program+0x1e>
 8003972:	2302      	movs	r3, #2
 8003974:	e053      	b.n	8003a1e <HAL_FLASH_Program+0xc6>
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <HAL_FLASH_Program+0xd0>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800397c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003980:	f000 f888 	bl	8003a94 <FLASH_WaitForLastOperation>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d143      	bne.n	8003a16 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_FLASH_Program+0xd0>)
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_FLASH_Program+0xd4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80039a0:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_FLASH_Program+0xd4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_FLASH_Program+0xd4>)
 80039a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039aa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_FLASH_Program+0xd0>)
 80039ae:	2202      	movs	r2, #2
 80039b0:	771a      	strb	r2, [r3, #28]
 80039b2:	e002      	b.n	80039ba <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_FLASH_Program+0xd0>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80039c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c4:	68b8      	ldr	r0, [r7, #8]
 80039c6:	f000 f8bb 	bl	8003b40 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80039ca:	2301      	movs	r3, #1
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e010      	b.n	80039f2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d002      	beq.n	80039dc <HAL_FLASH_Program+0x84>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d10a      	bne.n	80039f2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	68b8      	ldr	r0, [r7, #8]
 80039e2:	f000 f8d3 	bl	8003b8c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d102      	bne.n	80039f2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80039ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039f0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039f6:	f000 f84d 	bl	8003a94 <FLASH_WaitForLastOperation>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_FLASH_Program+0xd4>)
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <HAL_FLASH_Program+0xd4>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003a12:	f000 f9eb 	bl	8003dec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_FLASH_Program+0xd0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]

  return status;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000020 	.word	0x20000020
 8003a2c:	40022000 	.word	0x40022000

08003a30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_FLASH_Unlock+0x38>)
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da0b      	bge.n	8003a5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_FLASH_Unlock+0x38>)
 8003a44:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <HAL_FLASH_Unlock+0x3c>)
 8003a46:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a48:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <HAL_FLASH_Unlock+0x38>)
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_FLASH_Unlock+0x40>)
 8003a4c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_FLASH_Unlock+0x38>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da01      	bge.n	8003a5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	45670123 	.word	0x45670123
 8003a70:	cdef89ab 	.word	0xcdef89ab

08003a74 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_FLASH_Lock+0x1c>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_FLASH_Lock+0x1c>)
 8003a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40022000 	.word	0x40022000

08003a94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7fe f9fc 	bl	8001e98 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003aa2:	e00d      	b.n	8003ac0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aaa:	d009      	beq.n	8003ac0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003aac:	f7fe f9f4 	bl	8001e98 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d801      	bhi.n	8003ac0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e037      	b.n	8003b30 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1eb      	bne.n	8003aa4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01e      	beq.n	8003b1c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <FLASH_WaitForLastOperation+0xa8>)
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <FLASH_WaitForLastOperation+0xa8>)
 8003ae8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <FLASH_WaitForLastOperation+0x70>
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003afe:	490e      	ldr	r1, [pc, #56]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	618b      	str	r3, [r1, #24]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <FLASH_WaitForLastOperation+0x84>
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b16:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e009      	b.n	8003b30 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <FLASH_WaitForLastOperation+0xa4>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	20000020 	.word	0x20000020

08003b40 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <FLASH_Program_DoubleWord+0x48>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <FLASH_Program_DoubleWord+0x48>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003b5e:	f3bf 8f6f 	isb	sy
}
 8003b62:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	000a      	movs	r2, r1
 8003b72:	2300      	movs	r3, #0
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	3104      	adds	r1, #4
 8003b78:	4613      	mov	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40022000 	.word	0x40022000

08003b8c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003b96:	2340      	movs	r3, #64	; 0x40
 8003b98:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <FLASH_Program_Fast+0x68>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <FLASH_Program_Fast+0x68>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003bb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb8:	b672      	cpsid	i
}
 8003bba:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	617b      	str	r3, [r7, #20]
    row_index--;
 8003bd0:	7ffb      	ldrb	r3, [r7, #31]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003bd6:	7ffb      	ldrb	r3, [r7, #31]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <FLASH_Program_Fast+0x30>
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003be8:	bf00      	nop
 8003bea:	3724      	adds	r7, #36	; 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40022000 	.word	0x40022000

08003bf8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c02:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_FLASHEx_Erase+0x16>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e087      	b.n	8003d1e <HAL_FLASHEx_Erase+0x126>
 8003c0e:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c18:	f7ff ff3c 	bl	8003a94 <FLASH_WaitForLastOperation>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d177      	bne.n	8003d16 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c26:	4b40      	ldr	r3, [pc, #256]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003c38:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c52:	2203      	movs	r2, #3
 8003c54:	771a      	strb	r2, [r3, #28]
 8003c56:	e016      	b.n	8003c86 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003c58:	4b33      	ldr	r3, [pc, #204]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	771a      	strb	r2, [r3, #28]
 8003c5e:	e012      	b.n	8003c86 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c76:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003c78:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	771a      	strb	r2, [r3, #28]
 8003c7e:	e002      	b.n	8003c86 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d113      	bne.n	8003cb6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f84c 	bl	8003d30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c9c:	f7ff fefa 	bl	8003a94 <FLASH_WaitForLastOperation>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003caa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cae:	f023 0304 	bic.w	r3, r3, #4
 8003cb2:	6153      	str	r3, [r2, #20]
 8003cb4:	e02d      	b.n	8003d12 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cbc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	e01d      	b.n	8003d02 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68b8      	ldr	r0, [r7, #8]
 8003cce:	f000 f857 	bl	8003d80 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cd6:	f7ff fedd 	bl	8003a94 <FLASH_WaitForLastOperation>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_FLASHEx_Erase+0x134>)
 8003ce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ce8:	f023 0302 	bic.w	r3, r3, #2
 8003cec:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	601a      	str	r2, [r3, #0]
          break;
 8003cfa:	e00a      	b.n	8003d12 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3d9      	bcc.n	8003cc6 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003d12:	f000 f86b 	bl	8003dec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_FLASHEx_Erase+0x130>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]

  return status;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000020 	.word	0x20000020
 8003d2c:	40022000 	.word	0x40022000

08003d30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <FLASH_MassErase+0x4c>)
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <FLASH_MassErase+0x4c>)
 8003d48:	f043 0304 	orr.w	r3, r3, #4
 8003d4c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <FLASH_MassErase+0x4c>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <FLASH_MassErase+0x4c>)
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <FLASH_MassErase+0x4c>)
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <FLASH_MassErase+0x4c>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6e:	6153      	str	r3, [r2, #20]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40022000 	.word	0x40022000

08003d80 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <FLASH_PageErase+0x68>)
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <FLASH_PageErase+0x68>)
 8003d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9e:	6153      	str	r3, [r2, #20]
 8003da0:	e005      	b.n	8003dae <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <FLASH_PageErase+0x68>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <FLASH_PageErase+0x68>)
 8003da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dac:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <FLASH_PageErase+0x68>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003dbe:	490a      	ldr	r1, [pc, #40]	; (8003de8 <FLASH_PageErase+0x68>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <FLASH_PageErase+0x68>)
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <FLASH_PageErase+0x68>)
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <FLASH_PageErase+0x68>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <FLASH_PageErase+0x68>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dda:	6153      	str	r3, [r2, #20]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40022000 	.word	0x40022000

08003dec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <FLASH_FlushCaches+0x8c>)
 8003df4:	7f1b      	ldrb	r3, [r3, #28]
 8003df6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d002      	beq.n	8003e04 <FLASH_FlushCaches+0x18>
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d117      	bne.n	8003e34 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e28:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d002      	beq.n	8003e40 <FLASH_FlushCaches+0x54>
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d111      	bne.n	8003e64 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <FLASH_FlushCaches+0x90>)
 8003e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <FLASH_FlushCaches+0x8c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	771a      	strb	r2, [r3, #28]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000020 	.word	0x20000020
 8003e7c:	40022000 	.word	0x40022000

08003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8e:	e17f      	b.n	8004190 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8171 	beq.w	800418a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d005      	beq.n	8003ec0 <HAL_GPIO_Init+0x40>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d130      	bne.n	8003f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0201 	and.w	r2, r3, #1
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d118      	bne.n	8003f60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f34:	2201      	movs	r2, #1
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	f003 0201 	and.w	r2, r3, #1
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d017      	beq.n	8003f9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d123      	bne.n	8003ff0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	6939      	ldr	r1, [r7, #16]
 8003fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80ac 	beq.w	800418a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	4b5f      	ldr	r3, [pc, #380]	; (80041b0 <HAL_GPIO_Init+0x330>)
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	4a5e      	ldr	r2, [pc, #376]	; (80041b0 <HAL_GPIO_Init+0x330>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6613      	str	r3, [r2, #96]	; 0x60
 800403e:	4b5c      	ldr	r3, [pc, #368]	; (80041b0 <HAL_GPIO_Init+0x330>)
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800404a:	4a5a      	ldr	r2, [pc, #360]	; (80041b4 <HAL_GPIO_Init+0x334>)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004074:	d025      	beq.n	80040c2 <HAL_GPIO_Init+0x242>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4f      	ldr	r2, [pc, #316]	; (80041b8 <HAL_GPIO_Init+0x338>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01f      	beq.n	80040be <HAL_GPIO_Init+0x23e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4e      	ldr	r2, [pc, #312]	; (80041bc <HAL_GPIO_Init+0x33c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d019      	beq.n	80040ba <HAL_GPIO_Init+0x23a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_GPIO_Init+0x340>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_GPIO_Init+0x236>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_GPIO_Init+0x344>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00d      	beq.n	80040b2 <HAL_GPIO_Init+0x232>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4b      	ldr	r2, [pc, #300]	; (80041c8 <HAL_GPIO_Init+0x348>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <HAL_GPIO_Init+0x22e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <HAL_GPIO_Init+0x34c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_GPIO_Init+0x22a>
 80040a6:	2306      	movs	r3, #6
 80040a8:	e00c      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040aa:	2307      	movs	r3, #7
 80040ac:	e00a      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040ae:	2305      	movs	r3, #5
 80040b0:	e008      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040b2:	2304      	movs	r3, #4
 80040b4:	e006      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040b6:	2303      	movs	r3, #3
 80040b8:	e004      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x244>
 80040c2:	2300      	movs	r3, #0
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	f002 0203 	and.w	r2, r2, #3
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	4093      	lsls	r3, r2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040d4:	4937      	ldr	r1, [pc, #220]	; (80041b4 <HAL_GPIO_Init+0x334>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_GPIO_Init+0x350>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004106:	4a32      	ldr	r2, [pc, #200]	; (80041d0 <HAL_GPIO_Init+0x350>)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800410c:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_GPIO_Init+0x350>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	43db      	mvns	r3, r3
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004130:	4a27      	ldr	r2, [pc, #156]	; (80041d0 <HAL_GPIO_Init+0x350>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004136:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <HAL_GPIO_Init+0x350>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800415a:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_GPIO_Init+0x350>)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_GPIO_Init+0x350>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	43db      	mvns	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004184:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <HAL_GPIO_Init+0x350>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3301      	adds	r3, #1
 800418e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	f47f ae78 	bne.w	8003e90 <HAL_GPIO_Init+0x10>
  }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40010000 	.word	0x40010000
 80041b8:	48000400 	.word	0x48000400
 80041bc:	48000800 	.word	0x48000800
 80041c0:	48000c00 	.word	0x48000c00
 80041c4:	48001000 	.word	0x48001000
 80041c8:	48001400 	.word	0x48001400
 80041cc:	48001800 	.word	0x48001800
 80041d0:	40010400 	.word	0x40010400

080041d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
 80041e0:	4613      	mov	r3, r2
 80041e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e4:	787b      	ldrb	r3, [r7, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_PWREx_GetVoltageRange+0x18>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40007000 	.word	0x40007000

08004220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422e:	d130      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d038      	beq.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2232      	movs	r2, #50	; 0x32
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0c9b      	lsrs	r3, r3, #18
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004264:	e002      	b.n	800426c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3b01      	subs	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d102      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f2      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d110      	bne.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d007      	beq.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40007000 	.word	0x40007000
 80042c4:	20000014 	.word	0x20000014
 80042c8:	431bde83 	.word	0x431bde83

080042cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e3ca      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b97      	ldr	r3, [pc, #604]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e8:	4b94      	ldr	r3, [pc, #592]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e4 	beq.w	80044c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_RCC_OscConfig+0x4a>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	f040 808b 	bne.w	8004424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b01      	cmp	r3, #1
 8004312:	f040 8087 	bne.w	8004424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004316:	4b89      	ldr	r3, [pc, #548]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x62>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e3a2      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_RCC_OscConfig+0x7c>
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004346:	e005      	b.n	8004354 <HAL_RCC_OscConfig+0x88>
 8004348:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	4293      	cmp	r3, r2
 8004356:	d223      	bcs.n	80043a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fd55 	bl	8004e0c <RCC_SetFlashLatencyFromMSIRange>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e383      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436c:	4b73      	ldr	r3, [pc, #460]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a72      	ldr	r2, [pc, #456]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b70      	ldr	r3, [pc, #448]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	496d      	ldr	r1, [pc, #436]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438a:	4b6c      	ldr	r3, [pc, #432]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	4968      	ldr	r1, [pc, #416]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
 800439e:	e025      	b.n	80043ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a0:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a65      	ldr	r2, [pc, #404]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043a6:	f043 0308 	orr.w	r3, r3, #8
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b63      	ldr	r3, [pc, #396]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4960      	ldr	r1, [pc, #384]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043be:	4b5f      	ldr	r3, [pc, #380]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	495b      	ldr	r1, [pc, #364]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd15 	bl	8004e0c <RCC_SetFlashLatencyFromMSIRange>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e343      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ec:	f000 fc4a 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b52      	ldr	r3, [pc, #328]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	4950      	ldr	r1, [pc, #320]	; (8004540 <HAL_RCC_OscConfig+0x274>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <HAL_RCC_OscConfig+0x278>)
 800440a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800440c:	4b4e      	ldr	r3, [pc, #312]	; (8004548 <HAL_RCC_OscConfig+0x27c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fd fcf1 	bl	8001df8 <HAL_InitTick>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d052      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	e327      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d032      	beq.n	8004492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800442c:	4b43      	ldr	r3, [pc, #268]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a42      	ldr	r2, [pc, #264]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004438:	f7fd fd2e 	bl	8001e98 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004440:	f7fd fd2a 	bl	8001e98 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e310      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004452:	4b3a      	ldr	r3, [pc, #232]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a36      	ldr	r2, [pc, #216]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	4931      	ldr	r1, [pc, #196]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447c:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	492c      	ldr	r1, [pc, #176]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	e01a      	b.n	80044c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004492:	4b2a      	ldr	r3, [pc, #168]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800449e:	f7fd fcfb 	bl	8001e98 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a6:	f7fd fcf7 	bl	8001e98 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e2dd      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x1da>
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d074      	beq.n	80045be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x21a>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	d10e      	bne.n	80044fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d10b      	bne.n	80044fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d064      	beq.n	80045bc <HAL_RCC_OscConfig+0x2f0>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d160      	bne.n	80045bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e2ba      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x24a>
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0b      	ldr	r2, [pc, #44]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e026      	b.n	8004564 <HAL_RCC_OscConfig+0x298>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451e:	d115      	bne.n	800454c <HAL_RCC_OscConfig+0x280>
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a05      	ldr	r2, [pc, #20]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a02      	ldr	r2, [pc, #8]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e014      	b.n	8004564 <HAL_RCC_OscConfig+0x298>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	080080a0 	.word	0x080080a0
 8004544:	20000014 	.word	0x20000014
 8004548:	20000018 	.word	0x20000018
 800454c:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a9f      	ldr	r2, [pc, #636]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b9d      	ldr	r3, [pc, #628]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a9c      	ldr	r2, [pc, #624]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fd fc94 	bl	8001e98 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fd fc90 	bl	8001e98 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e276      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	4b92      	ldr	r3, [pc, #584]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x2a8>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fc80 	bl	8001e98 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd fc7c 	bl	8001e98 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e262      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x2d0>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d060      	beq.n	800468c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x310>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d119      	bne.n	800460a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d116      	bne.n	800460a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	4b7c      	ldr	r3, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_OscConfig+0x328>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e23f      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	4973      	ldr	r1, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	e040      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004612:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6e      	ldr	r2, [pc, #440]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fd fc3b 	bl	8001e98 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fd fc37 	bl	8001e98 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e21d      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	495f      	ldr	r1, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd fc17 	bl	8001e98 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd fc13 	bl	8001e98 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1f9      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d03c      	beq.n	8004712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fd fbf2 	bl	8001e98 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b8:	f7fd fbee 	bl	8001e98 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1d4      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCC_OscConfig+0x3ec>
 80046d8:	e01b      	b.n	8004712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e0:	4a3b      	ldr	r2, [pc, #236]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd fbd5 	bl	8001e98 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fd fbd1 	bl	8001e98 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1b7      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80a6 	beq.w	800486c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004724:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
 800473c:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474c:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d118      	bne.n	800478a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004764:	f7fd fb98 	bl	8001e98 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fd fb94 	bl	8001e98 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e17a      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4d8>
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a2:	e029      	b.n	80047f8 <HAL_RCC_OscConfig+0x52c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d115      	bne.n	80047d8 <HAL_RCC_OscConfig+0x50c>
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	4a03      	ldr	r2, [pc, #12]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047cc:	e014      	b.n	80047f8 <HAL_RCC_OscConfig+0x52c>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	4b9c      	ldr	r3, [pc, #624]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a9b      	ldr	r2, [pc, #620]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e8:	4b98      	ldr	r3, [pc, #608]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	4a97      	ldr	r2, [pc, #604]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d016      	beq.n	800482e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd fb4a 	bl	8001e98 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd fb46 	bl	8001e98 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e12a      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	4b8b      	ldr	r3, [pc, #556]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ed      	beq.n	8004808 <HAL_RCC_OscConfig+0x53c>
 800482c:	e015      	b.n	800485a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fd fb33 	bl	8001e98 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fd fb2f 	bl	8001e98 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e113      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800484c:	4b7f      	ldr	r3, [pc, #508]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ed      	bne.n	8004836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b7a      	ldr	r3, [pc, #488]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4a79      	ldr	r2, [pc, #484]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80fe 	beq.w	8004a72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	2b02      	cmp	r3, #2
 800487c:	f040 80d0 	bne.w	8004a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004880:	4b72      	ldr	r3, [pc, #456]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d130      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	3b01      	subs	r3, #1
 80048a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d127      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11f      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048c0:	2a07      	cmp	r2, #7
 80048c2:	bf14      	ite	ne
 80048c4:	2201      	movne	r2, #1
 80048c6:	2200      	moveq	r2, #0
 80048c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d113      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	3b01      	subs	r3, #1
 80048dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d06e      	beq.n	80049d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	d069      	beq.n	80049d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004908:	4b50      	ldr	r3, [pc, #320]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0ad      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004918:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a4b      	ldr	r2, [pc, #300]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800491e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004924:	f7fd fab8 	bl	8001e98 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd fab4 	bl	8001e98 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e09a      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <HAL_RCC_OscConfig+0x784>)
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800495a:	3a01      	subs	r2, #1
 800495c:	0112      	lsls	r2, r2, #4
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004964:	0212      	lsls	r2, r2, #8
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0552      	lsls	r2, r2, #21
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0652      	lsls	r2, r2, #25
 800497e:	4311      	orrs	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004984:	0912      	lsrs	r2, r2, #4
 8004986:	0452      	lsls	r2, r2, #17
 8004988:	430a      	orrs	r2, r1
 800498a:	4930      	ldr	r1, [pc, #192]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800498c:	4313      	orrs	r3, r2
 800498e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004990:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800499c:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049a8:	f7fd fa76 	bl	8001e98 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fd fa72 	bl	8001e98 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e058      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ce:	e050      	b.n	8004a72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04f      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d4:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d148      	bne.n	8004a72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ec:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a16      	ldr	r2, [pc, #88]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 80049f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049f8:	f7fd fa4e 	bl	8001e98 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd fa4a 	bl	8001e98 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e030      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x734>
 8004a1e:	e028      	b.n	8004a72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d023      	beq.n	8004a6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <HAL_RCC_OscConfig+0x780>)
 8004a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd fa31 	bl	8001e98 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a38:	e00c      	b.n	8004a54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fd fa2d 	bl	8001e98 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d905      	bls.n	8004a54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e013      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_OscConfig+0x7b0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ec      	bne.n	8004a3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_OscConfig+0x7b0>)
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	4905      	ldr	r1, [pc, #20]	; (8004a7c <HAL_RCC_OscConfig+0x7b0>)
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCC_OscConfig+0x7b4>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60cb      	str	r3, [r1, #12]
 8004a6c:	e001      	b.n	8004a72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	feeefffc 	.word	0xfeeefffc

08004a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0e7      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a98:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d910      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b72      	ldr	r3, [pc, #456]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0207 	bic.w	r2, r3, #7
 8004aae:	4970      	ldr	r1, [pc, #448]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b6e      	ldr	r3, [pc, #440]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0cf      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	4b66      	ldr	r3, [pc, #408]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d908      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae4:	4b63      	ldr	r3, [pc, #396]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4960      	ldr	r1, [pc, #384]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04c      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0a:	4b5a      	ldr	r3, [pc, #360]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d121      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0a6      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d107      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d115      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e09a      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b3a:	4b4e      	ldr	r3, [pc, #312]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e08e      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e086      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b5a:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4943      	ldr	r1, [pc, #268]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fd f994 	bl	8001e98 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b74:	f7fd f990 	bl	8001e98 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e06e      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 020c 	and.w	r2, r3, #12
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1eb      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d208      	bcs.n	8004bca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb8:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	492b      	ldr	r1, [pc, #172]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bca:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d210      	bcs.n	8004bfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 0207 	bic.w	r2, r3, #7
 8004be0:	4923      	ldr	r1, [pc, #140]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be8:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <HAL_RCC_ClockConfig+0x1ec>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d001      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e036      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	4918      	ldr	r1, [pc, #96]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4910      	ldr	r1, [pc, #64]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c38:	f000 f824 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	490b      	ldr	r1, [pc, #44]	; (8004c78 <HAL_RCC_ClockConfig+0x1f4>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1f8>)
 8004c56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x1fc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fd f8cb 	bl	8001df8 <HAL_InitTick>
 8004c62:	4603      	mov	r3, r0
 8004c64:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c66:	7afb      	ldrb	r3, [r7, #11]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40022000 	.word	0x40022000
 8004c74:	40021000 	.word	0x40021000
 8004c78:	080080a0 	.word	0x080080a0
 8004c7c:	20000014 	.word	0x20000014
 8004c80:	20000018 	.word	0x20000018

08004c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c92:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c9c:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d121      	bne.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d11e      	bne.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cb8:	4b34      	ldr	r3, [pc, #208]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cc4:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ce0:	4a2b      	ldr	r2, [pc, #172]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10d      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d102      	bne.n	8004d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e004      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d08:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d134      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d003      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d003      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0xac>
 8004d28:	e005      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d2a:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d2c:	617b      	str	r3, [r7, #20]
      break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d32:	617b      	str	r3, [r7, #20]
      break;
 8004d34:	e002      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	617b      	str	r3, [r7, #20]
      break;
 8004d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	3301      	adds	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	fb03 f202 	mul.w	r2, r3, r2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	0e5b      	lsrs	r3, r3, #25
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3724      	adds	r7, #36	; 0x24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	080080b8 	.word	0x080080b8
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	007a1200 	.word	0x007a1200

08004d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000014 	.word	0x20000014

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4904      	ldr	r1, [pc, #16]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	080080b0 	.word	0x080080b0

08004de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004de4:	f7ff ffda 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0adb      	lsrs	r3, r3, #11
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4904      	ldr	r1, [pc, #16]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	080080b0 	.word	0x080080b0

08004e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e18:	4b2a      	ldr	r3, [pc, #168]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e24:	f7ff f9ee 	bl	8004204 <HAL_PWREx_GetVoltageRange>
 8004e28:	6178      	str	r0, [r7, #20]
 8004e2a:	e014      	b.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6593      	str	r3, [r2, #88]	; 0x58
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e44:	f7ff f9de 	bl	8004204 <HAL_PWREx_GetVoltageRange>
 8004e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5c:	d10b      	bne.n	8004e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	d919      	bls.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2ba0      	cmp	r3, #160	; 0xa0
 8004e68:	d902      	bls.n	8004e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	e013      	b.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e70:	2301      	movs	r3, #1
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	e010      	b.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d902      	bls.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	e00a      	b.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d102      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e88:	2302      	movs	r3, #2
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e004      	b.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b70      	cmp	r3, #112	; 0x70
 8004e92:	d101      	bne.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e94:	2301      	movs	r3, #1
 8004e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 0207 	bic.w	r2, r3, #7
 8004ea0:	4909      	ldr	r1, [pc, #36]	; (8004ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d001      	beq.n	8004eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40022000 	.word	0x40022000

08004ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ed8:	2300      	movs	r3, #0
 8004eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d041      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ef0:	d02a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ef6:	d824      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004efc:	d008      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f02:	d81e      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f0e:	e018      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f10:	4b86      	ldr	r3, [pc, #536]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a85      	ldr	r2, [pc, #532]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f1c:	e015      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fabb 	bl	80054a0 <RCCEx_PLLSAI1_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f2e:	e00c      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3320      	adds	r3, #32
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fba6 	bl	8005688 <RCCEx_PLLSAI2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	74fb      	strb	r3, [r7, #19]
      break;
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f50:	4b76      	ldr	r3, [pc, #472]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5e:	4973      	ldr	r1, [pc, #460]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f66:	e001      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d041      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f80:	d02a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f86:	d824      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f8c:	d008      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f92:	d81e      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f9e:	e018      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fa0:	4b62      	ldr	r3, [pc, #392]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a61      	ldr	r2, [pc, #388]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fac:	e015      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fa73 	bl	80054a0 <RCCEx_PLLSAI1_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fbe:	e00c      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3320      	adds	r3, #32
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fb5e 	bl	8005688 <RCCEx_PLLSAI2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fd0:	e003      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fe0:	4b52      	ldr	r3, [pc, #328]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fee:	494f      	ldr	r1, [pc, #316]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ff6:	e001      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a0 	beq.w	800514a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800500a:	2300      	movs	r3, #0
 800500c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800500e:	4b47      	ldr	r3, [pc, #284]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005024:	4b41      	ldr	r3, [pc, #260]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	4a40      	ldr	r2, [pc, #256]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502e:	6593      	str	r3, [r2, #88]	; 0x58
 8005030:	4b3e      	ldr	r3, [pc, #248]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503c:	2301      	movs	r3, #1
 800503e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005040:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3a      	ldr	r2, [pc, #232]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800504c:	f7fc ff24 	bl	8001e98 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005052:	e009      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005054:	f7fc ff20 	bl	8001e98 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d902      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	74fb      	strb	r3, [r7, #19]
        break;
 8005066:	e005      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ef      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d15c      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800507a:	4b2c      	ldr	r3, [pc, #176]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01f      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	429a      	cmp	r2, r3
 8005096:	d019      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	4a20      	ldr	r2, [pc, #128]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fc fedf 	bl	8001e98 <HAL_GetTick>
 80050da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050dc:	e00b      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fc fedb 	bl	8001e98 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d902      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	74fb      	strb	r3, [r7, #19]
            break;
 80050f4:	e006      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0ec      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511a:	4904      	ldr	r1, [pc, #16]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005122:	e009      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	74bb      	strb	r3, [r7, #18]
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005138:	7c7b      	ldrb	r3, [r7, #17]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d105      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513e:	4b9e      	ldr	r3, [pc, #632]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	4a9d      	ldr	r2, [pc, #628]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005156:	4b98      	ldr	r3, [pc, #608]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f023 0203 	bic.w	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	4994      	ldr	r1, [pc, #592]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005178:	4b8f      	ldr	r3, [pc, #572]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f023 020c 	bic.w	r2, r3, #12
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	498c      	ldr	r1, [pc, #560]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800519a:	4b87      	ldr	r3, [pc, #540]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	4983      	ldr	r1, [pc, #524]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051bc:	4b7e      	ldr	r3, [pc, #504]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ca:	497b      	ldr	r1, [pc, #492]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051de:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ec:	4972      	ldr	r1, [pc, #456]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005200:	4b6d      	ldr	r3, [pc, #436]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520e:	496a      	ldr	r1, [pc, #424]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	4961      	ldr	r1, [pc, #388]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005244:	4b5c      	ldr	r3, [pc, #368]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005252:	4959      	ldr	r1, [pc, #356]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005266:	4b54      	ldr	r3, [pc, #336]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	4950      	ldr	r1, [pc, #320]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005288:	4b4b      	ldr	r3, [pc, #300]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005296:	4948      	ldr	r1, [pc, #288]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052aa:	4b43      	ldr	r3, [pc, #268]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	493f      	ldr	r1, [pc, #252]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d028      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052cc:	4b3a      	ldr	r3, [pc, #232]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052da:	4937      	ldr	r1, [pc, #220]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ea:	d106      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a31      	ldr	r2, [pc, #196]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f6:	60d3      	str	r3, [r2, #12]
 80052f8:	e011      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005302:	d10c      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f8c8 	bl	80054a0 <RCCEx_PLLSAI1_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d028      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800532a:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	491f      	ldr	r1, [pc, #124]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005348:	d106      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534a:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005354:	60d3      	str	r3, [r2, #12]
 8005356:	e011      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005360:	d10c      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f899 	bl	80054a0 <RCCEx_PLLSAI1_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02b      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005396:	4908      	ldr	r1, [pc, #32]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a6:	d109      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4a02      	ldr	r2, [pc, #8]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b2:	60d3      	str	r3, [r2, #12]
 80053b4:	e014      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2101      	movs	r1, #1
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f867 	bl	80054a0 <RCCEx_PLLSAI1_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d6:	7cfb      	ldrb	r3, [r7, #19]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d02f      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fa:	4928      	ldr	r1, [pc, #160]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800540a:	d10d      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	2102      	movs	r1, #2
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f844 	bl	80054a0 <RCCEx_PLLSAI1_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d014      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	74bb      	strb	r3, [r7, #18]
 8005426:	e011      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005430:	d10c      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3320      	adds	r3, #32
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f925 	bl	8005688 <RCCEx_PLLSAI2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005466:	490d      	ldr	r1, [pc, #52]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800547a:	4b08      	ldr	r3, [pc, #32]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548a:	4904      	ldr	r1, [pc, #16]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005492:	7cbb      	ldrb	r3, [r7, #18]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000

080054a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ae:	4b75      	ldr	r3, [pc, #468]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d018      	beq.n	80054ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054ba:	4b72      	ldr	r3, [pc, #456]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0203 	and.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d10d      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
       ||
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054d2:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
       ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d047      	beq.n	8005576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
 80054ea:	e044      	b.n	8005576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d018      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0x86>
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d825      	bhi.n	8005544 <RCCEx_PLLSAI1_Config+0xa4>
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d002      	beq.n	8005502 <RCCEx_PLLSAI1_Config+0x62>
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d009      	beq.n	8005514 <RCCEx_PLLSAI1_Config+0x74>
 8005500:	e020      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005502:	4b60      	ldr	r3, [pc, #384]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11d      	bne.n	800554a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005512:	e01a      	b.n	800554a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005514:	4b5b      	ldr	r3, [pc, #364]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551c:	2b00      	cmp	r3, #0
 800551e:	d116      	bne.n	800554e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005524:	e013      	b.n	800554e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005526:	4b57      	ldr	r3, [pc, #348]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005532:	4b54      	ldr	r3, [pc, #336]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005542:	e006      	b.n	8005552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e004      	b.n	8005554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005552:	bf00      	nop
    }

    if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	3b01      	subs	r3, #1
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	430b      	orrs	r3, r1
 8005570:	4944      	ldr	r1, [pc, #272]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d17d      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800557c:	4b41      	ldr	r3, [pc, #260]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a40      	ldr	r2, [pc, #256]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fc fc86 	bl	8001e98 <HAL_GetTick>
 800558c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800558e:	e009      	b.n	80055a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005590:	f7fc fc82 	bl	8001e98 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d902      	bls.n	80055a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	73fb      	strb	r3, [r7, #15]
        break;
 80055a2:	e005      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a4:	4b37      	ldr	r3, [pc, #220]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ef      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d160      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d111      	bne.n	80055e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055bc:	4b31      	ldr	r3, [pc, #196]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68d2      	ldr	r2, [r2, #12]
 80055d2:	0912      	lsrs	r2, r2, #4
 80055d4:	0452      	lsls	r2, r2, #17
 80055d6:	430a      	orrs	r2, r1
 80055d8:	492a      	ldr	r1, [pc, #168]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	610b      	str	r3, [r1, #16]
 80055de:	e027      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d112      	bne.n	800560c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e6:	4b27      	ldr	r3, [pc, #156]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6892      	ldr	r2, [r2, #8]
 80055f6:	0211      	lsls	r1, r2, #8
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6912      	ldr	r2, [r2, #16]
 80055fc:	0852      	lsrs	r2, r2, #1
 80055fe:	3a01      	subs	r2, #1
 8005600:	0552      	lsls	r2, r2, #21
 8005602:	430a      	orrs	r2, r1
 8005604:	491f      	ldr	r1, [pc, #124]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]
 800560a:	e011      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6892      	ldr	r2, [r2, #8]
 800561c:	0211      	lsls	r1, r2, #8
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6952      	ldr	r2, [r2, #20]
 8005622:	0852      	lsrs	r2, r2, #1
 8005624:	3a01      	subs	r2, #1
 8005626:	0652      	lsls	r2, r2, #25
 8005628:	430a      	orrs	r2, r1
 800562a:	4916      	ldr	r1, [pc, #88]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005630:	4b14      	ldr	r3, [pc, #80]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a13      	ldr	r2, [pc, #76]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800563a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fc fc2c 	bl	8001e98 <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005642:	e009      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005644:	f7fc fc28 	bl	8001e98 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d902      	bls.n	8005658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	73fb      	strb	r3, [r7, #15]
          break;
 8005656:	e005      	b.n	8005664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ef      	beq.n	8005644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	4904      	ldr	r1, [pc, #16]	; (8005684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000

08005688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005696:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d018      	beq.n	80056d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056a2:	4b67      	ldr	r3, [pc, #412]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0203 	and.w	r2, r3, #3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d10d      	bne.n	80056ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
       ||
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056ba:	4b61      	ldr	r3, [pc, #388]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
       ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d047      	beq.n	800575e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
 80056d2:	e044      	b.n	800575e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d018      	beq.n	800570e <RCCEx_PLLSAI2_Config+0x86>
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d825      	bhi.n	800572c <RCCEx_PLLSAI2_Config+0xa4>
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d002      	beq.n	80056ea <RCCEx_PLLSAI2_Config+0x62>
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d009      	beq.n	80056fc <RCCEx_PLLSAI2_Config+0x74>
 80056e8:	e020      	b.n	800572c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ea:	4b55      	ldr	r3, [pc, #340]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11d      	bne.n	8005732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fa:	e01a      	b.n	8005732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056fc:	4b50      	ldr	r3, [pc, #320]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d116      	bne.n	8005736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570c:	e013      	b.n	8005736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800570e:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10f      	bne.n	800573a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800571a:	4b49      	ldr	r3, [pc, #292]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800572a:	e006      	b.n	800573a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	e004      	b.n	800573c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005732:	bf00      	nop
 8005734:	e002      	b.n	800573c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800573a:	bf00      	nop
    }

    if(status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10d      	bne.n	800575e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005742:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	3b01      	subs	r3, #1
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	430b      	orrs	r3, r1
 8005758:	4939      	ldr	r1, [pc, #228]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	4313      	orrs	r3, r2
 800575c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d167      	bne.n	8005834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005764:	4b36      	ldr	r3, [pc, #216]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a35      	ldr	r2, [pc, #212]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005770:	f7fc fb92 	bl	8001e98 <HAL_GetTick>
 8005774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005776:	e009      	b.n	800578c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005778:	f7fc fb8e 	bl	8001e98 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d902      	bls.n	800578c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	73fb      	strb	r3, [r7, #15]
        break;
 800578a:	e005      	b.n	8005798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800578c:	4b2c      	ldr	r3, [pc, #176]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ef      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d14a      	bne.n	8005834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d111      	bne.n	80057c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a4:	4b26      	ldr	r3, [pc, #152]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6892      	ldr	r2, [r2, #8]
 80057b4:	0211      	lsls	r1, r2, #8
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	0912      	lsrs	r2, r2, #4
 80057bc:	0452      	lsls	r2, r2, #17
 80057be:	430a      	orrs	r2, r1
 80057c0:	491f      	ldr	r1, [pc, #124]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	614b      	str	r3, [r1, #20]
 80057c6:	e011      	b.n	80057ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6892      	ldr	r2, [r2, #8]
 80057d8:	0211      	lsls	r1, r2, #8
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6912      	ldr	r2, [r2, #16]
 80057de:	0852      	lsrs	r2, r2, #1
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0652      	lsls	r2, r2, #25
 80057e4:	430a      	orrs	r2, r1
 80057e6:	4916      	ldr	r1, [pc, #88]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057ec:	4b14      	ldr	r3, [pc, #80]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7fc fb4e 	bl	8001e98 <HAL_GetTick>
 80057fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057fe:	e009      	b.n	8005814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005800:	f7fc fb4a 	bl	8001e98 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d902      	bls.n	8005814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	73fb      	strb	r3, [r7, #15]
          break;
 8005812:	e005      	b.n	8005820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005814:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ef      	beq.n	8005800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4904      	ldr	r1, [pc, #16]	; (8005840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e049      	b.n	80058ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fc f968 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fd34 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e04f      	b.n	80059ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d01d      	beq.n	800596a <HAL_TIM_Base_Start_IT+0x76>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d018      	beq.n	800596a <HAL_TIM_Base_Start_IT+0x76>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <HAL_TIM_Base_Start_IT+0xc8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_TIM_Base_Start_IT+0x76>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIM_Base_Start_IT+0x76>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIM_Base_Start_IT+0x76>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIM_Base_Start_IT+0x76>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d115      	bne.n	8005996 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005972:	4013      	ands	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b06      	cmp	r3, #6
 800597a:	d015      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0xb4>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005982:	d011      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	e008      	b.n	80059a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e000      	b.n	80059aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	00010007 	.word	0x00010007

080059d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e049      	b.n	8005a7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f841 	bl	8005a82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 fc6c 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
	...

08005a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <HAL_TIM_PWM_Start+0x24>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e03c      	b.n	8005b36 <HAL_TIM_PWM_Start+0x9e>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d109      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x3e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	e02f      	b.n	8005b36 <HAL_TIM_PWM_Start+0x9e>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d109      	bne.n	8005af0 <HAL_TIM_PWM_Start+0x58>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e022      	b.n	8005b36 <HAL_TIM_PWM_Start+0x9e>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d109      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x72>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e015      	b.n	8005b36 <HAL_TIM_PWM_Start+0x9e>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	d109      	bne.n	8005b24 <HAL_TIM_PWM_Start+0x8c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e008      	b.n	8005b36 <HAL_TIM_PWM_Start+0x9e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e09c      	b.n	8005c78 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0xb6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4c:	e023      	b.n	8005b96 <HAL_TIM_PWM_Start+0xfe>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start+0xc6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b5c:	e01b      	b.n	8005b96 <HAL_TIM_PWM_Start+0xfe>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_PWM_Start+0xd6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6c:	e013      	b.n	8005b96 <HAL_TIM_PWM_Start+0xfe>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_PWM_Start+0xe6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b7c:	e00b      	b.n	8005b96 <HAL_TIM_PWM_Start+0xfe>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_PWM_Start+0xf6>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b8c:	e003      	b.n	8005b96 <HAL_TIM_PWM_Start+0xfe>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ffb0 	bl	8006b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a35      	ldr	r2, [pc, #212]	; (8005c80 <HAL_TIM_PWM_Start+0x1e8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0x13e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a34      	ldr	r2, [pc, #208]	; (8005c84 <HAL_TIM_PWM_Start+0x1ec>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0x13e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a32      	ldr	r2, [pc, #200]	; (8005c88 <HAL_TIM_PWM_Start+0x1f0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0x13e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a31      	ldr	r2, [pc, #196]	; (8005c8c <HAL_TIM_PWM_Start+0x1f4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0x13e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a2f      	ldr	r2, [pc, #188]	; (8005c90 <HAL_TIM_PWM_Start+0x1f8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_Start+0x142>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_TIM_PWM_Start+0x144>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <HAL_TIM_PWM_Start+0x1e8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x19e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d018      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x19e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <HAL_TIM_PWM_Start+0x1fc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x19e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a21      	ldr	r2, [pc, #132]	; (8005c98 <HAL_TIM_PWM_Start+0x200>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x19e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	; (8005c9c <HAL_TIM_PWM_Start+0x204>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x19e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <HAL_TIM_PWM_Start+0x1ec>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x19e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <HAL_TIM_PWM_Start+0x1f0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d115      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	4b18      	ldr	r3, [pc, #96]	; (8005ca0 <HAL_TIM_PWM_Start+0x208>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b06      	cmp	r3, #6
 8005c46:	d015      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x1dc>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d011      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	e008      	b.n	8005c74 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e000      	b.n	8005c76 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	00010007 	.word	0x00010007

08005ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d122      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d11b      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0202 	mvn.w	r2, #2
 8005cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fae3 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fad5 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fae6 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0204 	mvn.w	r2, #4
 8005d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fab9 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 faab 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fabc 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0208 	mvn.w	r2, #8
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa8f 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa81 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa92 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0210 	mvn.w	r2, #16
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa65 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa57 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa68 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0201 	mvn.w	r2, #1
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fa ff70 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d10e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 ff10 	bl	8006c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e62:	d10e      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d107      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ff03 	bl	8006c88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d10e      	bne.n	8005eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d107      	bne.n	8005eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fa16 	bl	80062da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d10e      	bne.n	8005eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d107      	bne.n	8005eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f06f 0220 	mvn.w	r2, #32
 8005ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fec3 	bl	8006c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e0ff      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b14      	cmp	r3, #20
 8005f0e:	f200 80f0 	bhi.w	80060f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f12:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	080060f3 	.word	0x080060f3
 8005f20:	080060f3 	.word	0x080060f3
 8005f24:	080060f3 	.word	0x080060f3
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	080060f3 	.word	0x080060f3
 8005f30:	080060f3 	.word	0x080060f3
 8005f34:	080060f3 	.word	0x080060f3
 8005f38:	08005fef 	.word	0x08005fef
 8005f3c:	080060f3 	.word	0x080060f3
 8005f40:	080060f3 	.word	0x080060f3
 8005f44:	080060f3 	.word	0x080060f3
 8005f48:	0800602f 	.word	0x0800602f
 8005f4c:	080060f3 	.word	0x080060f3
 8005f50:	080060f3 	.word	0x080060f3
 8005f54:	080060f3 	.word	0x080060f3
 8005f58:	08006071 	.word	0x08006071
 8005f5c:	080060f3 	.word	0x080060f3
 8005f60:	080060f3 	.word	0x080060f3
 8005f64:	080060f3 	.word	0x080060f3
 8005f68:	080060b1 	.word	0x080060b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fa56 	bl	8006424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0208 	orr.w	r2, r2, #8
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
      break;
 8005faa:	e0a5      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fac6 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6999      	ldr	r1, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	619a      	str	r2, [r3, #24]
      break;
 8005fec:	e084      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fb2f 	bl	8006658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0204 	bic.w	r2, r2, #4
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
      break;
 800602c:	e064      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fb97 	bl	8006768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	021a      	lsls	r2, r3, #8
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	61da      	str	r2, [r3, #28]
      break;
 800606e:	e043      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fbe0 	bl	800683c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0208 	orr.w	r2, r2, #8
 800608a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060ae:	e023      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fc24 	bl	8006904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060f0:	e002      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
      break;
 80060f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop

0800610c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIM_ConfigClockSource+0x1c>
 8006124:	2302      	movs	r3, #2
 8006126:	e0b6      	b.n	8006296 <HAL_TIM_ConfigClockSource+0x18a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800614a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006164:	d03e      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0xd8>
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616a:	f200 8087 	bhi.w	800627c <HAL_TIM_ConfigClockSource+0x170>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	f000 8086 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x176>
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617a:	d87f      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 800617c:	2b70      	cmp	r3, #112	; 0x70
 800617e:	d01a      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0xaa>
 8006180:	2b70      	cmp	r3, #112	; 0x70
 8006182:	d87b      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 8006184:	2b60      	cmp	r3, #96	; 0x60
 8006186:	d050      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x11e>
 8006188:	2b60      	cmp	r3, #96	; 0x60
 800618a:	d877      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 800618c:	2b50      	cmp	r3, #80	; 0x50
 800618e:	d03c      	beq.n	800620a <HAL_TIM_ConfigClockSource+0xfe>
 8006190:	2b50      	cmp	r3, #80	; 0x50
 8006192:	d873      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	d058      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x13e>
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d86f      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 800619c:	2b30      	cmp	r3, #48	; 0x30
 800619e:	d064      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061a0:	2b30      	cmp	r3, #48	; 0x30
 80061a2:	d86b      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d060      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d867      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d05c      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d05a      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061b4:	e062      	b.n	800627c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6899      	ldr	r1, [r3, #8]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f000 fc7d 	bl	8006ac4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	609a      	str	r2, [r3, #8]
      break;
 80061e2:	e04f      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6899      	ldr	r1, [r3, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f000 fc66 	bl	8006ac4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006206:	609a      	str	r2, [r3, #8]
      break;
 8006208:	e03c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6859      	ldr	r1, [r3, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	461a      	mov	r2, r3
 8006218:	f000 fbda 	bl	80069d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2150      	movs	r1, #80	; 0x50
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fc33 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006228:	e02c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	461a      	mov	r2, r3
 8006238:	f000 fbf9 	bl	8006a2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2160      	movs	r1, #96	; 0x60
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fc23 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006248:	e01c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 fbba 	bl	80069d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2140      	movs	r1, #64	; 0x40
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fc13 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006268:	e00c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f000 fc0a 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 800627a:	e003      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      break;
 8006280:	e000      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a40      	ldr	r2, [pc, #256]	; (8006404 <TIM_Base_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d00f      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3d      	ldr	r2, [pc, #244]	; (8006408 <TIM_Base_SetConfig+0x118>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00b      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a3c      	ldr	r2, [pc, #240]	; (800640c <TIM_Base_SetConfig+0x11c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3b      	ldr	r2, [pc, #236]	; (8006410 <TIM_Base_SetConfig+0x120>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <TIM_Base_SetConfig+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d108      	bne.n	8006342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2f      	ldr	r2, [pc, #188]	; (8006404 <TIM_Base_SetConfig+0x114>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01f      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006350:	d01b      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <TIM_Base_SetConfig+0x118>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d017      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2b      	ldr	r2, [pc, #172]	; (800640c <TIM_Base_SetConfig+0x11c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <TIM_Base_SetConfig+0x120>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00f      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a29      	ldr	r2, [pc, #164]	; (8006414 <TIM_Base_SetConfig+0x124>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a28      	ldr	r2, [pc, #160]	; (8006418 <TIM_Base_SetConfig+0x128>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a27      	ldr	r2, [pc, #156]	; (800641c <TIM_Base_SetConfig+0x12c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a26      	ldr	r2, [pc, #152]	; (8006420 <TIM_Base_SetConfig+0x130>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d108      	bne.n	800639c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <TIM_Base_SetConfig+0x114>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00f      	beq.n	80063e8 <TIM_Base_SetConfig+0xf8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a12      	ldr	r2, [pc, #72]	; (8006414 <TIM_Base_SetConfig+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <TIM_Base_SetConfig+0xf8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <TIM_Base_SetConfig+0x128>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_Base_SetConfig+0xf8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <TIM_Base_SetConfig+0x12c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_Base_SetConfig+0xf8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a0f      	ldr	r2, [pc, #60]	; (8006420 <TIM_Base_SetConfig+0x130>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d103      	bne.n	80063f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	615a      	str	r2, [r3, #20]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40012c00 	.word	0x40012c00
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40000c00 	.word	0x40000c00
 8006414:	40013400 	.word	0x40013400
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800

08006424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0302 	bic.w	r3, r3, #2
 8006470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a2c      	ldr	r2, [pc, #176]	; (8006530 <TIM_OC1_SetConfig+0x10c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00f      	beq.n	80064a4 <TIM_OC1_SetConfig+0x80>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a2b      	ldr	r2, [pc, #172]	; (8006534 <TIM_OC1_SetConfig+0x110>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_OC1_SetConfig+0x80>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a2a      	ldr	r2, [pc, #168]	; (8006538 <TIM_OC1_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_OC1_SetConfig+0x80>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a29      	ldr	r2, [pc, #164]	; (800653c <TIM_OC1_SetConfig+0x118>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC1_SetConfig+0x80>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a28      	ldr	r2, [pc, #160]	; (8006540 <TIM_OC1_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d10c      	bne.n	80064be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 0308 	bic.w	r3, r3, #8
 80064aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <TIM_OC1_SetConfig+0x10c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00f      	beq.n	80064e6 <TIM_OC1_SetConfig+0xc2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <TIM_OC1_SetConfig+0x110>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00b      	beq.n	80064e6 <TIM_OC1_SetConfig+0xc2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <TIM_OC1_SetConfig+0x114>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <TIM_OC1_SetConfig+0xc2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a18      	ldr	r2, [pc, #96]	; (800653c <TIM_OC1_SetConfig+0x118>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_OC1_SetConfig+0xc2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a17      	ldr	r2, [pc, #92]	; (8006540 <TIM_OC1_SetConfig+0x11c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d111      	bne.n	800650a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	621a      	str	r2, [r3, #32]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40013400 	.word	0x40013400
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0210 	bic.w	r2, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0320 	bic.w	r3, r3, #32
 8006592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a28      	ldr	r2, [pc, #160]	; (8006644 <TIM_OC2_SetConfig+0x100>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_OC2_SetConfig+0x6c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a27      	ldr	r2, [pc, #156]	; (8006648 <TIM_OC2_SetConfig+0x104>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10d      	bne.n	80065cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <TIM_OC2_SetConfig+0x100>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00f      	beq.n	80065f4 <TIM_OC2_SetConfig+0xb0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1c      	ldr	r2, [pc, #112]	; (8006648 <TIM_OC2_SetConfig+0x104>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_OC2_SetConfig+0xb0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a1b      	ldr	r2, [pc, #108]	; (800664c <TIM_OC2_SetConfig+0x108>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_OC2_SetConfig+0xb0>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1a      	ldr	r2, [pc, #104]	; (8006650 <TIM_OC2_SetConfig+0x10c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_OC2_SetConfig+0xb0>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a19      	ldr	r2, [pc, #100]	; (8006654 <TIM_OC2_SetConfig+0x110>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d113      	bne.n	800661c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40013400 	.word	0x40013400
 800664c:	40014000 	.word	0x40014000
 8006650:	40014400 	.word	0x40014400
 8006654:	40014800 	.word	0x40014800

08006658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a27      	ldr	r2, [pc, #156]	; (8006754 <TIM_OC3_SetConfig+0xfc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC3_SetConfig+0x6a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a26      	ldr	r2, [pc, #152]	; (8006758 <TIM_OC3_SetConfig+0x100>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d10d      	bne.n	80066de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <TIM_OC3_SetConfig+0xfc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00f      	beq.n	8006706 <TIM_OC3_SetConfig+0xae>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1b      	ldr	r2, [pc, #108]	; (8006758 <TIM_OC3_SetConfig+0x100>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00b      	beq.n	8006706 <TIM_OC3_SetConfig+0xae>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	; (800675c <TIM_OC3_SetConfig+0x104>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d007      	beq.n	8006706 <TIM_OC3_SetConfig+0xae>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a19      	ldr	r2, [pc, #100]	; (8006760 <TIM_OC3_SetConfig+0x108>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d003      	beq.n	8006706 <TIM_OC3_SetConfig+0xae>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a18      	ldr	r2, [pc, #96]	; (8006764 <TIM_OC3_SetConfig+0x10c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d113      	bne.n	800672e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800670c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	621a      	str	r2, [r3, #32]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40013400 	.word	0x40013400
 800675c:	40014000 	.word	0x40014000
 8006760:	40014400 	.word	0x40014400
 8006764:	40014800 	.word	0x40014800

08006768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_OC4_SetConfig+0xc0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00f      	beq.n	80067ec <TIM_OC4_SetConfig+0x84>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <TIM_OC4_SetConfig+0xc4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_OC4_SetConfig+0x84>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a16      	ldr	r2, [pc, #88]	; (8006830 <TIM_OC4_SetConfig+0xc8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_OC4_SetConfig+0x84>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a15      	ldr	r2, [pc, #84]	; (8006834 <TIM_OC4_SetConfig+0xcc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC4_SetConfig+0x84>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a14      	ldr	r2, [pc, #80]	; (8006838 <TIM_OC4_SetConfig+0xd0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d109      	bne.n	8006800 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	019b      	lsls	r3, r3, #6
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <TIM_OC5_SetConfig+0xb4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00f      	beq.n	80068b6 <TIM_OC5_SetConfig+0x7a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <TIM_OC5_SetConfig+0xb8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00b      	beq.n	80068b6 <TIM_OC5_SetConfig+0x7a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <TIM_OC5_SetConfig+0xbc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <TIM_OC5_SetConfig+0x7a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <TIM_OC5_SetConfig+0xc0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC5_SetConfig+0x7a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <TIM_OC5_SetConfig+0xc4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d109      	bne.n	80068ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800694a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	051b      	lsls	r3, r3, #20
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a18      	ldr	r2, [pc, #96]	; (80069bc <TIM_OC6_SetConfig+0xb8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00f      	beq.n	8006980 <TIM_OC6_SetConfig+0x7c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <TIM_OC6_SetConfig+0xbc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00b      	beq.n	8006980 <TIM_OC6_SetConfig+0x7c>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <TIM_OC6_SetConfig+0xc0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_OC6_SetConfig+0x7c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <TIM_OC6_SetConfig+0xc4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC6_SetConfig+0x7c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a14      	ldr	r2, [pc, #80]	; (80069cc <TIM_OC6_SetConfig+0xc8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d109      	bne.n	8006994 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006986:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800

080069d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 030a 	bic.w	r3, r3, #10
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f023 0210 	bic.w	r2, r3, #16
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	031b      	lsls	r3, r3, #12
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f043 0307 	orr.w	r3, r3, #7
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	609a      	str	r2, [r3, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	021a      	lsls	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2201      	movs	r2, #1
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1a      	ldr	r2, [r3, #32]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	43db      	mvns	r3, r3
 8006b26:	401a      	ands	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e068      	b.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2e      	ldr	r2, [pc, #184]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2d      	ldr	r2, [pc, #180]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d108      	bne.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ba2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1e      	ldr	r2, [pc, #120]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bda:	d018      	beq.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10c      	bne.n	8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40013400 	.word	0x40013400
 8006c50:	40000400 	.word	0x40000400
 8006c54:	40000800 	.word	0x40000800
 8006c58:	40000c00 	.word	0x40000c00
 8006c5c:	40014000 	.word	0x40014000

08006c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e040      	b.n	8006d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fa ffaa 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2224      	movs	r2, #36	; 0x24
 8006cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fc94 	bl	8007608 <UART_SetConfig>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e022      	b.n	8006d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 ff40 	bl	8007b78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 ffc7 	bl	8007cbc <UART_CheckIdleState>
 8006d2e:	4603      	mov	r3, r0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	f040 8082 	bne.w	8006e56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_UART_Transmit+0x26>
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e07a      	b.n	8006e58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_UART_Transmit+0x38>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e073      	b.n	8006e58 <HAL_UART_Transmit+0x120>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2221      	movs	r2, #33	; 0x21
 8006d84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d86:	f7fb f887 	bl	8001e98 <HAL_GetTick>
 8006d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da4:	d108      	bne.n	8006db8 <HAL_UART_Transmit+0x80>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	e003      	b.n	8006dc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006dc8:	e02d      	b.n	8006e26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 ffba 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e039      	b.n	8006e58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df6:	b292      	uxth	r2, r2
 8006df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e008      	b.n	8006e14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	b292      	uxth	r2, r2
 8006e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	3301      	adds	r3, #1
 8006e12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1cb      	bne.n	8006dca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2140      	movs	r1, #64	; 0x40
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 ff86 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e005      	b.n	8006e58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e56:	2302      	movs	r3, #2
  }
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	f040 80bf 	bne.w	8006ff8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_UART_Receive+0x26>
 8006e80:	88fb      	ldrh	r3, [r7, #6]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e0b7      	b.n	8006ffa <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_UART_Receive+0x38>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e0b0      	b.n	8006ffa <HAL_UART_Receive+0x19a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2222      	movs	r2, #34	; 0x22
 8006eac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb4:	f7fa fff0 	bl	8001e98 <HAL_GetTick>
 8006eb8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	88fa      	ldrh	r2, [r7, #6]
 8006ebe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_UART_Receive+0x92>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d105      	bne.n	8006ee8 <HAL_UART_Receive+0x88>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ee6:	e02d      	b.n	8006f44 <HAL_UART_Receive+0xe4>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	22ff      	movs	r2, #255	; 0xff
 8006eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef0:	e028      	b.n	8006f44 <HAL_UART_Receive+0xe4>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <HAL_UART_Receive+0xb6>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_UART_Receive+0xac>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f0a:	e01b      	b.n	8006f44 <HAL_UART_Receive+0xe4>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	227f      	movs	r2, #127	; 0x7f
 8006f10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f14:	e016      	b.n	8006f44 <HAL_UART_Receive+0xe4>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1e:	d10d      	bne.n	8006f3c <HAL_UART_Receive+0xdc>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_UART_Receive+0xd2>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	227f      	movs	r2, #127	; 0x7f
 8006f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f30:	e008      	b.n	8006f44 <HAL_UART_Receive+0xe4>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	223f      	movs	r2, #63	; 0x3f
 8006f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f3a:	e003      	b.n	8006f44 <HAL_UART_Receive+0xe4>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f4a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f54:	d108      	bne.n	8006f68 <HAL_UART_Receive+0x108>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e003      	b.n	8006f70 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f78:	e033      	b.n	8006fe2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2120      	movs	r1, #32
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fee2 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e032      	b.n	8006ffa <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10c      	bne.n	8006fb4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	8a7b      	ldrh	r3, [r7, #18]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	3302      	adds	r3, #2
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	e00d      	b.n	8006fd0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	8a7b      	ldrh	r3, [r7, #18]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1c5      	bne.n	8006f7a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b0ba      	sub	sp, #232	; 0xe8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800702a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800702e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007032:	4013      	ands	r3, r2
 8007034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d115      	bne.n	800706c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00f      	beq.n	800706c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800704c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 82a6 	beq.w	80075ae <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
      }
      return;
 800706a:	e2a0      	b.n	80075ae <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800706c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8117 	beq.w	80072a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007086:	4b85      	ldr	r3, [pc, #532]	; (800729c <HAL_UART_IRQHandler+0x298>)
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 810a 	beq.w	80072a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d011      	beq.n	80070c0 <HAL_UART_IRQHandler+0xbc>
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b6:	f043 0201 	orr.w	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d011      	beq.n	80070f0 <HAL_UART_IRQHandler+0xec>
 80070cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2202      	movs	r2, #2
 80070de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e6:	f043 0204 	orr.w	r2, r3, #4
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d011      	beq.n	8007120 <HAL_UART_IRQHandler+0x11c>
 80070fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2204      	movs	r2, #4
 800710e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007116:	f043 0202 	orr.w	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d017      	beq.n	800715c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d105      	bne.n	8007144 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2208      	movs	r2, #8
 800714a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007152:	f043 0208 	orr.w	r2, r3, #8
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800715c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007164:	2b00      	cmp	r3, #0
 8007166:	d012      	beq.n	800718e <HAL_UART_IRQHandler+0x18a>
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00c      	beq.n	800718e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800717c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 820c 	beq.w	80075b2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d04f      	beq.n	8007286 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fe75 	bl	8007ed6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d141      	bne.n	800727e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3308      	adds	r3, #8
 8007222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007226:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800722a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800723e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1d9      	bne.n	80071fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	2b00      	cmp	r3, #0
 800724c:	d013      	beq.n	8007276 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <HAL_UART_IRQHandler+0x29c>)
 8007254:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	4618      	mov	r0, r3
 800725c:	f7fc fb3b 	bl	80038d6 <HAL_DMA_Abort_IT>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d017      	beq.n	8007296 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	e00f      	b.n	8007296 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9b0 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00b      	b.n	8007296 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9ac 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e007      	b.n	8007296 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f9a8 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007294:	e18d      	b.n	80075b2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007296:	bf00      	nop
    return;
 8007298:	e18b      	b.n	80075b2 <HAL_UART_IRQHandler+0x5ae>
 800729a:	bf00      	nop
 800729c:	04000120 	.word	0x04000120
 80072a0:	08007f9d 	.word	0x08007f9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	f040 8146 	bne.w	800753a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 813f 	beq.w	800753a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8138 	beq.w	800753a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2210      	movs	r2, #16
 80072d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	f040 80b4 	bne.w	800744a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 815f 	beq.w	80075b6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007302:	429a      	cmp	r2, r3
 8007304:	f080 8157 	bcs.w	80075b6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	f040 8085 	bne.w	800742e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800733c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800734e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007352:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800735a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1da      	bne.n	8007324 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800737e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007392:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007396:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800739a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e1      	bne.n	800736e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e3      	bne.n	80073aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007410:	65bb      	str	r3, [r7, #88]	; 0x58
 8007412:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800741e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e4      	bne.n	80073ee <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4618      	mov	r0, r3
 800742a:	f7fc fa16 	bl	800385a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800743a:	b29b      	uxth	r3, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	b29b      	uxth	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f8d4 	bl	80075f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007448:	e0b5      	b.n	80075b6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007456:	b29b      	uxth	r3, r3
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 80a7 	beq.w	80075ba <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800746c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80a2 	beq.w	80075ba <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800748a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007498:	647b      	str	r3, [r7, #68]	; 0x44
 800749a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800749e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e4      	bne.n	8007476 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3308      	adds	r3, #8
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	623b      	str	r3, [r7, #32]
   return(result);
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3308      	adds	r3, #8
 80074cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074d0:	633a      	str	r2, [r7, #48]	; 0x30
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e3      	bne.n	80074ac <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	60fb      	str	r3, [r7, #12]
   return(result);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0310 	bic.w	r3, r3, #16
 800750a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	69b9      	ldr	r1, [r7, #24]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	617b      	str	r3, [r7, #20]
   return(result);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e4      	bne.n	80074f6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800752c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f85c 	bl	80075f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007538:	e03f      	b.n	80075ba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00e      	beq.n	8007564 <HAL_UART_IRQHandler+0x560>
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800755a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fd5d 	bl	800801c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007562:	e02d      	b.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00e      	beq.n	800758e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01c      	beq.n	80075be <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
    }
    return;
 800758c:	e017      	b.n	80075be <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d012      	beq.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
 800759a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00c      	beq.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fd0e 	bl	8007fc8 <UART_EndTransmit_IT>
    return;
 80075ac:	e008      	b.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075ae:	bf00      	nop
 80075b0:	e006      	b.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80075b2:	bf00      	nop
 80075b4:	e004      	b.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075b6:	bf00      	nop
 80075b8:	e002      	b.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80075be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80075c0:	37e8      	adds	r7, #232	; 0xe8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop

080075c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800760c:	b08a      	sub	sp, #40	; 0x28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	431a      	orrs	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	4313      	orrs	r3, r2
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	4ba4      	ldr	r3, [pc, #656]	; (80078c8 <UART_SetConfig+0x2c0>)
 8007638:	4013      	ands	r3, r2
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007640:	430b      	orrs	r3, r1
 8007642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a99      	ldr	r2, [pc, #612]	; (80078cc <UART_SetConfig+0x2c4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	4313      	orrs	r3, r2
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007684:	430a      	orrs	r2, r1
 8007686:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a90      	ldr	r2, [pc, #576]	; (80078d0 <UART_SetConfig+0x2c8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d126      	bne.n	80076e0 <UART_SetConfig+0xd8>
 8007692:	4b90      	ldr	r3, [pc, #576]	; (80078d4 <UART_SetConfig+0x2cc>)
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	2b03      	cmp	r3, #3
 800769e:	d81b      	bhi.n	80076d8 <UART_SetConfig+0xd0>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0xa0>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076b9 	.word	0x080076b9
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076be:	e116      	b.n	80078ee <UART_SetConfig+0x2e6>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c6:	e112      	b.n	80078ee <UART_SetConfig+0x2e6>
 80076c8:	2304      	movs	r3, #4
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e10e      	b.n	80078ee <UART_SetConfig+0x2e6>
 80076d0:	2308      	movs	r3, #8
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d6:	e10a      	b.n	80078ee <UART_SetConfig+0x2e6>
 80076d8:	2310      	movs	r3, #16
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076de:	e106      	b.n	80078ee <UART_SetConfig+0x2e6>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a7c      	ldr	r2, [pc, #496]	; (80078d8 <UART_SetConfig+0x2d0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d138      	bne.n	800775c <UART_SetConfig+0x154>
 80076ea:	4b7a      	ldr	r3, [pc, #488]	; (80078d4 <UART_SetConfig+0x2cc>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d82d      	bhi.n	8007754 <UART_SetConfig+0x14c>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0xf8>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007735 	.word	0x08007735
 8007704:	08007755 	.word	0x08007755
 8007708:	08007755 	.word	0x08007755
 800770c:	08007755 	.word	0x08007755
 8007710:	08007745 	.word	0x08007745
 8007714:	08007755 	.word	0x08007755
 8007718:	08007755 	.word	0x08007755
 800771c:	08007755 	.word	0x08007755
 8007720:	0800773d 	.word	0x0800773d
 8007724:	08007755 	.word	0x08007755
 8007728:	08007755 	.word	0x08007755
 800772c:	08007755 	.word	0x08007755
 8007730:	0800774d 	.word	0x0800774d
 8007734:	2300      	movs	r3, #0
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773a:	e0d8      	b.n	80078ee <UART_SetConfig+0x2e6>
 800773c:	2302      	movs	r3, #2
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007742:	e0d4      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007744:	2304      	movs	r3, #4
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774a:	e0d0      	b.n	80078ee <UART_SetConfig+0x2e6>
 800774c:	2308      	movs	r3, #8
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007752:	e0cc      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007754:	2310      	movs	r3, #16
 8007756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775a:	e0c8      	b.n	80078ee <UART_SetConfig+0x2e6>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a5e      	ldr	r2, [pc, #376]	; (80078dc <UART_SetConfig+0x2d4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d125      	bne.n	80077b2 <UART_SetConfig+0x1aa>
 8007766:	4b5b      	ldr	r3, [pc, #364]	; (80078d4 <UART_SetConfig+0x2cc>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007770:	2b30      	cmp	r3, #48	; 0x30
 8007772:	d016      	beq.n	80077a2 <UART_SetConfig+0x19a>
 8007774:	2b30      	cmp	r3, #48	; 0x30
 8007776:	d818      	bhi.n	80077aa <UART_SetConfig+0x1a2>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d00a      	beq.n	8007792 <UART_SetConfig+0x18a>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d814      	bhi.n	80077aa <UART_SetConfig+0x1a2>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <UART_SetConfig+0x182>
 8007784:	2b10      	cmp	r3, #16
 8007786:	d008      	beq.n	800779a <UART_SetConfig+0x192>
 8007788:	e00f      	b.n	80077aa <UART_SetConfig+0x1a2>
 800778a:	2300      	movs	r3, #0
 800778c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007790:	e0ad      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007792:	2302      	movs	r3, #2
 8007794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007798:	e0a9      	b.n	80078ee <UART_SetConfig+0x2e6>
 800779a:	2304      	movs	r3, #4
 800779c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a0:	e0a5      	b.n	80078ee <UART_SetConfig+0x2e6>
 80077a2:	2308      	movs	r3, #8
 80077a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a8:	e0a1      	b.n	80078ee <UART_SetConfig+0x2e6>
 80077aa:	2310      	movs	r3, #16
 80077ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b0:	e09d      	b.n	80078ee <UART_SetConfig+0x2e6>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a4a      	ldr	r2, [pc, #296]	; (80078e0 <UART_SetConfig+0x2d8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d125      	bne.n	8007808 <UART_SetConfig+0x200>
 80077bc:	4b45      	ldr	r3, [pc, #276]	; (80078d4 <UART_SetConfig+0x2cc>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077c6:	2bc0      	cmp	r3, #192	; 0xc0
 80077c8:	d016      	beq.n	80077f8 <UART_SetConfig+0x1f0>
 80077ca:	2bc0      	cmp	r3, #192	; 0xc0
 80077cc:	d818      	bhi.n	8007800 <UART_SetConfig+0x1f8>
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d00a      	beq.n	80077e8 <UART_SetConfig+0x1e0>
 80077d2:	2b80      	cmp	r3, #128	; 0x80
 80077d4:	d814      	bhi.n	8007800 <UART_SetConfig+0x1f8>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <UART_SetConfig+0x1d8>
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	d008      	beq.n	80077f0 <UART_SetConfig+0x1e8>
 80077de:	e00f      	b.n	8007800 <UART_SetConfig+0x1f8>
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e6:	e082      	b.n	80078ee <UART_SetConfig+0x2e6>
 80077e8:	2302      	movs	r3, #2
 80077ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ee:	e07e      	b.n	80078ee <UART_SetConfig+0x2e6>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f6:	e07a      	b.n	80078ee <UART_SetConfig+0x2e6>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fe:	e076      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007806:	e072      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a35      	ldr	r2, [pc, #212]	; (80078e4 <UART_SetConfig+0x2dc>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d12a      	bne.n	8007868 <UART_SetConfig+0x260>
 8007812:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <UART_SetConfig+0x2cc>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007820:	d01a      	beq.n	8007858 <UART_SetConfig+0x250>
 8007822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007826:	d81b      	bhi.n	8007860 <UART_SetConfig+0x258>
 8007828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782c:	d00c      	beq.n	8007848 <UART_SetConfig+0x240>
 800782e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007832:	d815      	bhi.n	8007860 <UART_SetConfig+0x258>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <UART_SetConfig+0x238>
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d008      	beq.n	8007850 <UART_SetConfig+0x248>
 800783e:	e00f      	b.n	8007860 <UART_SetConfig+0x258>
 8007840:	2300      	movs	r3, #0
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007846:	e052      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007848:	2302      	movs	r3, #2
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784e:	e04e      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007850:	2304      	movs	r3, #4
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007856:	e04a      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007858:	2308      	movs	r3, #8
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785e:	e046      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007860:	2310      	movs	r3, #16
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007866:	e042      	b.n	80078ee <UART_SetConfig+0x2e6>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a17      	ldr	r2, [pc, #92]	; (80078cc <UART_SetConfig+0x2c4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d13a      	bne.n	80078e8 <UART_SetConfig+0x2e0>
 8007872:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <UART_SetConfig+0x2cc>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800787c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007880:	d01a      	beq.n	80078b8 <UART_SetConfig+0x2b0>
 8007882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007886:	d81b      	bhi.n	80078c0 <UART_SetConfig+0x2b8>
 8007888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788c:	d00c      	beq.n	80078a8 <UART_SetConfig+0x2a0>
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007892:	d815      	bhi.n	80078c0 <UART_SetConfig+0x2b8>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <UART_SetConfig+0x298>
 8007898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789c:	d008      	beq.n	80078b0 <UART_SetConfig+0x2a8>
 800789e:	e00f      	b.n	80078c0 <UART_SetConfig+0x2b8>
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a6:	e022      	b.n	80078ee <UART_SetConfig+0x2e6>
 80078a8:	2302      	movs	r3, #2
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ae:	e01e      	b.n	80078ee <UART_SetConfig+0x2e6>
 80078b0:	2304      	movs	r3, #4
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b6:	e01a      	b.n	80078ee <UART_SetConfig+0x2e6>
 80078b8:	2308      	movs	r3, #8
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078be:	e016      	b.n	80078ee <UART_SetConfig+0x2e6>
 80078c0:	2310      	movs	r3, #16
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c6:	e012      	b.n	80078ee <UART_SetConfig+0x2e6>
 80078c8:	efff69f3 	.word	0xefff69f3
 80078cc:	40008000 	.word	0x40008000
 80078d0:	40013800 	.word	0x40013800
 80078d4:	40021000 	.word	0x40021000
 80078d8:	40004400 	.word	0x40004400
 80078dc:	40004800 	.word	0x40004800
 80078e0:	40004c00 	.word	0x40004c00
 80078e4:	40005000 	.word	0x40005000
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a9f      	ldr	r2, [pc, #636]	; (8007b70 <UART_SetConfig+0x568>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d17a      	bne.n	80079ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d824      	bhi.n	800794a <UART_SetConfig+0x342>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x300>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800792d 	.word	0x0800792d
 800790c:	0800794b 	.word	0x0800794b
 8007910:	08007935 	.word	0x08007935
 8007914:	0800794b 	.word	0x0800794b
 8007918:	0800793b 	.word	0x0800793b
 800791c:	0800794b 	.word	0x0800794b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800794b 	.word	0x0800794b
 8007928:	08007943 	.word	0x08007943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800792c:	f7fd fa42 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8007930:	61f8      	str	r0, [r7, #28]
        break;
 8007932:	e010      	b.n	8007956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007934:	4b8f      	ldr	r3, [pc, #572]	; (8007b74 <UART_SetConfig+0x56c>)
 8007936:	61fb      	str	r3, [r7, #28]
        break;
 8007938:	e00d      	b.n	8007956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793a:	f7fd f9a3 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 800793e:	61f8      	str	r0, [r7, #28]
        break;
 8007940:	e009      	b.n	8007956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007946:	61fb      	str	r3, [r7, #28]
        break;
 8007948:	e005      	b.n	8007956 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80fb 	beq.w	8007b54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	4413      	add	r3, r2
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	429a      	cmp	r2, r3
 800796c:	d305      	bcc.n	800797a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	429a      	cmp	r2, r3
 8007978:	d903      	bls.n	8007982 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007980:	e0e8      	b.n	8007b54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2200      	movs	r2, #0
 8007986:	461c      	mov	r4, r3
 8007988:	4615      	mov	r5, r2
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	022b      	lsls	r3, r5, #8
 8007994:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007998:	0222      	lsls	r2, r4, #8
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	6849      	ldr	r1, [r1, #4]
 800799e:	0849      	lsrs	r1, r1, #1
 80079a0:	2000      	movs	r0, #0
 80079a2:	4688      	mov	r8, r1
 80079a4:	4681      	mov	r9, r0
 80079a6:	eb12 0a08 	adds.w	sl, r2, r8
 80079aa:	eb43 0b09 	adc.w	fp, r3, r9
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	603b      	str	r3, [r7, #0]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	f7f9 f820 	bl	8000a04 <__aeabi_uldivmod>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4613      	mov	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d2:	d308      	bcc.n	80079e6 <UART_SetConfig+0x3de>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079da:	d204      	bcs.n	80079e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	60da      	str	r2, [r3, #12]
 80079e4:	e0b6      	b.n	8007b54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079ec:	e0b2      	b.n	8007b54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f6:	d15e      	bne.n	8007ab6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d828      	bhi.n	8007a52 <UART_SetConfig+0x44a>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x400>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	08007a53 	.word	0x08007a53
 8007a18:	08007a43 	.word	0x08007a43
 8007a1c:	08007a53 	.word	0x08007a53
 8007a20:	08007a53 	.word	0x08007a53
 8007a24:	08007a53 	.word	0x08007a53
 8007a28:	08007a4b 	.word	0x08007a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a2c:	f7fd f9c2 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8007a30:	61f8      	str	r0, [r7, #28]
        break;
 8007a32:	e014      	b.n	8007a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a34:	f7fd f9d4 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 8007a38:	61f8      	str	r0, [r7, #28]
        break;
 8007a3a:	e010      	b.n	8007a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a3c:	4b4d      	ldr	r3, [pc, #308]	; (8007b74 <UART_SetConfig+0x56c>)
 8007a3e:	61fb      	str	r3, [r7, #28]
        break;
 8007a40:	e00d      	b.n	8007a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a42:	f7fd f91f 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8007a46:	61f8      	str	r0, [r7, #28]
        break;
 8007a48:	e009      	b.n	8007a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4e:	61fb      	str	r3, [r7, #28]
        break;
 8007a50:	e005      	b.n	8007a5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d077      	beq.n	8007b54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	005a      	lsls	r2, r3, #1
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	441a      	add	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b0f      	cmp	r3, #15
 8007a7e:	d916      	bls.n	8007aae <UART_SetConfig+0x4a6>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a86:	d212      	bcs.n	8007aae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f023 030f 	bic.w	r3, r3, #15
 8007a90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	8afb      	ldrh	r3, [r7, #22]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	8afa      	ldrh	r2, [r7, #22]
 8007aaa:	60da      	str	r2, [r3, #12]
 8007aac:	e052      	b.n	8007b54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ab4:	e04e      	b.n	8007b54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d827      	bhi.n	8007b0e <UART_SetConfig+0x506>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x4bc>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b0f 	.word	0x08007b0f
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007b0f 	.word	0x08007b0f
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	08007b0f 	.word	0x08007b0f
 8007ae4:	08007b07 	.word	0x08007b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae8:	f7fd f964 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8007aec:	61f8      	str	r0, [r7, #28]
        break;
 8007aee:	e014      	b.n	8007b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fd f976 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 8007af4:	61f8      	str	r0, [r7, #28]
        break;
 8007af6:	e010      	b.n	8007b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <UART_SetConfig+0x56c>)
 8007afa:	61fb      	str	r3, [r7, #28]
        break;
 8007afc:	e00d      	b.n	8007b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afe:	f7fd f8c1 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8007b02:	61f8      	str	r0, [r7, #28]
        break;
 8007b04:	e009      	b.n	8007b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0a:	61fb      	str	r3, [r7, #28]
        break;
 8007b0c:	e005      	b.n	8007b1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b18:	bf00      	nop
    }

    if (pclk != 0U)
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d019      	beq.n	8007b54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	085a      	lsrs	r2, r3, #1
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	441a      	add	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d909      	bls.n	8007b4e <UART_SetConfig+0x546>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b40:	d205      	bcs.n	8007b4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	e002      	b.n	8007b54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3728      	adds	r7, #40	; 0x28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6e:	bf00      	nop
 8007b70:	40008000 	.word	0x40008000
 8007b74:	00f42400 	.word	0x00f42400

08007b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01a      	beq.n	8007c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c76:	d10a      	bne.n	8007c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ccc:	f7fa f8e4 	bl	8001e98 <HAL_GetTick>
 8007cd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d10e      	bne.n	8007cfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f82d 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e023      	b.n	8007d46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d10e      	bne.n	8007d2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f817 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e00d      	b.n	8007d46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b09c      	sub	sp, #112	; 0x70
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	603b      	str	r3, [r7, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5e:	e0a5      	b.n	8007eac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d66:	f000 80a1 	beq.w	8007eac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fa f895 	bl	8001e98 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d13e      	bne.n	8007dfe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d94:	667b      	str	r3, [r7, #100]	; 0x64
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e6      	bne.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e5      	bne.n	8007db2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2220      	movs	r2, #32
 8007dea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2220      	movs	r2, #32
 8007df0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e067      	b.n	8007ece <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d04f      	beq.n	8007eac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1a:	d147      	bne.n	8007eac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e24:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
 8007e46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e6      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	613b      	str	r3, [r7, #16]
   return(result);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f023 0301 	bic.w	r3, r3, #1
 8007e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e78:	623a      	str	r2, [r7, #32]
 8007e7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	69f9      	ldr	r1, [r7, #28]
 8007e7e:	6a3a      	ldr	r2, [r7, #32]
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e5      	bne.n	8007e58 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e010      	b.n	8007ece <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	f43f af4a 	beq.w	8007d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3770      	adds	r7, #112	; 0x70
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b095      	sub	sp, #84	; 0x54
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007efc:	643b      	str	r3, [r7, #64]	; 0x40
 8007efe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e5      	bne.n	8007f10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d118      	bne.n	8007f7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f023 0310 	bic.w	r3, r3, #16
 8007f60:	647b      	str	r3, [r7, #68]	; 0x44
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6979      	ldr	r1, [r7, #20]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	613b      	str	r3, [r7, #16]
   return(result);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e6      	bne.n	8007f4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f90:	bf00      	nop
 8007f92:	3754      	adds	r7, #84	; 0x54
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff fb0e 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe4:	61fb      	str	r3, [r7, #28]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fada 	bl	80075c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008014:	bf00      	nop
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <__libc_init_array>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	4d0d      	ldr	r5, [pc, #52]	; (8008068 <__libc_init_array+0x38>)
 8008034:	4c0d      	ldr	r4, [pc, #52]	; (800806c <__libc_init_array+0x3c>)
 8008036:	1b64      	subs	r4, r4, r5
 8008038:	10a4      	asrs	r4, r4, #2
 800803a:	2600      	movs	r6, #0
 800803c:	42a6      	cmp	r6, r4
 800803e:	d109      	bne.n	8008054 <__libc_init_array+0x24>
 8008040:	4d0b      	ldr	r5, [pc, #44]	; (8008070 <__libc_init_array+0x40>)
 8008042:	4c0c      	ldr	r4, [pc, #48]	; (8008074 <__libc_init_array+0x44>)
 8008044:	f000 f820 	bl	8008088 <_init>
 8008048:	1b64      	subs	r4, r4, r5
 800804a:	10a4      	asrs	r4, r4, #2
 800804c:	2600      	movs	r6, #0
 800804e:	42a6      	cmp	r6, r4
 8008050:	d105      	bne.n	800805e <__libc_init_array+0x2e>
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	f855 3b04 	ldr.w	r3, [r5], #4
 8008058:	4798      	blx	r3
 800805a:	3601      	adds	r6, #1
 800805c:	e7ee      	b.n	800803c <__libc_init_array+0xc>
 800805e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008062:	4798      	blx	r3
 8008064:	3601      	adds	r6, #1
 8008066:	e7f2      	b.n	800804e <__libc_init_array+0x1e>
 8008068:	080080f0 	.word	0x080080f0
 800806c:	080080f0 	.word	0x080080f0
 8008070:	080080f0 	.word	0x080080f0
 8008074:	080080f4 	.word	0x080080f4

08008078 <memset>:
 8008078:	4402      	add	r2, r0
 800807a:	4603      	mov	r3, r0
 800807c:	4293      	cmp	r3, r2
 800807e:	d100      	bne.n	8008082 <memset+0xa>
 8008080:	4770      	bx	lr
 8008082:	f803 1b01 	strb.w	r1, [r3], #1
 8008086:	e7f9      	b.n	800807c <memset+0x4>

08008088 <_init>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	bf00      	nop
 800808c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808e:	bc08      	pop	{r3}
 8008090:	469e      	mov	lr, r3
 8008092:	4770      	bx	lr

08008094 <_fini>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	bf00      	nop
 8008098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809a:	bc08      	pop	{r3}
 800809c:	469e      	mov	lr, r3
 800809e:	4770      	bx	lr
