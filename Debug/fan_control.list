
fan_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000521c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005570  08005570  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005578  08005578  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000007c  080055fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080055fc  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caec  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6f  00000000  00000000  0002cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002eb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262d6  00000000  00000000  0002fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d307  00000000  00000000  00056196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e811c  00000000  00000000  0006349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b5b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  0014b60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005394 	.word	0x08005394

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005394 	.word	0x08005394

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
  * @retval int
  */


int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000588:	f004 fe88 	bl	800529c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc99 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f810 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f884 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f852 	bl	8000640 <MX_USART1_UART_Init>

  /* USER CODE END WHILE */
  
  /* USER CODE BEGIN 3 */

  test_message_handler(receiveBuffer, sendBuffer);
 800059c:	4903      	ldr	r1, [pc, #12]	; (80005ac <main+0x28>)
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x2c>)
 80005a0:	f000 fbd8 	bl	8000d54 <test_message_handler>
 80005a4:	2300      	movs	r3, #0
//  ctrl_mode(1);
//  handle_message(receiveBuffer, sendBuffer);
//  set_wind(0);
//  print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
  /* USER CODE END 3 */
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000124 	.word	0x20000124
 80005b0:	2000011c 	.word	0x2000011c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fbda 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005da:	f001 f82f 	bl	800163c <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f874 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005e8:	2310      	movs	r3, #16
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f871 	bl	80016e8 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800060c:	f000 f860 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fc39 	bl	8001ea0 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000634:	f000 f84c 	bl	80006d0 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3758      	adds	r7, #88	; 0x58
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART1_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000684:	f002 faec 	bl	8002c60 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f81f 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000098 	.word	0x20000098
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x2c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x2c>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x2c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <handle_message>:
 */

#include "message_handler.h"


uint8_t handle_message(unsigned char* received_buf, unsigned char* sent_buf){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	 * @param write_buf sending message's buffer
	 * @return 0 if don't send the reply
	 * return the length of reply message buff otherwise
	 */
	uint8_t sent_buf_length;
	uint8_t* stx = received_buf;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	623b      	str	r3, [r7, #32]
	if(*stx != 0x02){
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d003      	beq.n	80006fa <handle_message+0x1e>
		sent_buf_length = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 80006f8:	e072      	b.n	80007e0 <handle_message+0x104>
	}

	uint8_t* received_frame_type  = received_buf + 1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buf + 1;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buf + 2;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	3302      	adds	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
	
	*sent_buf = 0x02;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2202      	movs	r2, #2
 8000710:	701a      	strb	r2, [r3, #0]
	switch(*received_frame_type){
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	2b03      	cmp	r3, #3
 800071a:	d837      	bhi.n	800078c <handle_message+0xb0>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <handle_message+0x48>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800074b 	.word	0x0800074b
 800072c:	08000761 	.word	0x08000761
 8000730:	08000777 	.word	0x08000777
		case 0x01:
			process_power_message(received_buf, sent_buf);
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f858 	bl	80007ec <process_power_message>
			sent_data_length = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000748:	e024      	b.n	8000794 <handle_message+0xb8>
		case 0x02:
			process_control_mode_message(received_buf, sent_buf);
 800074a:	6839      	ldr	r1, [r7, #0]
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f87f 	bl	8000850 <process_control_mode_message>
			sent_data_length = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 800075e:	e019      	b.n	8000794 <handle_message+0xb8>
		case 0x03:
			process_wind_mode_message(received_buf, sent_buf);
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f8ac 	bl	80008c0 <process_wind_mode_message>
			sent_data_length = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000774:	e00e      	b.n	8000794 <handle_message+0xb8>
		case 0x04:
			sent_data_length = process_states_request_message(received_buf, sent_buf);
 8000776:	6839      	ldr	r1, [r7, #0]
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f8e1 	bl	8000940 <process_states_request_message>
 800077e:	4603      	mov	r3, r0
 8000780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 0; 
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 800078a:	e003      	b.n	8000794 <handle_message+0xb8>
		default:
			sent_buf_length = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto terminate;
 8000792:	e025      	b.n	80007e0 <handle_message+0x104>
	}
	*sent_frame_type = *received_frame_type + 0x80;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b80      	subs	r3, #128	; 0x80
 800079a:	b2da      	uxtb	r2, r3
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007a6:	701a      	strb	r2, [r3, #0]

	uint8_t* received_ETX = received_buf + 3 + received_data_length;
 80007a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007ac:	3303      	adds	r3, #3
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d003      	beq.n	80007c4 <handle_message+0xe8>
		sent_buf_length = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 80007c2:	e00d      	b.n	80007e0 <handle_message+0x104>
	}


	uint8_t* sent_ETX = sent_buf + 3 + sent_data_length; 
 80007c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007c8:	3303      	adds	r3, #3
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2203      	movs	r2, #3
 80007d4:	701a      	strb	r2, [r3, #0]
	sent_buf_length = sent_data_length + 4;
 80007d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007da:	3304      	adds	r3, #4
 80007dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	terminate: return sent_buf_length;
 80007e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <process_power_message>:



void process_power_message(unsigned char* received_buf, unsigned char* sent_buf){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	 * @param received_buf power message's buffer
	 * @param sent_buf reply message's buffer 
	 * return message data length otherwise
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 80007f6:	2101      	movs	r1, #1
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f8e1 	bl	80009c0 <check_message_data_length>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01f      	beq.n	8000844 <process_power_message+0x58>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3303      	adds	r3, #3
 8000808:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	3303      	adds	r3, #3
 800080e:	60bb      	str	r3, [r7, #8]
	if(*received_data == 0x00){
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d106      	bne.n	8000826 <process_power_message+0x3a>
		power = OFF;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <process_power_message+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e00f      	b.n	8000846 <process_power_message+0x5a>
	}
	else if(*received_data == 0x01){
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d106      	bne.n	800083c <process_power_message+0x50>
		power = ON;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <process_power_message+0x60>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e004      	b.n	8000846 <process_power_message+0x5a>
	}
	else{
		*sent_data = 0xFF;
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	22ff      	movs	r2, #255	; 0xff
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e000      	b.n	8000846 <process_power_message+0x5a>
		return;
 8000844:	bf00      	nop
	}
}
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000012d 	.word	0x2000012d

08000850 <process_control_mode_message>:

void process_control_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	 * @brief read mode control message from received_buf and replies in sent_buf 
	 * @param received_buf mode control message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 800085a:	2101      	movs	r1, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f8af 	bl	80009c0 <check_message_data_length>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d022      	beq.n	80008ae <process_control_mode_message+0x5e>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3303      	adds	r3, #3
 800086c:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	3303      	adds	r3, #3
 8000872:	60bb      	str	r3, [r7, #8]
	if(power == OFF){
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <process_control_mode_message+0x68>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d103      	bne.n	8000884 <process_control_mode_message+0x34>
		*sent_data = 0xFF;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	701a      	strb	r2, [r3, #0]
		goto terminate;
 8000882:	e013      	b.n	80008ac <process_control_mode_message+0x5c>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <process_control_mode_message+0x44>
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d107      	bne.n	80008a4 <process_control_mode_message+0x54>
		control_mode = *received_data;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <process_control_mode_message+0x6c>)
 800089a:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
		if(control_mode == AUTOMATIC){
 80008a2:	e003      	b.n	80008ac <process_control_mode_message+0x5c>
			//Read temperature
			// Add logic
		}
	}
	else{
		*sent_data = 0xFF;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	701a      	strb	r2, [r3, #0]
	}
	terminate: return;
 80008aa:	e001      	b.n	80008b0 <process_control_mode_message+0x60>
 80008ac:	e000      	b.n	80008b0 <process_control_mode_message+0x60>
		return;
 80008ae:	bf00      	nop
}
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000012d 	.word	0x2000012d
 80008bc:	2000012e 	.word	0x2000012e

080008c0 <process_wind_mode_message>:

void process_wind_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	 * @brief read win mode message from received_buf and replies in sent_buf 
	 * @param received_buf win mode message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 80008ca:	2101      	movs	r1, #1
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 f877 	bl	80009c0 <check_message_data_length>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d029      	beq.n	800092c <process_wind_mode_message+0x6c>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3303      	adds	r3, #3
 80008dc:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	3303      	adds	r3, #3
 80008e2:	60bb      	str	r3, [r7, #8]
	if(power == OFF){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <process_wind_mode_message+0x74>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d103      	bne.n	80008f4 <process_wind_mode_message+0x34>
		*sent_data = 0xFF;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	22ff      	movs	r2, #255	; 0xff
 80008f0:	701a      	strb	r2, [r3, #0]
		goto terminate;
 80008f2:	e01a      	b.n	800092a <process_wind_mode_message+0x6a>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d007      	beq.n	800090c <process_wind_mode_message+0x4c>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d003      	beq.n	800090c <process_wind_mode_message+0x4c>
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10a      	bne.n	8000922 <process_wind_mode_message+0x62>
		wind_mode = *received_data;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <process_wind_mode_message+0x78>)
 8000912:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
		control_mode = MANUAL;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <process_wind_mode_message+0x7c>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e003      	b.n	800092a <process_wind_mode_message+0x6a>
	}
	else{
		*sent_data = 0xFF;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	701a      	strb	r2, [r3, #0]
	}
	terminate: return;
 8000928:	e001      	b.n	800092e <process_wind_mode_message+0x6e>
 800092a:	e000      	b.n	800092e <process_wind_mode_message+0x6e>
		return;
 800092c:	bf00      	nop
}
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000012d 	.word	0x2000012d
 8000938:	20000000 	.word	0x20000000
 800093c:	2000012e 	.word	0x2000012e

08000940 <process_states_request_message>:

uint8_t process_states_request_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	 * @brief read states request message from received_buf and replies in sent_buf 
	 * @param received_buf sates request message's buffer
	 * @param sent_buf reply message's buffer 
	 * @return sent message's data length
	*/
	uint8_t* sent_data = sent_buf + 3;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	3303      	adds	r3, #3
 800094e:	61bb      	str	r3, [r7, #24]
	uint8_t* power_state = sent_data + 1;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
	uint8_t* control_mode_state = sent_data + 2;
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	3302      	adds	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
	uint8_t* wind_mode_state = sent_data + 3;	
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	3303      	adds	r3, #3
 8000960:	60fb      	str	r3, [r7, #12]
	uint8_t* temperature_state = sent_data + 4;
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	3304      	adds	r3, #4
 8000966:	60bb      	str	r3, [r7, #8]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buf, 0)){
 8000968:	2100      	movs	r1, #0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 f828 	bl	80009c0 <check_message_data_length>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d105      	bne.n	8000982 <process_states_request_message+0x42>
		sent_data_length = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	77fb      	strb	r3, [r7, #31]
		*sent_data = 0xFF;
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e013      	b.n	80009aa <process_states_request_message+0x6a>
	}
	else{
		*sent_data = 0x00;
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
		*power_state = power;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <process_states_request_message+0x74>)
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	701a      	strb	r2, [r3, #0]
		*control_mode_state = control_mode;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <process_states_request_message+0x78>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = wind_mode;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <process_states_request_message+0x7c>)
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	701a      	strb	r2, [r3, #0]
		// read temperature 
		// modify this 
		*temperature_state = 0x00;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 80009a6:	2305      	movs	r3, #5
 80009a8:	77fb      	strb	r3, [r7, #31]
	}
	return sent_data_length;
 80009aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000012d 	.word	0x2000012d
 80009b8:	2000012e 	.word	0x2000012e
 80009bc:	20000000 	.word	0x20000000

080009c0 <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buf, uint8_t expected_value){
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	/**
	* @brief check whether the length message is correct or not 
	* @return 1 if it is correct 
	* return  0 other wise  
	*/
	uint8_t* length = received_buf + 2;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3302      	adds	r3, #2
 80009d0:	60fb      	str	r3, [r7, #12]
	if(*length == expected_value){
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d101      	bne.n	80009e0 <check_message_data_length+0x20>
		return 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <check_message_data_length+0x22>
	}
	else{
		return 0;
 80009e0:	2300      	movs	r3, #0
	}
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6613      	str	r3, [r2, #96]	; 0x60
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ac      	sub	sp, #176	; 0xb0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2288      	movs	r2, #136	; 0x88
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 f98f 	bl	8003d7c <memset>
  if(huart->Instance==USART1)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <HAL_UART_MspInit+0xc0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d142      	bne.n	8000aee <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fc37 	bl	80022e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a80:	f7ff fe26 	bl	80006d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_UART_MspInit+0xc4>)
 8000a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_UART_MspInit+0xc4>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_UART_MspInit+0xc4>)
 8000a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_UART_MspInit+0xc4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_UART_MspInit+0xc4>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_UART_MspInit+0xc4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000acc:	2307      	movs	r3, #7
 8000ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_UART_MspInit+0xc8>)
 8000ada:	f000 fbf7 	bl	80012cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	2025      	movs	r0, #37	; 0x25
 8000ae4:	f000 fb3d 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae8:	2025      	movs	r0, #37	; 0x25
 8000aea:	f000 fb56 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	37b0      	adds	r7, #176	; 0xb0
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 fa0c 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART1_IRQHandler+0x10>)
 8000b5e:	f002 f8cd 	bl	8002cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000098 	.word	0x20000098

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f003 f8c4 	bl	8003d28 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20018000 	.word	0x20018000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	20000130 	.word	0x20000130
 8000bd4:	200001f8 	.word	0x200001f8

08000bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <turn>:
 *  Created on: Jul 24, 2023
 *      Author: nguyentrunghieu
 */

#include "message_handler.h"
void turn(unsigned char* receiveBuffer, uint8_t pow){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief write power message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x01;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x01;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	if(pow == 0){
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <turn+0x32>
		receiveBuffer[3] = 0x00;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3303      	adds	r3, #3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e003      	b.n	8000c36 <turn+0x3a>
	}
	else{
		receiveBuffer[3] = 0x01;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3303      	adds	r3, #3
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
	}
	receiveBuffer[4] = 0x03;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <ctrl_mode>:

void ctrl_mode(unsigned char* receiveBuffer, uint8_t ctrl_mode){
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief write mode control message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2202      	movs	r2, #2
 8000c5a:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x02;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	2202      	movs	r2, #2
 8000c62:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x01;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3302      	adds	r3, #2
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
	if(ctrl_mode == 0){
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <ctrl_mode+0x32>
		receiveBuffer[3] = 0x00;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3303      	adds	r3, #3
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e003      	b.n	8000c84 <ctrl_mode+0x3a>
	}
	else{
		receiveBuffer[3] = 0x01;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3303      	adds	r3, #3
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
	}
	receiveBuffer[4] = 0x03;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3304      	adds	r3, #4
 8000c88:	2203      	movs	r2, #3
 8000c8a:	701a      	strb	r2, [r3, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <set_wind>:

void set_wind(unsigned char* receiveBuffer, uint8_t wind_mode){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief write wind mode message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x03;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3301      	adds	r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x01;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
	receiveBuffer[3] = wind_mode;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3303      	adds	r3, #3
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	701a      	strb	r2, [r3, #0]
	receiveBuffer[4] = 0x03;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <request>:

void request(unsigned char* receiveBuffer){
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	/**
	 * @brief write request message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x04;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	2204      	movs	r2, #4
 8000cea:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x00;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
	receiveBuffer[3] = 0x03;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	701a      	strb	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <print_mess>:

void print_mess(unsigned char* rep_mess_buff, uint8_t length){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief print value of message's buffer
	*/
  printf("Actual:   ");
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <print_mess+0x44>)
 8000d16:	f003 f839 	bl	8003d8c <iprintf>
  for (uint8_t i =0; i<length; i++ ){
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e00a      	b.n	8000d36 <print_mess+0x2e>
    printf("%X ", *(rep_mess_buff+i));
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <print_mess+0x48>)
 8000d2c:	f003 f82e 	bl	8003d8c <iprintf>
  for (uint8_t i =0; i<length; i++ ){
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	3301      	adds	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d3f0      	bcc.n	8000d20 <print_mess+0x18>
  }
  printf("\n");
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f003 f83c 	bl	8003dbc <putchar>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	080053ac 	.word	0x080053ac
 8000d50:	080053b8 	.word	0x080053b8

08000d54 <test_message_handler>:

void test_message_handler(unsigned char* receiveBuffer, unsigned char* sendBuffer){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	 * @brief test message_handler() function
	 */


	// Test case 1:
	turn(receiveBuffer, 1);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff4b 	bl	8000bfc <turn>
	printf("Expected: 2 81 1 0 3\n");
 8000d66:	483b      	ldr	r0, [pc, #236]	; (8000e54 <test_message_handler+0x100>)
 8000d68:	f003 f8ac 	bl	8003ec4 <puts>
	print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fcb4 	bl	80006dc <handle_message>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4619      	mov	r1, r3
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f7ff ffc5 	bl	8000d08 <print_mess>

	// Test case 2:
	ctrl_mode(receiveBuffer ,1);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff62 	bl	8000c4a <ctrl_mode>
	printf("Expected: 2 82 1 0 3\n");
 8000d86:	4834      	ldr	r0, [pc, #208]	; (8000e58 <test_message_handler+0x104>)
 8000d88:	f003 f89c 	bl	8003ec4 <puts>
	print_mess(sendBuffer ,handle_message(receiveBuffer, sendBuffer));
 8000d8c:	6839      	ldr	r1, [r7, #0]
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fca4 	bl	80006dc <handle_message>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4619      	mov	r1, r3
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f7ff ffb5 	bl	8000d08 <print_mess>

	// Test case 4:
	set_wind(receiveBuffer, 2);
 8000d9e:	2102      	movs	r1, #2
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff79 	bl	8000c98 <set_wind>
	printf("Expected: 2 83 1 0 3\n");
 8000da6:	482d      	ldr	r0, [pc, #180]	; (8000e5c <test_message_handler+0x108>)
 8000da8:	f003 f88c 	bl	8003ec4 <puts>
	print_mess(sendBuffer ,handle_message(receiveBuffer, sendBuffer));
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fc94 	bl	80006dc <handle_message>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff ffa5 	bl	8000d08 <print_mess>

	// Test case 5:
	request(receiveBuffer);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff89 	bl	8000cd6 <request>
	printf("Expected: 2 84 5 0 1 1 2 0 3\n");
 8000dc4:	4826      	ldr	r0, [pc, #152]	; (8000e60 <test_message_handler+0x10c>)
 8000dc6:	f003 f87d 	bl	8003ec4 <puts>
	print_mess(sendBuffer ,handle_message(receiveBuffer, sendBuffer));
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fc85 	bl	80006dc <handle_message>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6838      	ldr	r0, [r7, #0]
 8000dd8:	f7ff ff96 	bl	8000d08 <print_mess>

	// Test case 6:
	turn(receiveBuffer, 0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff0c 	bl	8000bfc <turn>
	handle_message(receiveBuffer, sendBuffer);
 8000de4:	6839      	ldr	r1, [r7, #0]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fc78 	bl	80006dc <handle_message>
	ctrl_mode(receiveBuffer, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff2b 	bl	8000c4a <ctrl_mode>
	printf("Expected: 2 82 1 FF 3\n");
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <test_message_handler+0x110>)
 8000df6:	f003 f865 	bl	8003ec4 <puts>
	print_mess(sendBuffer ,handle_message(receiveBuffer, sendBuffer));
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fc6d 	bl	80006dc <handle_message>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4619      	mov	r1, r3
 8000e06:	6838      	ldr	r0, [r7, #0]
 8000e08:	f7ff ff7e 	bl	8000d08 <print_mess>

	// Test case 7:
	set_wind(receiveBuffer, 1);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff42 	bl	8000c98 <set_wind>
	printf("Expected: 2 83 1 FF 3\n");
 8000e14:	4814      	ldr	r0, [pc, #80]	; (8000e68 <test_message_handler+0x114>)
 8000e16:	f003 f855 	bl	8003ec4 <puts>
	print_mess(sendBuffer ,handle_message(receiveBuffer, sendBuffer));
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fc5d 	bl	80006dc <handle_message>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	6838      	ldr	r0, [r7, #0]
 8000e28:	f7ff ff6e 	bl	8000d08 <print_mess>

	// Test case 8:
	request(receiveBuffer);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff52 	bl	8000cd6 <request>
	printf("Expected: 2 84 5 0 0 1 2 0 3\n");
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <test_message_handler+0x118>)
 8000e34:	f003 f846 	bl	8003ec4 <puts>
	print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fc4e 	bl	80006dc <handle_message>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4619      	mov	r1, r3
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f7ff ff5f 	bl	8000d08 <print_mess>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	080053bc 	.word	0x080053bc
 8000e58:	080053d4 	.word	0x080053d4
 8000e5c:	080053ec 	.word	0x080053ec
 8000e60:	08005404 	.word	0x08005404
 8000e64:	08005424 	.word	0x08005424
 8000e68:	0800543c 	.word	0x0800543c
 8000e6c:	08005454 	.word	0x08005454

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff feb0 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 ff49 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fb6f 	bl	8000584 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000eb4:	08005580 	.word	0x08005580
  ldr r2, =_sbss
 8000eb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ebc:	200001f4 	.word	0x200001f4

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>

08000ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f93d 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f80e 	bl	8000ef4 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee4:	f7ff fd84 	bl	80009f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_InitTick+0x70>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f949 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10f      	bne.n	8000f4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d809      	bhi.n	8000f44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	f000 f913 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_InitTick+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e004      	b.n	8000f54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e001      	b.n	8000f54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000004 	.word	0x20000004
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000134 	.word	0x20000134

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000134 	.word	0x20000134

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d008      	beq.n	80011f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2204      	movs	r2, #4
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e022      	b.n	800123e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 020e 	bic.w	r2, r2, #14
 8001206:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	f003 021c 	and.w	r2, r3, #28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	2101      	movs	r1, #1
 8001226:	fa01 f202 	lsl.w	r2, r1, r2
 800122a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d005      	beq.n	800126e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2204      	movs	r2, #4
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e029      	b.n	80012c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 020e 	bic.w	r2, r2, #14
 800127c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 021c 	and.w	r2, r3, #28
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4798      	blx	r3
    }
  }
  return status;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e17f      	b.n	80015dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8171 	beq.w	80015d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_Init+0x40>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 0201 	and.w	r2, r3, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b03      	cmp	r3, #3
 8001378:	d118      	bne.n	80013ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d017      	beq.n	80013e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80ac 	beq.w	80015d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_GPIO_Init+0x330>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_GPIO_Init+0x330>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6613      	str	r3, [r2, #96]	; 0x60
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_GPIO_Init+0x330>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001496:	4a5a      	ldr	r2, [pc, #360]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x242>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <HAL_GPIO_Init+0x338>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x23e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <HAL_GPIO_Init+0x33c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x23a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4d      	ldr	r2, [pc, #308]	; (800160c <HAL_GPIO_Init+0x340>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x236>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <HAL_GPIO_Init+0x344>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x232>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4b      	ldr	r2, [pc, #300]	; (8001614 <HAL_GPIO_Init+0x348>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x22e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4a      	ldr	r2, [pc, #296]	; (8001618 <HAL_GPIO_Init+0x34c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x22a>
 80014f2:	2306      	movs	r3, #6
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x244>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x244>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x244>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x244>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x244>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x244>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x244>
 800150e:	2300      	movs	r3, #0
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001520:	4937      	ldr	r1, [pc, #220]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <HAL_GPIO_Init+0x350>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_GPIO_Init+0x350>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_GPIO_Init+0x350>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_GPIO_Init+0x350>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_GPIO_Init+0x350>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_GPIO_Init+0x350>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_GPIO_Init+0x350>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_GPIO_Init+0x350>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f ae78 	bne.w	80012dc <HAL_GPIO_Init+0x10>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	48000400 	.word	0x48000400
 8001608:	48000800 	.word	0x48000800
 800160c:	48000c00 	.word	0x48000c00
 8001610:	48001000 	.word	0x48001000
 8001614:	48001400 	.word	0x48001400
 8001618:	48001800 	.word	0x48001800
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_PWREx_GetVoltageRange+0x18>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40007000 	.word	0x40007000

0800163c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164a:	d130      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001658:	d038      	beq.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2232      	movs	r2, #50	; 0x32
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001680:	e002      	b.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3b01      	subs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001694:	d102      	bne.n	800169c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f2      	bne.n	8001682 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a8:	d110      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e00f      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ba:	d007      	beq.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40007000 	.word	0x40007000
 80016e0:	20000004 	.word	0x20000004
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e3ca      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fa:	4b97      	ldr	r3, [pc, #604]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001704:	4b94      	ldr	r3, [pc, #592]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80e4 	beq.w	80018e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_RCC_OscConfig+0x4a>
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	f040 808b 	bne.w	8001840 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 8087 	bne.w	8001840 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x62>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e3a2      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <HAL_RCC_OscConfig+0x7c>
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001762:	e005      	b.n	8001770 <HAL_RCC_OscConfig+0x88>
 8001764:	4b7c      	ldr	r3, [pc, #496]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001770:	4293      	cmp	r3, r2
 8001772:	d223      	bcs.n	80017bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fd55 	bl	8002228 <RCC_SetFlashLatencyFromMSIRange>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e383      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001788:	4b73      	ldr	r3, [pc, #460]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a72      	ldr	r2, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	496d      	ldr	r1, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a6:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	4968      	ldr	r1, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
 80017ba:	e025      	b.n	8001808 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4960      	ldr	r1, [pc, #384]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	495b      	ldr	r1, [pc, #364]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fd15 	bl	8002228 <RCC_SetFlashLatencyFromMSIRange>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e343      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001808:	f000 fc4a 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800180c:	4602      	mov	r2, r0
 800180e:	4b52      	ldr	r3, [pc, #328]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	4950      	ldr	r1, [pc, #320]	; (800195c <HAL_RCC_OscConfig+0x274>)
 800181a:	5ccb      	ldrb	r3, [r1, r3]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_RCC_OscConfig+0x278>)
 8001826:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001828:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <HAL_RCC_OscConfig+0x27c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fb61 	bl	8000ef4 <HAL_InitTick>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d052      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	e327      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d032      	beq.n	80018ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a42      	ldr	r2, [pc, #264]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001854:	f7ff fb9e 	bl	8000f94 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185c:	f7ff fb9a 	bl	8000f94 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e310      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a36      	ldr	r2, [pc, #216]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4931      	ldr	r1, [pc, #196]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	492c      	ldr	r1, [pc, #176]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	e01a      	b.n	80018e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a29      	ldr	r2, [pc, #164]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb6b 	bl	8000f94 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c2:	f7ff fb67 	bl	8000f94 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e2dd      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x1da>
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d074      	beq.n	80019da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x21a>
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d10e      	bne.n	800191a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d10b      	bne.n	800191a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d064      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2f0>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d160      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e2ba      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x24a>
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e026      	b.n	8001980 <HAL_RCC_OscConfig+0x298>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193a:	d115      	bne.n	8001968 <HAL_RCC_OscConfig+0x280>
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 8001942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a02      	ldr	r2, [pc, #8]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800194e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x298>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	08005474 	.word	0x08005474
 8001960:	20000004 	.word	0x20000004
 8001964:	20000008 	.word	0x20000008
 8001968:	4ba0      	ldr	r3, [pc, #640]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a9f      	ldr	r2, [pc, #636]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b9d      	ldr	r3, [pc, #628]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a9c      	ldr	r2, [pc, #624]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fb04 	bl	8000f94 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fb00 	bl	8000f94 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e276      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a2:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x2a8>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff faf0 	bl	8000f94 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff faec 	bl	8000f94 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e262      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2d0>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d060      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_OscConfig+0x310>
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d119      	bne.n	8001a26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d116      	bne.n	8001a26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f8:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x328>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e23f      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b76      	ldr	r3, [pc, #472]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	4973      	ldr	r1, [pc, #460]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a24:	e040      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d023      	beq.n	8001a76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff faab 	bl	8000f94 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff faa7 	bl	8000f94 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e21d      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	495f      	ldr	r1, [pc, #380]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e018      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff fa87 	bl	8000f94 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fa83 	bl	8000f94 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1f9      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d03c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac2:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff fa62 	bl	8000f94 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fa5e 	bl	8000f94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1d4      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ef      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x3ec>
 8001af4:	e01b      	b.n	8001b2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff fa45 	bl	8000f94 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fa41 	bl	8000f94 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1b7      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ef      	bne.n	8001b0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80a6 	beq.w	8001c88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10d      	bne.n	8001b68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_OscConfig+0x508>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d118      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x508>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x508>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa08 	bl	8000f94 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7ff fa04 	bl	8000f94 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e17a      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_RCC_OscConfig+0x508>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x4d8>
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bbe:	e029      	b.n	8001c14 <HAL_RCC_OscConfig+0x52c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d115      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x50c>
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_RCC_OscConfig+0x504>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x52c>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	4b9c      	ldr	r3, [pc, #624]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfa:	4a9b      	ldr	r2, [pc, #620]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c04:	4b98      	ldr	r3, [pc, #608]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4a97      	ldr	r2, [pc, #604]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d016      	beq.n	8001c4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f9ba 	bl	8000f94 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff f9b6 	bl	8000f94 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e12a      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ed      	beq.n	8001c24 <HAL_RCC_OscConfig+0x53c>
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f9a3 	bl	8000f94 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff f99f 	bl	8000f94 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e113      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c68:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ed      	bne.n	8001c52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7c:	4b7a      	ldr	r3, [pc, #488]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80fe 	beq.w	8001e8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	f040 80d0 	bne.w	8001e3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c9c:	4b72      	ldr	r3, [pc, #456]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d130      	bne.n	8001d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d127      	bne.n	8001d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d11f      	bne.n	8001d12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cdc:	2a07      	cmp	r2, #7
 8001cde:	bf14      	ite	ne
 8001ce0:	2201      	movne	r2, #1
 8001ce2:	2200      	moveq	r2, #0
 8001ce4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d113      	bne.n	8001d12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d06e      	beq.n	8001df0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d069      	beq.n	8001dec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0ad      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d40:	f7ff f928 	bl	8000f94 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff f924 	bl	8000f94 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e09a      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x784>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d76:	3a01      	subs	r2, #1
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d80:	0212      	lsls	r2, r2, #8
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d88:	0852      	lsrs	r2, r2, #1
 8001d8a:	3a01      	subs	r2, #1
 8001d8c:	0552      	lsls	r2, r2, #21
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d94:	0852      	lsrs	r2, r2, #1
 8001d96:	3a01      	subs	r2, #1
 8001d98:	0652      	lsls	r2, r2, #25
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da0:	0912      	lsrs	r2, r2, #4
 8001da2:	0452      	lsls	r2, r2, #17
 8001da4:	430a      	orrs	r2, r1
 8001da6:	4930      	ldr	r1, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc4:	f7ff f8e6 	bl	8000f94 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f8e2 	bl	8000f94 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e058      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dea:	e050      	b.n	8001e8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e04f      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d148      	bne.n	8001e8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e14:	f7ff f8be 	bl	8000f94 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f8ba 	bl	8000f94 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e030      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x734>
 8001e3a:	e028      	b.n	8001e8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d023      	beq.n	8001e8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_RCC_OscConfig+0x780>)
 8001e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f8a1 	bl	8000f94 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	e00c      	b.n	8001e70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f89d 	bl	8000f94 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d905      	bls.n	8001e70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_OscConfig+0x7b0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ec      	bne.n	8001e56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x7b0>)
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	4905      	ldr	r1, [pc, #20]	; (8001e98 <HAL_RCC_OscConfig+0x7b0>)
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x7b4>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
 8001e88:	e001      	b.n	8001e8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	feeefffc 	.word	0xfeeefffc

08001ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0e7      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d910      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4970      	ldr	r1, [pc, #448]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0cf      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d010      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d908      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4960      	ldr	r1, [pc, #384]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d04c      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d121      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0a6      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3e:	4b54      	ldr	r3, [pc, #336]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d115      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e09a      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e08e      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e086      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4943      	ldr	r1, [pc, #268]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f88:	f7ff f804 	bl	8000f94 <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7ff f800 	bl	8000f94 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e06e      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d208      	bcs.n	8001fe6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	492b      	ldr	r1, [pc, #172]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d210      	bcs.n	8002016 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4923      	ldr	r1, [pc, #140]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_ClockConfig+0x1ec>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e036      	b.n	8002084 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	4918      	ldr	r1, [pc, #96]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4910      	ldr	r1, [pc, #64]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002054:	f000 f824 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	490b      	ldr	r1, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x1f4>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1fc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe ff3b 	bl	8000ef4 <HAL_InitTick>
 800207e:	4603      	mov	r3, r0
 8002080:	72fb      	strb	r3, [r7, #11]

  return status;
 8002082:	7afb      	ldrb	r3, [r7, #11]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	08005474 	.word	0x08005474
 8002098:	20000004 	.word	0x20000004
 800209c:	20000008 	.word	0x20000008

080020a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ae:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b8:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x34>
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d121      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d11e      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e005      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020fc:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d102      	bne.n	800211e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e004      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d101      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002126:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d134      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d003      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0xa6>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d003      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xac>
 8002144:	e005      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002148:	617b      	str	r3, [r7, #20]
      break;
 800214a:	e005      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800214e:	617b      	str	r3, [r7, #20]
      break;
 8002150:	e002      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	617b      	str	r3, [r7, #20]
      break;
 8002156:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	3301      	adds	r3, #1
 8002164:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	fb03 f202 	mul.w	r2, r3, r2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	0e5b      	lsrs	r3, r3, #25
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	3301      	adds	r3, #1
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002198:	69bb      	ldr	r3, [r7, #24]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	0800548c 	.word	0x0800548c
 80021b0:	00f42400 	.word	0x00f42400
 80021b4:	007a1200 	.word	0x007a1200

080021b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_RCC_GetHCLKFreq+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021d4:	f7ff fff0 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4904      	ldr	r1, [pc, #16]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08005484 	.word	0x08005484

080021fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002200:	f7ff ffda 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0adb      	lsrs	r3, r3, #11
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08005484 	.word	0x08005484

08002228 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002240:	f7ff f9ee 	bl	8001620 <HAL_PWREx_GetVoltageRange>
 8002244:	6178      	str	r0, [r7, #20]
 8002246:	e014      	b.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002252:	6593      	str	r3, [r2, #88]	; 0x58
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002260:	f7ff f9de 	bl	8001620 <HAL_PWREx_GetVoltageRange>
 8002264:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002270:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002278:	d10b      	bne.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d919      	bls.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2ba0      	cmp	r3, #160	; 0xa0
 8002284:	d902      	bls.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002286:	2302      	movs	r3, #2
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	e013      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800228c:	2301      	movs	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e010      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d902      	bls.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002298:	2303      	movs	r3, #3
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e00a      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b80      	cmp	r3, #128	; 0x80
 80022a2:	d102      	bne.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a4:	2302      	movs	r3, #2
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e004      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b70      	cmp	r3, #112	; 0x70
 80022ae:	d101      	bne.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b0:	2301      	movs	r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 0207 	bic.w	r2, r3, #7
 80022bc:	4909      	ldr	r1, [pc, #36]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d001      	beq.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40022000 	.word	0x40022000

080022e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022f0:	2300      	movs	r3, #0
 80022f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022f4:	2300      	movs	r3, #0
 80022f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002300:	2b00      	cmp	r3, #0
 8002302:	d041      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002308:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800230c:	d02a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800230e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002312:	d824      	bhi.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002318:	d008      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800231a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800231e:	d81e      	bhi.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002328:	d010      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800232a:	e018      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800232c:	4b86      	ldr	r3, [pc, #536]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002338:	e015      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fabb 	bl	80028bc <RCCEx_PLLSAI1_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234a:	e00c      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3320      	adds	r3, #32
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fba6 	bl	8002aa4 <RCCEx_PLLSAI2_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800235c:	e003      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	74fb      	strb	r3, [r7, #19]
      break;
 8002362:	e000      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10b      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800236c:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237a:	4973      	ldr	r1, [pc, #460]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002382:	e001      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d041      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002398:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800239c:	d02a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800239e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a2:	d824      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023a8:	d008      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ae:	d81e      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d010      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023ba:	e018      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023bc:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a61      	ldr	r2, [pc, #388]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c8:	e015      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fa73 	bl	80028bc <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023da:	e00c      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3320      	adds	r3, #32
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fb5e 	bl	8002aa4 <RCCEx_PLLSAI2_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ec:	e003      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	74fb      	strb	r3, [r7, #19]
      break;
 80023f2:	e000      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023fc:	4b52      	ldr	r3, [pc, #328]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240a:	494f      	ldr	r1, [pc, #316]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002412:	e001      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a0 	beq.w	8002566 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002440:	4b41      	ldr	r3, [pc, #260]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a40      	ldr	r2, [pc, #256]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002458:	2301      	movs	r3, #1
 800245a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a3a      	ldr	r2, [pc, #232]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002468:	f7fe fd94 	bl	8000f94 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800246e:	e009      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fd90 	bl	8000f94 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d902      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	74fb      	strb	r3, [r7, #19]
        break;
 8002482:	e005      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ef      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d15c      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002496:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01f      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d019      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e0:	4a19      	ldr	r2, [pc, #100]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fd4f 	bl	8000f94 <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f8:	e00b      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fd4b 	bl	8000f94 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d902      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	74fb      	strb	r3, [r7, #19]
            break;
 8002510:	e006      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ec      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002536:	4904      	ldr	r1, [pc, #16]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800253e:	e009      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	74bb      	strb	r3, [r7, #18]
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002554:	7c7b      	ldrb	r3, [r7, #17]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b9e      	ldr	r3, [pc, #632]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a9d      	ldr	r2, [pc, #628]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002572:	4b98      	ldr	r3, [pc, #608]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f023 0203 	bic.w	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	4994      	ldr	r1, [pc, #592]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002594:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 020c 	bic.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	498c      	ldr	r1, [pc, #560]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b6:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4983      	ldr	r1, [pc, #524]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	497b      	ldr	r1, [pc, #492]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025fa:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	4972      	ldr	r1, [pc, #456]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800261c:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	496a      	ldr	r1, [pc, #424]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	4961      	ldr	r1, [pc, #388]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002660:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	4959      	ldr	r1, [pc, #356]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002682:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	4950      	ldr	r1, [pc, #320]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a4:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	4948      	ldr	r1, [pc, #288]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	493f      	ldr	r1, [pc, #252]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d028      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	4937      	ldr	r1, [pc, #220]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002706:	d106      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002712:	60d3      	str	r3, [r2, #12]
 8002714:	e011      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271e:	d10c      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f8c8 	bl	80028bc <RCCEx_PLLSAI1_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d028      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	491f      	ldr	r1, [pc, #124]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002764:	d106      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002770:	60d3      	str	r3, [r2, #12]
 8002772:	e011      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277c:	d10c      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f899 	bl	80028bc <RCCEx_PLLSAI1_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02b      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c2:	d109      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a02      	ldr	r2, [pc, #8]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ce:	60d3      	str	r3, [r2, #12]
 80027d0:	e014      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f867 	bl	80028bc <RCCEx_PLLSAI1_Config>
 80027ee:	4603      	mov	r3, r0
 80027f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02f      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002816:	4928      	ldr	r1, [pc, #160]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002826:	d10d      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f844 	bl	80028bc <RCCEx_PLLSAI1_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d014      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	74bb      	strb	r3, [r7, #18]
 8002842:	e011      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800284c:	d10c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3320      	adds	r3, #32
 8002852:	2102      	movs	r1, #2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f925 	bl	8002aa4 <RCCEx_PLLSAI2_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002882:	490d      	ldr	r1, [pc, #52]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a6:	4904      	ldr	r1, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ca:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d018      	beq.n	8002908 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0203 	and.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d10d      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
       ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d047      	beq.n	8002992 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e044      	b.n	8002992 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d018      	beq.n	8002942 <RCCEx_PLLSAI1_Config+0x86>
 8002910:	2b03      	cmp	r3, #3
 8002912:	d825      	bhi.n	8002960 <RCCEx_PLLSAI1_Config+0xa4>
 8002914:	2b01      	cmp	r3, #1
 8002916:	d002      	beq.n	800291e <RCCEx_PLLSAI1_Config+0x62>
 8002918:	2b02      	cmp	r3, #2
 800291a:	d009      	beq.n	8002930 <RCCEx_PLLSAI1_Config+0x74>
 800291c:	e020      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800291e:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11d      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292e:	e01a      	b.n	8002966 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002930:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d116      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002940:	e013      	b.n	800296a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002942:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10f      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800294e:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800295e:	e006      	b.n	800296e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e004      	b.n	8002970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002966:	bf00      	nop
 8002968:	e002      	b.n	8002970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002976:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	430b      	orrs	r3, r1
 800298c:	4944      	ldr	r1, [pc, #272]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d17d      	bne.n	8002a94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7fe faf6 	bl	8000f94 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029aa:	e009      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029ac:	f7fe faf2 	bl	8000f94 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	73fb      	strb	r3, [r7, #15]
        break;
 80029be:	e005      	b.n	80029cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ef      	bne.n	80029ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d160      	bne.n	8002a94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6892      	ldr	r2, [r2, #8]
 80029e8:	0211      	lsls	r1, r2, #8
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	0912      	lsrs	r2, r2, #4
 80029f0:	0452      	lsls	r2, r2, #17
 80029f2:	430a      	orrs	r2, r1
 80029f4:	492a      	ldr	r1, [pc, #168]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	610b      	str	r3, [r1, #16]
 80029fa:	e027      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d112      	bne.n	8002a28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	0211      	lsls	r1, r2, #8
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6912      	ldr	r2, [r2, #16]
 8002a18:	0852      	lsrs	r2, r2, #1
 8002a1a:	3a01      	subs	r2, #1
 8002a1c:	0552      	lsls	r2, r2, #21
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	610b      	str	r3, [r1, #16]
 8002a26:	e011      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	0211      	lsls	r1, r2, #8
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6952      	ldr	r2, [r2, #20]
 8002a3e:	0852      	lsrs	r2, r2, #1
 8002a40:	3a01      	subs	r2, #1
 8002a42:	0652      	lsls	r2, r2, #25
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fa9c 	bl	8000f94 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a5e:	e009      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a60:	f7fe fa98 	bl	8000f94 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	73fb      	strb	r3, [r7, #15]
          break;
 8002a72:	e005      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ef      	beq.n	8002a60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ad6:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d047      	beq.n	8002b7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e044      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d018      	beq.n	8002b2a <RCCEx_PLLSAI2_Config+0x86>
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d825      	bhi.n	8002b48 <RCCEx_PLLSAI2_Config+0xa4>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d002      	beq.n	8002b06 <RCCEx_PLLSAI2_Config+0x62>
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d009      	beq.n	8002b18 <RCCEx_PLLSAI2_Config+0x74>
 8002b04:	e020      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b06:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e01a      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d116      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e013      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b36:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b46:	e006      	b.n	8002b56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e004      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	430b      	orrs	r3, r1
 8002b74:	4939      	ldr	r1, [pc, #228]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d167      	bne.n	8002c50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b80:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a35      	ldr	r2, [pc, #212]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fa02 	bl	8000f94 <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b94:	f7fe f9fe 	bl	8000f94 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ef      	bne.n	8002b94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d14a      	bne.n	8002c50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d111      	bne.n	8002be4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	0211      	lsls	r1, r2, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	0912      	lsrs	r2, r2, #4
 8002bd8:	0452      	lsls	r2, r2, #17
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	491f      	ldr	r1, [pc, #124]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	614b      	str	r3, [r1, #20]
 8002be2:	e011      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6892      	ldr	r2, [r2, #8]
 8002bf4:	0211      	lsls	r1, r2, #8
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6912      	ldr	r2, [r2, #16]
 8002bfa:	0852      	lsrs	r2, r2, #1
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0652      	lsls	r2, r2, #25
 8002c00:	430a      	orrs	r2, r1
 8002c02:	4916      	ldr	r1, [pc, #88]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe f9be 	bl	8000f94 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c1a:	e009      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c1c:	f7fe f9ba 	bl	8000f94 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c2e:	e005      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ef      	beq.n	8002c1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4904      	ldr	r1, [pc, #16]	; (8002c5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e040      	b.n	8002cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd fed8 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fb2e 	bl	8003300 <UART_SetConfig>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e022      	b.n	8002cf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fdda 	bl	8003870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fe61 	bl	80039b4 <UART_CheckIdleState>
 8002cf2:	4603      	mov	r3, r0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0ba      	sub	sp, #232	; 0xe8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d26:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d115      	bne.n	8002d64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00f      	beq.n	8002d64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 82a6 	beq.w	80032a6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
      }
      return;
 8002d62:	e2a0      	b.n	80032a6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8117 	beq.w	8002f9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d7e:	4b85      	ldr	r3, [pc, #532]	; (8002f94 <HAL_UART_IRQHandler+0x298>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 810a 	beq.w	8002f9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_UART_IRQHandler+0xbc>
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d011      	beq.n	8002de8 <HAL_UART_IRQHandler+0xec>
 8002dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	f043 0204 	orr.w	r2, r3, #4
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d011      	beq.n	8002e18 <HAL_UART_IRQHandler+0x11c>
 8002df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2204      	movs	r2, #4
 8002e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d017      	beq.n	8002e54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2208      	movs	r2, #8
 8002e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	f043 0208 	orr.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d012      	beq.n	8002e86 <HAL_UART_IRQHandler+0x18a>
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 820c 	beq.w	80032aa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d005      	beq.n	8002ede <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d04f      	beq.n	8002f7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fe75 	bl	8003bce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d141      	bne.n	8002f76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1d9      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d013      	beq.n	8002f6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <HAL_UART_IRQHandler+0x29c>)
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f979 	bl	800124a <HAL_DMA_Abort_IT>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d017      	beq.n	8002f8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	e00f      	b.n	8002f8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f9b0 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	e00b      	b.n	8002f8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f9ac 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	e007      	b.n	8002f8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9a8 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002f8c:	e18d      	b.n	80032aa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8e:	bf00      	nop
    return;
 8002f90:	e18b      	b.n	80032aa <HAL_UART_IRQHandler+0x5ae>
 8002f92:	bf00      	nop
 8002f94:	04000120 	.word	0x04000120
 8002f98:	08003c95 	.word	0x08003c95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 8146 	bne.w	8003232 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 813f 	beq.w	8003232 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8138 	beq.w	8003232 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	f040 80b4 	bne.w	8003142 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fe6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 815f 	beq.w	80032ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	f080 8157 	bcs.w	80032ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 8085 	bne.w	8003126 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800304a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800305e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1da      	bne.n	800301c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3308      	adds	r3, #8
 8003086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800308a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800308e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800309c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e1      	bne.n	8003066 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3308      	adds	r3, #8
 80030c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e3      	bne.n	80030a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003108:	65bb      	str	r3, [r7, #88]	; 0x58
 800310a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800310e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e4      	bne.n	80030e6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe f854 	bl	80011ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003132:	b29b      	uxth	r3, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	b29b      	uxth	r3, r3
 8003138:	4619      	mov	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8d4 	bl	80032e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003140:	e0b5      	b.n	80032ae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800314e:	b29b      	uxth	r3, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a7 	beq.w	80032b2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a2 	beq.w	80032b2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
 8003192:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e4      	bne.n	800316e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	623b      	str	r3, [r7, #32]
   return(result);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3308      	adds	r3, #8
 80031c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031c8:	633a      	str	r2, [r7, #48]	; 0x30
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e3      	bne.n	80031a4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0310 	bic.w	r3, r3, #16
 8003202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	617b      	str	r3, [r7, #20]
   return(result);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e4      	bne.n	80031ee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f85c 	bl	80032e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003230:	e03f      	b.n	80032b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00e      	beq.n	800325c <HAL_UART_IRQHandler+0x560>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fd5d 	bl	8003d14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800325a:	e02d      	b.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01c      	beq.n	80032b6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
    }
    return;
 8003284:	e017      	b.n	80032b6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fd0e 	bl	8003cc0 <UART_EndTransmit_IT>
    return;
 80032a4:	e008      	b.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032a6:	bf00      	nop
 80032a8:	e006      	b.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80032b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032b8:	37e8      	adds	r7, #232	; 0xe8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop

080032c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b08a      	sub	sp, #40	; 0x28
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	431a      	orrs	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4313      	orrs	r3, r2
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4ba4      	ldr	r3, [pc, #656]	; (80035c0 <UART_SetConfig+0x2c0>)
 8003330:	4013      	ands	r3, r2
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003338:	430b      	orrs	r3, r1
 800333a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a99      	ldr	r2, [pc, #612]	; (80035c4 <UART_SetConfig+0x2c4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	4313      	orrs	r3, r2
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a90      	ldr	r2, [pc, #576]	; (80035c8 <UART_SetConfig+0x2c8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d126      	bne.n	80033d8 <UART_SetConfig+0xd8>
 800338a:	4b90      	ldr	r3, [pc, #576]	; (80035cc <UART_SetConfig+0x2cc>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d81b      	bhi.n	80033d0 <UART_SetConfig+0xd0>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <UART_SetConfig+0xa0>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033c1 	.word	0x080033c1
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033c9 	.word	0x080033c9
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b6:	e116      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80033b8:	2302      	movs	r3, #2
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033be:	e112      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80033c0:	2304      	movs	r3, #4
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c6:	e10e      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80033c8:	2308      	movs	r3, #8
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ce:	e10a      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80033d0:	2310      	movs	r3, #16
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e106      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a7c      	ldr	r2, [pc, #496]	; (80035d0 <UART_SetConfig+0x2d0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d138      	bne.n	8003454 <UART_SetConfig+0x154>
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <UART_SetConfig+0x2cc>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d82d      	bhi.n	800344c <UART_SetConfig+0x14c>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0xf8>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800342d 	.word	0x0800342d
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800344d 	.word	0x0800344d
 8003404:	0800344d 	.word	0x0800344d
 8003408:	0800343d 	.word	0x0800343d
 800340c:	0800344d 	.word	0x0800344d
 8003410:	0800344d 	.word	0x0800344d
 8003414:	0800344d 	.word	0x0800344d
 8003418:	08003435 	.word	0x08003435
 800341c:	0800344d 	.word	0x0800344d
 8003420:	0800344d 	.word	0x0800344d
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003445 	.word	0x08003445
 800342c:	2300      	movs	r3, #0
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003432:	e0d8      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003434:	2302      	movs	r3, #2
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343a:	e0d4      	b.n	80035e6 <UART_SetConfig+0x2e6>
 800343c:	2304      	movs	r3, #4
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003442:	e0d0      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003444:	2308      	movs	r3, #8
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e0cc      	b.n	80035e6 <UART_SetConfig+0x2e6>
 800344c:	2310      	movs	r3, #16
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e0c8      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5e      	ldr	r2, [pc, #376]	; (80035d4 <UART_SetConfig+0x2d4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d125      	bne.n	80034aa <UART_SetConfig+0x1aa>
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <UART_SetConfig+0x2cc>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003468:	2b30      	cmp	r3, #48	; 0x30
 800346a:	d016      	beq.n	800349a <UART_SetConfig+0x19a>
 800346c:	2b30      	cmp	r3, #48	; 0x30
 800346e:	d818      	bhi.n	80034a2 <UART_SetConfig+0x1a2>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d00a      	beq.n	800348a <UART_SetConfig+0x18a>
 8003474:	2b20      	cmp	r3, #32
 8003476:	d814      	bhi.n	80034a2 <UART_SetConfig+0x1a2>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <UART_SetConfig+0x182>
 800347c:	2b10      	cmp	r3, #16
 800347e:	d008      	beq.n	8003492 <UART_SetConfig+0x192>
 8003480:	e00f      	b.n	80034a2 <UART_SetConfig+0x1a2>
 8003482:	2300      	movs	r3, #0
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003488:	e0ad      	b.n	80035e6 <UART_SetConfig+0x2e6>
 800348a:	2302      	movs	r3, #2
 800348c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003490:	e0a9      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003492:	2304      	movs	r3, #4
 8003494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003498:	e0a5      	b.n	80035e6 <UART_SetConfig+0x2e6>
 800349a:	2308      	movs	r3, #8
 800349c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a0:	e0a1      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80034a2:	2310      	movs	r3, #16
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a8:	e09d      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a4a      	ldr	r2, [pc, #296]	; (80035d8 <UART_SetConfig+0x2d8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d125      	bne.n	8003500 <UART_SetConfig+0x200>
 80034b4:	4b45      	ldr	r3, [pc, #276]	; (80035cc <UART_SetConfig+0x2cc>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034be:	2bc0      	cmp	r3, #192	; 0xc0
 80034c0:	d016      	beq.n	80034f0 <UART_SetConfig+0x1f0>
 80034c2:	2bc0      	cmp	r3, #192	; 0xc0
 80034c4:	d818      	bhi.n	80034f8 <UART_SetConfig+0x1f8>
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d00a      	beq.n	80034e0 <UART_SetConfig+0x1e0>
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d814      	bhi.n	80034f8 <UART_SetConfig+0x1f8>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <UART_SetConfig+0x1d8>
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d008      	beq.n	80034e8 <UART_SetConfig+0x1e8>
 80034d6:	e00f      	b.n	80034f8 <UART_SetConfig+0x1f8>
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034de:	e082      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80034e0:	2302      	movs	r3, #2
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e6:	e07e      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80034e8:	2304      	movs	r3, #4
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e07a      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80034f0:	2308      	movs	r3, #8
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f6:	e076      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80034f8:	2310      	movs	r3, #16
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e072      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a35      	ldr	r2, [pc, #212]	; (80035dc <UART_SetConfig+0x2dc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d12a      	bne.n	8003560 <UART_SetConfig+0x260>
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <UART_SetConfig+0x2cc>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003518:	d01a      	beq.n	8003550 <UART_SetConfig+0x250>
 800351a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351e:	d81b      	bhi.n	8003558 <UART_SetConfig+0x258>
 8003520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003524:	d00c      	beq.n	8003540 <UART_SetConfig+0x240>
 8003526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352a:	d815      	bhi.n	8003558 <UART_SetConfig+0x258>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <UART_SetConfig+0x238>
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d008      	beq.n	8003548 <UART_SetConfig+0x248>
 8003536:	e00f      	b.n	8003558 <UART_SetConfig+0x258>
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353e:	e052      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003540:	2302      	movs	r3, #2
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003546:	e04e      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003548:	2304      	movs	r3, #4
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354e:	e04a      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003550:	2308      	movs	r3, #8
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003556:	e046      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003558:	2310      	movs	r3, #16
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355e:	e042      	b.n	80035e6 <UART_SetConfig+0x2e6>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <UART_SetConfig+0x2c4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d13a      	bne.n	80035e0 <UART_SetConfig+0x2e0>
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <UART_SetConfig+0x2cc>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003578:	d01a      	beq.n	80035b0 <UART_SetConfig+0x2b0>
 800357a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357e:	d81b      	bhi.n	80035b8 <UART_SetConfig+0x2b8>
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d00c      	beq.n	80035a0 <UART_SetConfig+0x2a0>
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d815      	bhi.n	80035b8 <UART_SetConfig+0x2b8>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <UART_SetConfig+0x298>
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d008      	beq.n	80035a8 <UART_SetConfig+0x2a8>
 8003596:	e00f      	b.n	80035b8 <UART_SetConfig+0x2b8>
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	e022      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80035a0:	2302      	movs	r3, #2
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a6:	e01e      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80035a8:	2304      	movs	r3, #4
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e01a      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80035b0:	2308      	movs	r3, #8
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e016      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80035b8:	2310      	movs	r3, #16
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e012      	b.n	80035e6 <UART_SetConfig+0x2e6>
 80035c0:	efff69f3 	.word	0xefff69f3
 80035c4:	40008000 	.word	0x40008000
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40004400 	.word	0x40004400
 80035d4:	40004800 	.word	0x40004800
 80035d8:	40004c00 	.word	0x40004c00
 80035dc:	40005000 	.word	0x40005000
 80035e0:	2310      	movs	r3, #16
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a9f      	ldr	r2, [pc, #636]	; (8003868 <UART_SetConfig+0x568>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d17a      	bne.n	80036e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d824      	bhi.n	8003642 <UART_SetConfig+0x342>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <UART_SetConfig+0x300>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003625 	.word	0x08003625
 8003604:	08003643 	.word	0x08003643
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003643 	.word	0x08003643
 8003610:	08003633 	.word	0x08003633
 8003614:	08003643 	.word	0x08003643
 8003618:	08003643 	.word	0x08003643
 800361c:	08003643 	.word	0x08003643
 8003620:	0800363b 	.word	0x0800363b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7fe fdd4 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8003628:	61f8      	str	r0, [r7, #28]
        break;
 800362a:	e010      	b.n	800364e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <UART_SetConfig+0x56c>)
 800362e:	61fb      	str	r3, [r7, #28]
        break;
 8003630:	e00d      	b.n	800364e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003632:	f7fe fd35 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 8003636:	61f8      	str	r0, [r7, #28]
        break;
 8003638:	e009      	b.n	800364e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363e:	61fb      	str	r3, [r7, #28]
        break;
 8003640:	e005      	b.n	800364e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800364c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80fb 	beq.w	800384c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	429a      	cmp	r2, r3
 8003664:	d305      	bcc.n	8003672 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	429a      	cmp	r2, r3
 8003670:	d903      	bls.n	800367a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003678:	e0e8      	b.n	800384c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	2200      	movs	r2, #0
 800367e:	461c      	mov	r4, r3
 8003680:	4615      	mov	r5, r2
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	022b      	lsls	r3, r5, #8
 800368c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003690:	0222      	lsls	r2, r4, #8
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	6849      	ldr	r1, [r1, #4]
 8003696:	0849      	lsrs	r1, r1, #1
 8003698:	2000      	movs	r0, #0
 800369a:	4688      	mov	r8, r1
 800369c:	4681      	mov	r9, r0
 800369e:	eb12 0a08 	adds.w	sl, r2, r8
 80036a2:	eb43 0b09 	adc.w	fp, r3, r9
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036b4:	4650      	mov	r0, sl
 80036b6:	4659      	mov	r1, fp
 80036b8:	f7fc fde2 	bl	8000280 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ca:	d308      	bcc.n	80036de <UART_SetConfig+0x3de>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d2:	d204      	bcs.n	80036de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e0b6      	b.n	800384c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036e4:	e0b2      	b.n	800384c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ee:	d15e      	bne.n	80037ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d828      	bhi.n	800374a <UART_SetConfig+0x44a>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0x400>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003725 	.word	0x08003725
 8003704:	0800372d 	.word	0x0800372d
 8003708:	08003735 	.word	0x08003735
 800370c:	0800374b 	.word	0x0800374b
 8003710:	0800373b 	.word	0x0800373b
 8003714:	0800374b 	.word	0x0800374b
 8003718:	0800374b 	.word	0x0800374b
 800371c:	0800374b 	.word	0x0800374b
 8003720:	08003743 	.word	0x08003743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003724:	f7fe fd54 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8003728:	61f8      	str	r0, [r7, #28]
        break;
 800372a:	e014      	b.n	8003756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7fe fd66 	bl	80021fc <HAL_RCC_GetPCLK2Freq>
 8003730:	61f8      	str	r0, [r7, #28]
        break;
 8003732:	e010      	b.n	8003756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003734:	4b4d      	ldr	r3, [pc, #308]	; (800386c <UART_SetConfig+0x56c>)
 8003736:	61fb      	str	r3, [r7, #28]
        break;
 8003738:	e00d      	b.n	8003756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373a:	f7fe fcb1 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800373e:	61f8      	str	r0, [r7, #28]
        break;
 8003740:	e009      	b.n	8003756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003746:	61fb      	str	r3, [r7, #28]
        break;
 8003748:	e005      	b.n	8003756 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d077      	beq.n	800384c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005a      	lsls	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	441a      	add	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b0f      	cmp	r3, #15
 8003776:	d916      	bls.n	80037a6 <UART_SetConfig+0x4a6>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377e:	d212      	bcs.n	80037a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f023 030f 	bic.w	r3, r3, #15
 8003788:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	b29b      	uxth	r3, r3
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	b29a      	uxth	r2, r3
 8003796:	8afb      	ldrh	r3, [r7, #22]
 8003798:	4313      	orrs	r3, r2
 800379a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	8afa      	ldrh	r2, [r7, #22]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e052      	b.n	800384c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037ac:	e04e      	b.n	800384c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d827      	bhi.n	8003806 <UART_SetConfig+0x506>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x4bc>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e9 	.word	0x080037e9
 80037c4:	080037f1 	.word	0x080037f1
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f7 	.word	0x080037f7
 80037d0:	08003807 	.word	0x08003807
 80037d4:	08003807 	.word	0x08003807
 80037d8:	08003807 	.word	0x08003807
 80037dc:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe fcf6 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 80037e4:	61f8      	str	r0, [r7, #28]
        break;
 80037e6:	e014      	b.n	8003812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fd08 	bl	80021fc <HAL_RCC_GetPCLK2Freq>
 80037ec:	61f8      	str	r0, [r7, #28]
        break;
 80037ee:	e010      	b.n	8003812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <UART_SetConfig+0x56c>)
 80037f2:	61fb      	str	r3, [r7, #28]
        break;
 80037f4:	e00d      	b.n	8003812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fc53 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 80037fa:	61f8      	str	r0, [r7, #28]
        break;
 80037fc:	e009      	b.n	8003812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	61fb      	str	r3, [r7, #28]
        break;
 8003804:	e005      	b.n	8003812 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003810:	bf00      	nop
    }

    if (pclk != 0U)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d019      	beq.n	800384c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	085a      	lsrs	r2, r3, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	d909      	bls.n	8003846 <UART_SetConfig+0x546>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d205      	bcs.n	8003846 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e002      	b.n	800384c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003858:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003866:	bf00      	nop
 8003868:	40008000 	.word	0x40008000
 800386c:	00f42400 	.word	0x00f42400

08003870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01a      	beq.n	8003986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396e:	d10a      	bne.n	8003986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039c4:	f7fd fae6 	bl	8000f94 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d10e      	bne.n	80039f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f82d 	bl	8003a46 <UART_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e023      	b.n	8003a3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d10e      	bne.n	8003a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f817 	bl	8003a46 <UART_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e00d      	b.n	8003a3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b09c      	sub	sp, #112	; 0x70
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a56:	e0a5      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5e:	f000 80a1 	beq.w	8003ba4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fd fa97 	bl	8000f94 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d13e      	bne.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e6      	bne.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003acc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e5      	bne.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e067      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d04f      	beq.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b12:	d147      	bne.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e6      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3308      	adds	r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b70:	623a      	str	r2, [r7, #32]
 8003b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	69f9      	ldr	r1, [r7, #28]
 8003b76:	6a3a      	ldr	r2, [r7, #32]
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e5      	bne.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e010      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f43f af4a 	beq.w	8003a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3770      	adds	r7, #112	; 0x70
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b095      	sub	sp, #84	; 0x54
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e5      	bne.n	8003c08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d118      	bne.n	8003c76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f023 0310 	bic.w	r3, r3, #16
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c88:	bf00      	nop
 8003c8a:	3754      	adds	r7, #84	; 0x54
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff fb0e 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e6      	bne.n	8003cc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fada 	bl	80032c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0c:	bf00      	nop
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <__errno>:
 8003d28:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <__errno+0x8>)
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000010 	.word	0x20000010

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f001 fb24 	bl	8005394 <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08005578 	.word	0x08005578
 8003d70:	08005578 	.word	0x08005578
 8003d74:	08005578 	.word	0x08005578
 8003d78:	0800557c 	.word	0x0800557c

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <iprintf>:
 8003d8c:	b40f      	push	{r0, r1, r2, r3}
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <iprintf+0x2c>)
 8003d90:	b513      	push	{r0, r1, r4, lr}
 8003d92:	681c      	ldr	r4, [r3, #0]
 8003d94:	b124      	cbz	r4, 8003da0 <iprintf+0x14>
 8003d96:	69a3      	ldr	r3, [r4, #24]
 8003d98:	b913      	cbnz	r3, 8003da0 <iprintf+0x14>
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 fa74 	bl	8004288 <__sinit>
 8003da0:	ab05      	add	r3, sp, #20
 8003da2:	9a04      	ldr	r2, [sp, #16]
 8003da4:	68a1      	ldr	r1, [r4, #8]
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 fc7d 	bl	80046a8 <_vfiprintf_r>
 8003dae:	b002      	add	sp, #8
 8003db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db4:	b004      	add	sp, #16
 8003db6:	4770      	bx	lr
 8003db8:	20000010 	.word	0x20000010

08003dbc <putchar>:
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <putchar+0x28>)
 8003dbe:	b513      	push	{r0, r1, r4, lr}
 8003dc0:	681c      	ldr	r4, [r3, #0]
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	b134      	cbz	r4, 8003dd4 <putchar+0x18>
 8003dc6:	69a3      	ldr	r3, [r4, #24]
 8003dc8:	b923      	cbnz	r3, 8003dd4 <putchar+0x18>
 8003dca:	9001      	str	r0, [sp, #4]
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f000 fa5b 	bl	8004288 <__sinit>
 8003dd2:	9901      	ldr	r1, [sp, #4]
 8003dd4:	68a2      	ldr	r2, [r4, #8]
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	b002      	add	sp, #8
 8003dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dde:	f000 bf27 	b.w	8004c30 <_putc_r>
 8003de2:	bf00      	nop
 8003de4:	20000010 	.word	0x20000010

08003de8 <_puts_r>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	460e      	mov	r6, r1
 8003dec:	4605      	mov	r5, r0
 8003dee:	b118      	cbz	r0, 8003df8 <_puts_r+0x10>
 8003df0:	6983      	ldr	r3, [r0, #24]
 8003df2:	b90b      	cbnz	r3, 8003df8 <_puts_r+0x10>
 8003df4:	f000 fa48 	bl	8004288 <__sinit>
 8003df8:	69ab      	ldr	r3, [r5, #24]
 8003dfa:	68ac      	ldr	r4, [r5, #8]
 8003dfc:	b913      	cbnz	r3, 8003e04 <_puts_r+0x1c>
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 fa42 	bl	8004288 <__sinit>
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <_puts_r+0xd0>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d120      	bne.n	8003e4c <_puts_r+0x64>
 8003e0a:	686c      	ldr	r4, [r5, #4]
 8003e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e0e:	07db      	lsls	r3, r3, #31
 8003e10:	d405      	bmi.n	8003e1e <_puts_r+0x36>
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	0598      	lsls	r0, r3, #22
 8003e16:	d402      	bmi.n	8003e1e <_puts_r+0x36>
 8003e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1a:	f000 fad3 	bl	80043c4 <__retarget_lock_acquire_recursive>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	0719      	lsls	r1, r3, #28
 8003e22:	d51d      	bpl.n	8003e60 <_puts_r+0x78>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	b1db      	cbz	r3, 8003e60 <_puts_r+0x78>
 8003e28:	3e01      	subs	r6, #1
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60a3      	str	r3, [r4, #8]
 8003e34:	bb39      	cbnz	r1, 8003e86 <_puts_r+0x9e>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da38      	bge.n	8003eac <_puts_r+0xc4>
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	210a      	movs	r1, #10
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f848 	bl	8003ed4 <__swbuf_r>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d011      	beq.n	8003e6c <_puts_r+0x84>
 8003e48:	250a      	movs	r5, #10
 8003e4a:	e011      	b.n	8003e70 <_puts_r+0x88>
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <_puts_r+0xd4>)
 8003e4e:	429c      	cmp	r4, r3
 8003e50:	d101      	bne.n	8003e56 <_puts_r+0x6e>
 8003e52:	68ac      	ldr	r4, [r5, #8]
 8003e54:	e7da      	b.n	8003e0c <_puts_r+0x24>
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <_puts_r+0xd8>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	bf08      	it	eq
 8003e5c:	68ec      	ldreq	r4, [r5, #12]
 8003e5e:	e7d5      	b.n	8003e0c <_puts_r+0x24>
 8003e60:	4621      	mov	r1, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f888 	bl	8003f78 <__swsetup_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d0dd      	beq.n	8003e28 <_puts_r+0x40>
 8003e6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e72:	07da      	lsls	r2, r3, #31
 8003e74:	d405      	bmi.n	8003e82 <_puts_r+0x9a>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	059b      	lsls	r3, r3, #22
 8003e7a:	d402      	bmi.n	8003e82 <_puts_r+0x9a>
 8003e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7e:	f000 faa2 	bl	80043c6 <__retarget_lock_release_recursive>
 8003e82:	4628      	mov	r0, r5
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da04      	bge.n	8003e94 <_puts_r+0xac>
 8003e8a:	69a2      	ldr	r2, [r4, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	dc06      	bgt.n	8003e9e <_puts_r+0xb6>
 8003e90:	290a      	cmp	r1, #10
 8003e92:	d004      	beq.n	8003e9e <_puts_r+0xb6>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	7019      	strb	r1, [r3, #0]
 8003e9c:	e7c5      	b.n	8003e2a <_puts_r+0x42>
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f000 f817 	bl	8003ed4 <__swbuf_r>
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d1bf      	bne.n	8003e2a <_puts_r+0x42>
 8003eaa:	e7df      	b.n	8003e6c <_puts_r+0x84>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	250a      	movs	r5, #10
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	6022      	str	r2, [r4, #0]
 8003eb4:	701d      	strb	r5, [r3, #0]
 8003eb6:	e7db      	b.n	8003e70 <_puts_r+0x88>
 8003eb8:	080054e0 	.word	0x080054e0
 8003ebc:	08005500 	.word	0x08005500
 8003ec0:	080054c0 	.word	0x080054c0

08003ec4 <puts>:
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <puts+0xc>)
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f7ff bf8d 	b.w	8003de8 <_puts_r>
 8003ece:	bf00      	nop
 8003ed0:	20000010 	.word	0x20000010

08003ed4 <__swbuf_r>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	460e      	mov	r6, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	4605      	mov	r5, r0
 8003edc:	b118      	cbz	r0, 8003ee6 <__swbuf_r+0x12>
 8003ede:	6983      	ldr	r3, [r0, #24]
 8003ee0:	b90b      	cbnz	r3, 8003ee6 <__swbuf_r+0x12>
 8003ee2:	f000 f9d1 	bl	8004288 <__sinit>
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <__swbuf_r+0x98>)
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	d12b      	bne.n	8003f44 <__swbuf_r+0x70>
 8003eec:	686c      	ldr	r4, [r5, #4]
 8003eee:	69a3      	ldr	r3, [r4, #24]
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	071a      	lsls	r2, r3, #28
 8003ef6:	d52f      	bpl.n	8003f58 <__swbuf_r+0x84>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b36b      	cbz	r3, 8003f58 <__swbuf_r+0x84>
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	1ac0      	subs	r0, r0, r3
 8003f02:	6963      	ldr	r3, [r4, #20]
 8003f04:	b2f6      	uxtb	r6, r6
 8003f06:	4283      	cmp	r3, r0
 8003f08:	4637      	mov	r7, r6
 8003f0a:	dc04      	bgt.n	8003f16 <__swbuf_r+0x42>
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f926 	bl	8004160 <_fflush_r>
 8003f14:	bb30      	cbnz	r0, 8003f64 <__swbuf_r+0x90>
 8003f16:	68a3      	ldr	r3, [r4, #8]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60a3      	str	r3, [r4, #8]
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	701e      	strb	r6, [r3, #0]
 8003f24:	6963      	ldr	r3, [r4, #20]
 8003f26:	3001      	adds	r0, #1
 8003f28:	4283      	cmp	r3, r0
 8003f2a:	d004      	beq.n	8003f36 <__swbuf_r+0x62>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	07db      	lsls	r3, r3, #31
 8003f30:	d506      	bpl.n	8003f40 <__swbuf_r+0x6c>
 8003f32:	2e0a      	cmp	r6, #10
 8003f34:	d104      	bne.n	8003f40 <__swbuf_r+0x6c>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 f911 	bl	8004160 <_fflush_r>
 8003f3e:	b988      	cbnz	r0, 8003f64 <__swbuf_r+0x90>
 8003f40:	4638      	mov	r0, r7
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <__swbuf_r+0x9c>)
 8003f46:	429c      	cmp	r4, r3
 8003f48:	d101      	bne.n	8003f4e <__swbuf_r+0x7a>
 8003f4a:	68ac      	ldr	r4, [r5, #8]
 8003f4c:	e7cf      	b.n	8003eee <__swbuf_r+0x1a>
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <__swbuf_r+0xa0>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	bf08      	it	eq
 8003f54:	68ec      	ldreq	r4, [r5, #12]
 8003f56:	e7ca      	b.n	8003eee <__swbuf_r+0x1a>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 f80c 	bl	8003f78 <__swsetup_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0cb      	beq.n	8003efc <__swbuf_r+0x28>
 8003f64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f68:	e7ea      	b.n	8003f40 <__swbuf_r+0x6c>
 8003f6a:	bf00      	nop
 8003f6c:	080054e0 	.word	0x080054e0
 8003f70:	08005500 	.word	0x08005500
 8003f74:	080054c0 	.word	0x080054c0

08003f78 <__swsetup_r>:
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <__swsetup_r+0xcc>)
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	b125      	cbz	r5, 8003f8e <__swsetup_r+0x16>
 8003f84:	69ab      	ldr	r3, [r5, #24]
 8003f86:	b913      	cbnz	r3, 8003f8e <__swsetup_r+0x16>
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f97d 	bl	8004288 <__sinit>
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <__swsetup_r+0xd0>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d10f      	bne.n	8003fb4 <__swsetup_r+0x3c>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f9c:	0719      	lsls	r1, r3, #28
 8003f9e:	d42c      	bmi.n	8003ffa <__swsetup_r+0x82>
 8003fa0:	06dd      	lsls	r5, r3, #27
 8003fa2:	d411      	bmi.n	8003fc8 <__swsetup_r+0x50>
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb2:	e03e      	b.n	8004032 <__swsetup_r+0xba>
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <__swsetup_r+0xd4>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d101      	bne.n	8003fbe <__swsetup_r+0x46>
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	e7eb      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <__swsetup_r+0xd8>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	bf08      	it	eq
 8003fc4:	68ec      	ldreq	r4, [r5, #12]
 8003fc6:	e7e6      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fc8:	0758      	lsls	r0, r3, #29
 8003fca:	d512      	bpl.n	8003ff2 <__swsetup_r+0x7a>
 8003fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fce:	b141      	cbz	r1, 8003fe2 <__swsetup_r+0x6a>
 8003fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d002      	beq.n	8003fde <__swsetup_r+0x66>
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 fa5b 	bl	8004494 <_free_r>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	6063      	str	r3, [r4, #4]
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	b94b      	cbnz	r3, 8004012 <__swsetup_r+0x9a>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d003      	beq.n	8004012 <__swsetup_r+0x9a>
 800400a:	4621      	mov	r1, r4
 800400c:	4630      	mov	r0, r6
 800400e:	f000 fa01 	bl	8004414 <__smakebuf_r>
 8004012:	89a0      	ldrh	r0, [r4, #12]
 8004014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004018:	f010 0301 	ands.w	r3, r0, #1
 800401c:	d00a      	beq.n	8004034 <__swsetup_r+0xbc>
 800401e:	2300      	movs	r3, #0
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6963      	ldr	r3, [r4, #20]
 8004024:	425b      	negs	r3, r3
 8004026:	61a3      	str	r3, [r4, #24]
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	b943      	cbnz	r3, 800403e <__swsetup_r+0xc6>
 800402c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004030:	d1ba      	bne.n	8003fa8 <__swsetup_r+0x30>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	0781      	lsls	r1, r0, #30
 8004036:	bf58      	it	pl
 8004038:	6963      	ldrpl	r3, [r4, #20]
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	e7f4      	b.n	8004028 <__swsetup_r+0xb0>
 800403e:	2000      	movs	r0, #0
 8004040:	e7f7      	b.n	8004032 <__swsetup_r+0xba>
 8004042:	bf00      	nop
 8004044:	20000010 	.word	0x20000010
 8004048:	080054e0 	.word	0x080054e0
 800404c:	08005500 	.word	0x08005500
 8004050:	080054c0 	.word	0x080054c0

08004054 <__sflush_r>:
 8004054:	898a      	ldrh	r2, [r1, #12]
 8004056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405a:	4605      	mov	r5, r0
 800405c:	0710      	lsls	r0, r2, #28
 800405e:	460c      	mov	r4, r1
 8004060:	d458      	bmi.n	8004114 <__sflush_r+0xc0>
 8004062:	684b      	ldr	r3, [r1, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dc05      	bgt.n	8004074 <__sflush_r+0x20>
 8004068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	dc02      	bgt.n	8004074 <__sflush_r+0x20>
 800406e:	2000      	movs	r0, #0
 8004070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004076:	2e00      	cmp	r6, #0
 8004078:	d0f9      	beq.n	800406e <__sflush_r+0x1a>
 800407a:	2300      	movs	r3, #0
 800407c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004080:	682f      	ldr	r7, [r5, #0]
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	d032      	beq.n	80040ec <__sflush_r+0x98>
 8004086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	075a      	lsls	r2, r3, #29
 800408c:	d505      	bpl.n	800409a <__sflush_r+0x46>
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	1ac0      	subs	r0, r0, r3
 8004092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004094:	b10b      	cbz	r3, 800409a <__sflush_r+0x46>
 8004096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004098:	1ac0      	subs	r0, r0, r3
 800409a:	2300      	movs	r3, #0
 800409c:	4602      	mov	r2, r0
 800409e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040a0:	6a21      	ldr	r1, [r4, #32]
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b0      	blx	r6
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	d106      	bne.n	80040ba <__sflush_r+0x66>
 80040ac:	6829      	ldr	r1, [r5, #0]
 80040ae:	291d      	cmp	r1, #29
 80040b0:	d82c      	bhi.n	800410c <__sflush_r+0xb8>
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <__sflush_r+0x108>)
 80040b4:	40ca      	lsrs	r2, r1
 80040b6:	07d6      	lsls	r6, r2, #31
 80040b8:	d528      	bpl.n	800410c <__sflush_r+0xb8>
 80040ba:	2200      	movs	r2, #0
 80040bc:	6062      	str	r2, [r4, #4]
 80040be:	04d9      	lsls	r1, r3, #19
 80040c0:	6922      	ldr	r2, [r4, #16]
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	d504      	bpl.n	80040d0 <__sflush_r+0x7c>
 80040c6:	1c42      	adds	r2, r0, #1
 80040c8:	d101      	bne.n	80040ce <__sflush_r+0x7a>
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	b903      	cbnz	r3, 80040d0 <__sflush_r+0x7c>
 80040ce:	6560      	str	r0, [r4, #84]	; 0x54
 80040d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d2:	602f      	str	r7, [r5, #0]
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d0ca      	beq.n	800406e <__sflush_r+0x1a>
 80040d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040dc:	4299      	cmp	r1, r3
 80040de:	d002      	beq.n	80040e6 <__sflush_r+0x92>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f9d7 	bl	8004494 <_free_r>
 80040e6:	2000      	movs	r0, #0
 80040e8:	6360      	str	r0, [r4, #52]	; 0x34
 80040ea:	e7c1      	b.n	8004070 <__sflush_r+0x1c>
 80040ec:	6a21      	ldr	r1, [r4, #32]
 80040ee:	2301      	movs	r3, #1
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b0      	blx	r6
 80040f4:	1c41      	adds	r1, r0, #1
 80040f6:	d1c7      	bne.n	8004088 <__sflush_r+0x34>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0c4      	beq.n	8004088 <__sflush_r+0x34>
 80040fe:	2b1d      	cmp	r3, #29
 8004100:	d001      	beq.n	8004106 <__sflush_r+0xb2>
 8004102:	2b16      	cmp	r3, #22
 8004104:	d101      	bne.n	800410a <__sflush_r+0xb6>
 8004106:	602f      	str	r7, [r5, #0]
 8004108:	e7b1      	b.n	800406e <__sflush_r+0x1a>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	e7ad      	b.n	8004070 <__sflush_r+0x1c>
 8004114:	690f      	ldr	r7, [r1, #16]
 8004116:	2f00      	cmp	r7, #0
 8004118:	d0a9      	beq.n	800406e <__sflush_r+0x1a>
 800411a:	0793      	lsls	r3, r2, #30
 800411c:	680e      	ldr	r6, [r1, #0]
 800411e:	bf08      	it	eq
 8004120:	694b      	ldreq	r3, [r1, #20]
 8004122:	600f      	str	r7, [r1, #0]
 8004124:	bf18      	it	ne
 8004126:	2300      	movne	r3, #0
 8004128:	eba6 0807 	sub.w	r8, r6, r7
 800412c:	608b      	str	r3, [r1, #8]
 800412e:	f1b8 0f00 	cmp.w	r8, #0
 8004132:	dd9c      	ble.n	800406e <__sflush_r+0x1a>
 8004134:	6a21      	ldr	r1, [r4, #32]
 8004136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004138:	4643      	mov	r3, r8
 800413a:	463a      	mov	r2, r7
 800413c:	4628      	mov	r0, r5
 800413e:	47b0      	blx	r6
 8004140:	2800      	cmp	r0, #0
 8004142:	dc06      	bgt.n	8004152 <__sflush_r+0xfe>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004150:	e78e      	b.n	8004070 <__sflush_r+0x1c>
 8004152:	4407      	add	r7, r0
 8004154:	eba8 0800 	sub.w	r8, r8, r0
 8004158:	e7e9      	b.n	800412e <__sflush_r+0xda>
 800415a:	bf00      	nop
 800415c:	20400001 	.word	0x20400001

08004160 <_fflush_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	690b      	ldr	r3, [r1, #16]
 8004164:	4605      	mov	r5, r0
 8004166:	460c      	mov	r4, r1
 8004168:	b913      	cbnz	r3, 8004170 <_fflush_r+0x10>
 800416a:	2500      	movs	r5, #0
 800416c:	4628      	mov	r0, r5
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	b118      	cbz	r0, 800417a <_fflush_r+0x1a>
 8004172:	6983      	ldr	r3, [r0, #24]
 8004174:	b90b      	cbnz	r3, 800417a <_fflush_r+0x1a>
 8004176:	f000 f887 	bl	8004288 <__sinit>
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <_fflush_r+0x6c>)
 800417c:	429c      	cmp	r4, r3
 800417e:	d11b      	bne.n	80041b8 <_fflush_r+0x58>
 8004180:	686c      	ldr	r4, [r5, #4]
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ef      	beq.n	800416a <_fflush_r+0xa>
 800418a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800418c:	07d0      	lsls	r0, r2, #31
 800418e:	d404      	bmi.n	800419a <_fflush_r+0x3a>
 8004190:	0599      	lsls	r1, r3, #22
 8004192:	d402      	bmi.n	800419a <_fflush_r+0x3a>
 8004194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004196:	f000 f915 	bl	80043c4 <__retarget_lock_acquire_recursive>
 800419a:	4628      	mov	r0, r5
 800419c:	4621      	mov	r1, r4
 800419e:	f7ff ff59 	bl	8004054 <__sflush_r>
 80041a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a4:	07da      	lsls	r2, r3, #31
 80041a6:	4605      	mov	r5, r0
 80041a8:	d4e0      	bmi.n	800416c <_fflush_r+0xc>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	059b      	lsls	r3, r3, #22
 80041ae:	d4dd      	bmi.n	800416c <_fflush_r+0xc>
 80041b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b2:	f000 f908 	bl	80043c6 <__retarget_lock_release_recursive>
 80041b6:	e7d9      	b.n	800416c <_fflush_r+0xc>
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <_fflush_r+0x70>)
 80041ba:	429c      	cmp	r4, r3
 80041bc:	d101      	bne.n	80041c2 <_fflush_r+0x62>
 80041be:	68ac      	ldr	r4, [r5, #8]
 80041c0:	e7df      	b.n	8004182 <_fflush_r+0x22>
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <_fflush_r+0x74>)
 80041c4:	429c      	cmp	r4, r3
 80041c6:	bf08      	it	eq
 80041c8:	68ec      	ldreq	r4, [r5, #12]
 80041ca:	e7da      	b.n	8004182 <_fflush_r+0x22>
 80041cc:	080054e0 	.word	0x080054e0
 80041d0:	08005500 	.word	0x08005500
 80041d4:	080054c0 	.word	0x080054c0

080041d8 <std>:
 80041d8:	2300      	movs	r3, #0
 80041da:	b510      	push	{r4, lr}
 80041dc:	4604      	mov	r4, r0
 80041de:	e9c0 3300 	strd	r3, r3, [r0]
 80041e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041e6:	6083      	str	r3, [r0, #8]
 80041e8:	8181      	strh	r1, [r0, #12]
 80041ea:	6643      	str	r3, [r0, #100]	; 0x64
 80041ec:	81c2      	strh	r2, [r0, #14]
 80041ee:	6183      	str	r3, [r0, #24]
 80041f0:	4619      	mov	r1, r3
 80041f2:	2208      	movs	r2, #8
 80041f4:	305c      	adds	r0, #92	; 0x5c
 80041f6:	f7ff fdc1 	bl	8003d7c <memset>
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <std+0x38>)
 80041fc:	6263      	str	r3, [r4, #36]	; 0x24
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <std+0x3c>)
 8004200:	62a3      	str	r3, [r4, #40]	; 0x28
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <std+0x40>)
 8004204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <std+0x44>)
 8004208:	6224      	str	r4, [r4, #32]
 800420a:	6323      	str	r3, [r4, #48]	; 0x30
 800420c:	bd10      	pop	{r4, pc}
 800420e:	bf00      	nop
 8004210:	08004ce1 	.word	0x08004ce1
 8004214:	08004d03 	.word	0x08004d03
 8004218:	08004d3b 	.word	0x08004d3b
 800421c:	08004d5f 	.word	0x08004d5f

08004220 <_cleanup_r>:
 8004220:	4901      	ldr	r1, [pc, #4]	; (8004228 <_cleanup_r+0x8>)
 8004222:	f000 b8af 	b.w	8004384 <_fwalk_reent>
 8004226:	bf00      	nop
 8004228:	08004161 	.word	0x08004161

0800422c <__sfmoreglue>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	2268      	movs	r2, #104	; 0x68
 8004230:	1e4d      	subs	r5, r1, #1
 8004232:	4355      	muls	r5, r2
 8004234:	460e      	mov	r6, r1
 8004236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800423a:	f000 f997 	bl	800456c <_malloc_r>
 800423e:	4604      	mov	r4, r0
 8004240:	b140      	cbz	r0, 8004254 <__sfmoreglue+0x28>
 8004242:	2100      	movs	r1, #0
 8004244:	e9c0 1600 	strd	r1, r6, [r0]
 8004248:	300c      	adds	r0, #12
 800424a:	60a0      	str	r0, [r4, #8]
 800424c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004250:	f7ff fd94 	bl	8003d7c <memset>
 8004254:	4620      	mov	r0, r4
 8004256:	bd70      	pop	{r4, r5, r6, pc}

08004258 <__sfp_lock_acquire>:
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <__sfp_lock_acquire+0x8>)
 800425a:	f000 b8b3 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 800425e:	bf00      	nop
 8004260:	20000139 	.word	0x20000139

08004264 <__sfp_lock_release>:
 8004264:	4801      	ldr	r0, [pc, #4]	; (800426c <__sfp_lock_release+0x8>)
 8004266:	f000 b8ae 	b.w	80043c6 <__retarget_lock_release_recursive>
 800426a:	bf00      	nop
 800426c:	20000139 	.word	0x20000139

08004270 <__sinit_lock_acquire>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__sinit_lock_acquire+0x8>)
 8004272:	f000 b8a7 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	2000013a 	.word	0x2000013a

0800427c <__sinit_lock_release>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <__sinit_lock_release+0x8>)
 800427e:	f000 b8a2 	b.w	80043c6 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	2000013a 	.word	0x2000013a

08004288 <__sinit>:
 8004288:	b510      	push	{r4, lr}
 800428a:	4604      	mov	r4, r0
 800428c:	f7ff fff0 	bl	8004270 <__sinit_lock_acquire>
 8004290:	69a3      	ldr	r3, [r4, #24]
 8004292:	b11b      	cbz	r3, 800429c <__sinit+0x14>
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f7ff bff0 	b.w	800427c <__sinit_lock_release>
 800429c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042a0:	6523      	str	r3, [r4, #80]	; 0x50
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <__sinit+0x68>)
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <__sinit+0x6c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	bf04      	itt	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	61a3      	streq	r3, [r4, #24]
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 f820 	bl	80042f8 <__sfp>
 80042b8:	6060      	str	r0, [r4, #4]
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 f81c 	bl	80042f8 <__sfp>
 80042c0:	60a0      	str	r0, [r4, #8]
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 f818 	bl	80042f8 <__sfp>
 80042c8:	2200      	movs	r2, #0
 80042ca:	60e0      	str	r0, [r4, #12]
 80042cc:	2104      	movs	r1, #4
 80042ce:	6860      	ldr	r0, [r4, #4]
 80042d0:	f7ff ff82 	bl	80041d8 <std>
 80042d4:	68a0      	ldr	r0, [r4, #8]
 80042d6:	2201      	movs	r2, #1
 80042d8:	2109      	movs	r1, #9
 80042da:	f7ff ff7d 	bl	80041d8 <std>
 80042de:	68e0      	ldr	r0, [r4, #12]
 80042e0:	2202      	movs	r2, #2
 80042e2:	2112      	movs	r1, #18
 80042e4:	f7ff ff78 	bl	80041d8 <std>
 80042e8:	2301      	movs	r3, #1
 80042ea:	61a3      	str	r3, [r4, #24]
 80042ec:	e7d2      	b.n	8004294 <__sinit+0xc>
 80042ee:	bf00      	nop
 80042f0:	080054bc 	.word	0x080054bc
 80042f4:	08004221 	.word	0x08004221

080042f8 <__sfp>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	4607      	mov	r7, r0
 80042fc:	f7ff ffac 	bl	8004258 <__sfp_lock_acquire>
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <__sfp+0x84>)
 8004302:	681e      	ldr	r6, [r3, #0]
 8004304:	69b3      	ldr	r3, [r6, #24]
 8004306:	b913      	cbnz	r3, 800430e <__sfp+0x16>
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff ffbd 	bl	8004288 <__sinit>
 800430e:	3648      	adds	r6, #72	; 0x48
 8004310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004314:	3b01      	subs	r3, #1
 8004316:	d503      	bpl.n	8004320 <__sfp+0x28>
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	b30b      	cbz	r3, 8004360 <__sfp+0x68>
 800431c:	6836      	ldr	r6, [r6, #0]
 800431e:	e7f7      	b.n	8004310 <__sfp+0x18>
 8004320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004324:	b9d5      	cbnz	r5, 800435c <__sfp+0x64>
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <__sfp+0x88>)
 8004328:	60e3      	str	r3, [r4, #12]
 800432a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800432e:	6665      	str	r5, [r4, #100]	; 0x64
 8004330:	f000 f847 	bl	80043c2 <__retarget_lock_init_recursive>
 8004334:	f7ff ff96 	bl	8004264 <__sfp_lock_release>
 8004338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800433c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004340:	6025      	str	r5, [r4, #0]
 8004342:	61a5      	str	r5, [r4, #24]
 8004344:	2208      	movs	r2, #8
 8004346:	4629      	mov	r1, r5
 8004348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800434c:	f7ff fd16 	bl	8003d7c <memset>
 8004350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004358:	4620      	mov	r0, r4
 800435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800435c:	3468      	adds	r4, #104	; 0x68
 800435e:	e7d9      	b.n	8004314 <__sfp+0x1c>
 8004360:	2104      	movs	r1, #4
 8004362:	4638      	mov	r0, r7
 8004364:	f7ff ff62 	bl	800422c <__sfmoreglue>
 8004368:	4604      	mov	r4, r0
 800436a:	6030      	str	r0, [r6, #0]
 800436c:	2800      	cmp	r0, #0
 800436e:	d1d5      	bne.n	800431c <__sfp+0x24>
 8004370:	f7ff ff78 	bl	8004264 <__sfp_lock_release>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	e7ee      	b.n	8004358 <__sfp+0x60>
 800437a:	bf00      	nop
 800437c:	080054bc 	.word	0x080054bc
 8004380:	ffff0001 	.word	0xffff0001

08004384 <_fwalk_reent>:
 8004384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004388:	4606      	mov	r6, r0
 800438a:	4688      	mov	r8, r1
 800438c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004390:	2700      	movs	r7, #0
 8004392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004396:	f1b9 0901 	subs.w	r9, r9, #1
 800439a:	d505      	bpl.n	80043a8 <_fwalk_reent+0x24>
 800439c:	6824      	ldr	r4, [r4, #0]
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d1f7      	bne.n	8004392 <_fwalk_reent+0xe>
 80043a2:	4638      	mov	r0, r7
 80043a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043a8:	89ab      	ldrh	r3, [r5, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d907      	bls.n	80043be <_fwalk_reent+0x3a>
 80043ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043b2:	3301      	adds	r3, #1
 80043b4:	d003      	beq.n	80043be <_fwalk_reent+0x3a>
 80043b6:	4629      	mov	r1, r5
 80043b8:	4630      	mov	r0, r6
 80043ba:	47c0      	blx	r8
 80043bc:	4307      	orrs	r7, r0
 80043be:	3568      	adds	r5, #104	; 0x68
 80043c0:	e7e9      	b.n	8004396 <_fwalk_reent+0x12>

080043c2 <__retarget_lock_init_recursive>:
 80043c2:	4770      	bx	lr

080043c4 <__retarget_lock_acquire_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_release_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__swhatbuf_r>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	460e      	mov	r6, r1
 80043cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	b096      	sub	sp, #88	; 0x58
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	da08      	bge.n	80043ec <__swhatbuf_r+0x24>
 80043da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	061a      	lsls	r2, r3, #24
 80043e4:	d410      	bmi.n	8004408 <__swhatbuf_r+0x40>
 80043e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ea:	e00e      	b.n	800440a <__swhatbuf_r+0x42>
 80043ec:	466a      	mov	r2, sp
 80043ee:	f000 fcdd 	bl	8004dac <_fstat_r>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	dbf1      	blt.n	80043da <__swhatbuf_r+0x12>
 80043f6:	9a01      	ldr	r2, [sp, #4]
 80043f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004400:	425a      	negs	r2, r3
 8004402:	415a      	adcs	r2, r3
 8004404:	602a      	str	r2, [r5, #0]
 8004406:	e7ee      	b.n	80043e6 <__swhatbuf_r+0x1e>
 8004408:	2340      	movs	r3, #64	; 0x40
 800440a:	2000      	movs	r0, #0
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	b016      	add	sp, #88	; 0x58
 8004410:	bd70      	pop	{r4, r5, r6, pc}
	...

08004414 <__smakebuf_r>:
 8004414:	898b      	ldrh	r3, [r1, #12]
 8004416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004418:	079d      	lsls	r5, r3, #30
 800441a:	4606      	mov	r6, r0
 800441c:	460c      	mov	r4, r1
 800441e:	d507      	bpl.n	8004430 <__smakebuf_r+0x1c>
 8004420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	2301      	movs	r3, #1
 800442a:	6163      	str	r3, [r4, #20]
 800442c:	b002      	add	sp, #8
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	ab01      	add	r3, sp, #4
 8004432:	466a      	mov	r2, sp
 8004434:	f7ff ffc8 	bl	80043c8 <__swhatbuf_r>
 8004438:	9900      	ldr	r1, [sp, #0]
 800443a:	4605      	mov	r5, r0
 800443c:	4630      	mov	r0, r6
 800443e:	f000 f895 	bl	800456c <_malloc_r>
 8004442:	b948      	cbnz	r0, 8004458 <__smakebuf_r+0x44>
 8004444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004448:	059a      	lsls	r2, r3, #22
 800444a:	d4ef      	bmi.n	800442c <__smakebuf_r+0x18>
 800444c:	f023 0303 	bic.w	r3, r3, #3
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	e7e3      	b.n	8004420 <__smakebuf_r+0xc>
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <__smakebuf_r+0x7c>)
 800445a:	62b3      	str	r3, [r6, #40]	; 0x28
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	6020      	str	r0, [r4, #0]
 8004460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	9b00      	ldr	r3, [sp, #0]
 8004468:	6163      	str	r3, [r4, #20]
 800446a:	9b01      	ldr	r3, [sp, #4]
 800446c:	6120      	str	r0, [r4, #16]
 800446e:	b15b      	cbz	r3, 8004488 <__smakebuf_r+0x74>
 8004470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004474:	4630      	mov	r0, r6
 8004476:	f000 fcab 	bl	8004dd0 <_isatty_r>
 800447a:	b128      	cbz	r0, 8004488 <__smakebuf_r+0x74>
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	89a0      	ldrh	r0, [r4, #12]
 800448a:	4305      	orrs	r5, r0
 800448c:	81a5      	strh	r5, [r4, #12]
 800448e:	e7cd      	b.n	800442c <__smakebuf_r+0x18>
 8004490:	08004221 	.word	0x08004221

08004494 <_free_r>:
 8004494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004496:	2900      	cmp	r1, #0
 8004498:	d044      	beq.n	8004524 <_free_r+0x90>
 800449a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449e:	9001      	str	r0, [sp, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f1a1 0404 	sub.w	r4, r1, #4
 80044a6:	bfb8      	it	lt
 80044a8:	18e4      	addlt	r4, r4, r3
 80044aa:	f000 fcb3 	bl	8004e14 <__malloc_lock>
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <_free_r+0x94>)
 80044b0:	9801      	ldr	r0, [sp, #4]
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	b933      	cbnz	r3, 80044c4 <_free_r+0x30>
 80044b6:	6063      	str	r3, [r4, #4]
 80044b8:	6014      	str	r4, [r2, #0]
 80044ba:	b003      	add	sp, #12
 80044bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044c0:	f000 bcae 	b.w	8004e20 <__malloc_unlock>
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d908      	bls.n	80044da <_free_r+0x46>
 80044c8:	6825      	ldr	r5, [r4, #0]
 80044ca:	1961      	adds	r1, r4, r5
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf01      	itttt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	1949      	addeq	r1, r1, r5
 80044d6:	6021      	streq	r1, [r4, #0]
 80044d8:	e7ed      	b.n	80044b6 <_free_r+0x22>
 80044da:	461a      	mov	r2, r3
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b10b      	cbz	r3, 80044e4 <_free_r+0x50>
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	d9fa      	bls.n	80044da <_free_r+0x46>
 80044e4:	6811      	ldr	r1, [r2, #0]
 80044e6:	1855      	adds	r5, r2, r1
 80044e8:	42a5      	cmp	r5, r4
 80044ea:	d10b      	bne.n	8004504 <_free_r+0x70>
 80044ec:	6824      	ldr	r4, [r4, #0]
 80044ee:	4421      	add	r1, r4
 80044f0:	1854      	adds	r4, r2, r1
 80044f2:	42a3      	cmp	r3, r4
 80044f4:	6011      	str	r1, [r2, #0]
 80044f6:	d1e0      	bne.n	80044ba <_free_r+0x26>
 80044f8:	681c      	ldr	r4, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	6053      	str	r3, [r2, #4]
 80044fe:	4421      	add	r1, r4
 8004500:	6011      	str	r1, [r2, #0]
 8004502:	e7da      	b.n	80044ba <_free_r+0x26>
 8004504:	d902      	bls.n	800450c <_free_r+0x78>
 8004506:	230c      	movs	r3, #12
 8004508:	6003      	str	r3, [r0, #0]
 800450a:	e7d6      	b.n	80044ba <_free_r+0x26>
 800450c:	6825      	ldr	r5, [r4, #0]
 800450e:	1961      	adds	r1, r4, r5
 8004510:	428b      	cmp	r3, r1
 8004512:	bf04      	itt	eq
 8004514:	6819      	ldreq	r1, [r3, #0]
 8004516:	685b      	ldreq	r3, [r3, #4]
 8004518:	6063      	str	r3, [r4, #4]
 800451a:	bf04      	itt	eq
 800451c:	1949      	addeq	r1, r1, r5
 800451e:	6021      	streq	r1, [r4, #0]
 8004520:	6054      	str	r4, [r2, #4]
 8004522:	e7ca      	b.n	80044ba <_free_r+0x26>
 8004524:	b003      	add	sp, #12
 8004526:	bd30      	pop	{r4, r5, pc}
 8004528:	2000013c 	.word	0x2000013c

0800452c <sbrk_aligned>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4e0e      	ldr	r6, [pc, #56]	; (8004568 <sbrk_aligned+0x3c>)
 8004530:	460c      	mov	r4, r1
 8004532:	6831      	ldr	r1, [r6, #0]
 8004534:	4605      	mov	r5, r0
 8004536:	b911      	cbnz	r1, 800453e <sbrk_aligned+0x12>
 8004538:	f000 fbc2 	bl	8004cc0 <_sbrk_r>
 800453c:	6030      	str	r0, [r6, #0]
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	f000 fbbd 	bl	8004cc0 <_sbrk_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	d00a      	beq.n	8004560 <sbrk_aligned+0x34>
 800454a:	1cc4      	adds	r4, r0, #3
 800454c:	f024 0403 	bic.w	r4, r4, #3
 8004550:	42a0      	cmp	r0, r4
 8004552:	d007      	beq.n	8004564 <sbrk_aligned+0x38>
 8004554:	1a21      	subs	r1, r4, r0
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fbb2 	bl	8004cc0 <_sbrk_r>
 800455c:	3001      	adds	r0, #1
 800455e:	d101      	bne.n	8004564 <sbrk_aligned+0x38>
 8004560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004564:	4620      	mov	r0, r4
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	20000140 	.word	0x20000140

0800456c <_malloc_r>:
 800456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004570:	1ccd      	adds	r5, r1, #3
 8004572:	f025 0503 	bic.w	r5, r5, #3
 8004576:	3508      	adds	r5, #8
 8004578:	2d0c      	cmp	r5, #12
 800457a:	bf38      	it	cc
 800457c:	250c      	movcc	r5, #12
 800457e:	2d00      	cmp	r5, #0
 8004580:	4607      	mov	r7, r0
 8004582:	db01      	blt.n	8004588 <_malloc_r+0x1c>
 8004584:	42a9      	cmp	r1, r5
 8004586:	d905      	bls.n	8004594 <_malloc_r+0x28>
 8004588:	230c      	movs	r3, #12
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	2600      	movs	r6, #0
 800458e:	4630      	mov	r0, r6
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	4e2e      	ldr	r6, [pc, #184]	; (8004650 <_malloc_r+0xe4>)
 8004596:	f000 fc3d 	bl	8004e14 <__malloc_lock>
 800459a:	6833      	ldr	r3, [r6, #0]
 800459c:	461c      	mov	r4, r3
 800459e:	bb34      	cbnz	r4, 80045ee <_malloc_r+0x82>
 80045a0:	4629      	mov	r1, r5
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7ff ffc2 	bl	800452c <sbrk_aligned>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	4604      	mov	r4, r0
 80045ac:	d14d      	bne.n	800464a <_malloc_r+0xde>
 80045ae:	6834      	ldr	r4, [r6, #0]
 80045b0:	4626      	mov	r6, r4
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	d140      	bne.n	8004638 <_malloc_r+0xcc>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	4631      	mov	r1, r6
 80045ba:	4638      	mov	r0, r7
 80045bc:	eb04 0803 	add.w	r8, r4, r3
 80045c0:	f000 fb7e 	bl	8004cc0 <_sbrk_r>
 80045c4:	4580      	cmp	r8, r0
 80045c6:	d13a      	bne.n	800463e <_malloc_r+0xd2>
 80045c8:	6821      	ldr	r1, [r4, #0]
 80045ca:	3503      	adds	r5, #3
 80045cc:	1a6d      	subs	r5, r5, r1
 80045ce:	f025 0503 	bic.w	r5, r5, #3
 80045d2:	3508      	adds	r5, #8
 80045d4:	2d0c      	cmp	r5, #12
 80045d6:	bf38      	it	cc
 80045d8:	250c      	movcc	r5, #12
 80045da:	4629      	mov	r1, r5
 80045dc:	4638      	mov	r0, r7
 80045de:	f7ff ffa5 	bl	800452c <sbrk_aligned>
 80045e2:	3001      	adds	r0, #1
 80045e4:	d02b      	beq.n	800463e <_malloc_r+0xd2>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	442b      	add	r3, r5
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	e00e      	b.n	800460c <_malloc_r+0xa0>
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	1b52      	subs	r2, r2, r5
 80045f2:	d41e      	bmi.n	8004632 <_malloc_r+0xc6>
 80045f4:	2a0b      	cmp	r2, #11
 80045f6:	d916      	bls.n	8004626 <_malloc_r+0xba>
 80045f8:	1961      	adds	r1, r4, r5
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	6025      	str	r5, [r4, #0]
 80045fe:	bf18      	it	ne
 8004600:	6059      	strne	r1, [r3, #4]
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	bf08      	it	eq
 8004606:	6031      	streq	r1, [r6, #0]
 8004608:	5162      	str	r2, [r4, r5]
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	4638      	mov	r0, r7
 800460e:	f104 060b 	add.w	r6, r4, #11
 8004612:	f000 fc05 	bl	8004e20 <__malloc_unlock>
 8004616:	f026 0607 	bic.w	r6, r6, #7
 800461a:	1d23      	adds	r3, r4, #4
 800461c:	1af2      	subs	r2, r6, r3
 800461e:	d0b6      	beq.n	800458e <_malloc_r+0x22>
 8004620:	1b9b      	subs	r3, r3, r6
 8004622:	50a3      	str	r3, [r4, r2]
 8004624:	e7b3      	b.n	800458e <_malloc_r+0x22>
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	42a3      	cmp	r3, r4
 800462a:	bf0c      	ite	eq
 800462c:	6032      	streq	r2, [r6, #0]
 800462e:	605a      	strne	r2, [r3, #4]
 8004630:	e7ec      	b.n	800460c <_malloc_r+0xa0>
 8004632:	4623      	mov	r3, r4
 8004634:	6864      	ldr	r4, [r4, #4]
 8004636:	e7b2      	b.n	800459e <_malloc_r+0x32>
 8004638:	4634      	mov	r4, r6
 800463a:	6876      	ldr	r6, [r6, #4]
 800463c:	e7b9      	b.n	80045b2 <_malloc_r+0x46>
 800463e:	230c      	movs	r3, #12
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4638      	mov	r0, r7
 8004644:	f000 fbec 	bl	8004e20 <__malloc_unlock>
 8004648:	e7a1      	b.n	800458e <_malloc_r+0x22>
 800464a:	6025      	str	r5, [r4, #0]
 800464c:	e7de      	b.n	800460c <_malloc_r+0xa0>
 800464e:	bf00      	nop
 8004650:	2000013c 	.word	0x2000013c

08004654 <__sfputc_r>:
 8004654:	6893      	ldr	r3, [r2, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	b410      	push	{r4}
 800465c:	6093      	str	r3, [r2, #8]
 800465e:	da08      	bge.n	8004672 <__sfputc_r+0x1e>
 8004660:	6994      	ldr	r4, [r2, #24]
 8004662:	42a3      	cmp	r3, r4
 8004664:	db01      	blt.n	800466a <__sfputc_r+0x16>
 8004666:	290a      	cmp	r1, #10
 8004668:	d103      	bne.n	8004672 <__sfputc_r+0x1e>
 800466a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466e:	f7ff bc31 	b.w	8003ed4 <__swbuf_r>
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	1c58      	adds	r0, r3, #1
 8004676:	6010      	str	r0, [r2, #0]
 8004678:	7019      	strb	r1, [r3, #0]
 800467a:	4608      	mov	r0, r1
 800467c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004680:	4770      	bx	lr

08004682 <__sfputs_r>:
 8004682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004684:	4606      	mov	r6, r0
 8004686:	460f      	mov	r7, r1
 8004688:	4614      	mov	r4, r2
 800468a:	18d5      	adds	r5, r2, r3
 800468c:	42ac      	cmp	r4, r5
 800468e:	d101      	bne.n	8004694 <__sfputs_r+0x12>
 8004690:	2000      	movs	r0, #0
 8004692:	e007      	b.n	80046a4 <__sfputs_r+0x22>
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	463a      	mov	r2, r7
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ffda 	bl	8004654 <__sfputc_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d1f3      	bne.n	800468c <__sfputs_r+0xa>
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a8 <_vfiprintf_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	460d      	mov	r5, r1
 80046ae:	b09d      	sub	sp, #116	; 0x74
 80046b0:	4614      	mov	r4, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	4606      	mov	r6, r0
 80046b6:	b118      	cbz	r0, 80046c0 <_vfiprintf_r+0x18>
 80046b8:	6983      	ldr	r3, [r0, #24]
 80046ba:	b90b      	cbnz	r3, 80046c0 <_vfiprintf_r+0x18>
 80046bc:	f7ff fde4 	bl	8004288 <__sinit>
 80046c0:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <_vfiprintf_r+0x240>)
 80046c2:	429d      	cmp	r5, r3
 80046c4:	d11b      	bne.n	80046fe <_vfiprintf_r+0x56>
 80046c6:	6875      	ldr	r5, [r6, #4]
 80046c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ca:	07d9      	lsls	r1, r3, #31
 80046cc:	d405      	bmi.n	80046da <_vfiprintf_r+0x32>
 80046ce:	89ab      	ldrh	r3, [r5, #12]
 80046d0:	059a      	lsls	r2, r3, #22
 80046d2:	d402      	bmi.n	80046da <_vfiprintf_r+0x32>
 80046d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d6:	f7ff fe75 	bl	80043c4 <__retarget_lock_acquire_recursive>
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	071b      	lsls	r3, r3, #28
 80046de:	d501      	bpl.n	80046e4 <_vfiprintf_r+0x3c>
 80046e0:	692b      	ldr	r3, [r5, #16]
 80046e2:	b9eb      	cbnz	r3, 8004720 <_vfiprintf_r+0x78>
 80046e4:	4629      	mov	r1, r5
 80046e6:	4630      	mov	r0, r6
 80046e8:	f7ff fc46 	bl	8003f78 <__swsetup_r>
 80046ec:	b1c0      	cbz	r0, 8004720 <_vfiprintf_r+0x78>
 80046ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046f0:	07dc      	lsls	r4, r3, #31
 80046f2:	d50e      	bpl.n	8004712 <_vfiprintf_r+0x6a>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f8:	b01d      	add	sp, #116	; 0x74
 80046fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fe:	4b7b      	ldr	r3, [pc, #492]	; (80048ec <_vfiprintf_r+0x244>)
 8004700:	429d      	cmp	r5, r3
 8004702:	d101      	bne.n	8004708 <_vfiprintf_r+0x60>
 8004704:	68b5      	ldr	r5, [r6, #8]
 8004706:	e7df      	b.n	80046c8 <_vfiprintf_r+0x20>
 8004708:	4b79      	ldr	r3, [pc, #484]	; (80048f0 <_vfiprintf_r+0x248>)
 800470a:	429d      	cmp	r5, r3
 800470c:	bf08      	it	eq
 800470e:	68f5      	ldreq	r5, [r6, #12]
 8004710:	e7da      	b.n	80046c8 <_vfiprintf_r+0x20>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	0598      	lsls	r0, r3, #22
 8004716:	d4ed      	bmi.n	80046f4 <_vfiprintf_r+0x4c>
 8004718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471a:	f7ff fe54 	bl	80043c6 <__retarget_lock_release_recursive>
 800471e:	e7e9      	b.n	80046f4 <_vfiprintf_r+0x4c>
 8004720:	2300      	movs	r3, #0
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
 8004724:	2320      	movs	r3, #32
 8004726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800472a:	f8cd 800c 	str.w	r8, [sp, #12]
 800472e:	2330      	movs	r3, #48	; 0x30
 8004730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048f4 <_vfiprintf_r+0x24c>
 8004734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004738:	f04f 0901 	mov.w	r9, #1
 800473c:	4623      	mov	r3, r4
 800473e:	469a      	mov	sl, r3
 8004740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004744:	b10a      	cbz	r2, 800474a <_vfiprintf_r+0xa2>
 8004746:	2a25      	cmp	r2, #37	; 0x25
 8004748:	d1f9      	bne.n	800473e <_vfiprintf_r+0x96>
 800474a:	ebba 0b04 	subs.w	fp, sl, r4
 800474e:	d00b      	beq.n	8004768 <_vfiprintf_r+0xc0>
 8004750:	465b      	mov	r3, fp
 8004752:	4622      	mov	r2, r4
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff ff93 	bl	8004682 <__sfputs_r>
 800475c:	3001      	adds	r0, #1
 800475e:	f000 80aa 	beq.w	80048b6 <_vfiprintf_r+0x20e>
 8004762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004764:	445a      	add	r2, fp
 8004766:	9209      	str	r2, [sp, #36]	; 0x24
 8004768:	f89a 3000 	ldrb.w	r3, [sl]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a2 	beq.w	80048b6 <_vfiprintf_r+0x20e>
 8004772:	2300      	movs	r3, #0
 8004774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800477c:	f10a 0a01 	add.w	sl, sl, #1
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	9307      	str	r3, [sp, #28]
 8004784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004788:	931a      	str	r3, [sp, #104]	; 0x68
 800478a:	4654      	mov	r4, sl
 800478c:	2205      	movs	r2, #5
 800478e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004792:	4858      	ldr	r0, [pc, #352]	; (80048f4 <_vfiprintf_r+0x24c>)
 8004794:	f7fb fd1c 	bl	80001d0 <memchr>
 8004798:	9a04      	ldr	r2, [sp, #16]
 800479a:	b9d8      	cbnz	r0, 80047d4 <_vfiprintf_r+0x12c>
 800479c:	06d1      	lsls	r1, r2, #27
 800479e:	bf44      	itt	mi
 80047a0:	2320      	movmi	r3, #32
 80047a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a6:	0713      	lsls	r3, r2, #28
 80047a8:	bf44      	itt	mi
 80047aa:	232b      	movmi	r3, #43	; 0x2b
 80047ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b0:	f89a 3000 	ldrb.w	r3, [sl]
 80047b4:	2b2a      	cmp	r3, #42	; 0x2a
 80047b6:	d015      	beq.n	80047e4 <_vfiprintf_r+0x13c>
 80047b8:	9a07      	ldr	r2, [sp, #28]
 80047ba:	4654      	mov	r4, sl
 80047bc:	2000      	movs	r0, #0
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4621      	mov	r1, r4
 80047c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c8:	3b30      	subs	r3, #48	; 0x30
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d94e      	bls.n	800486c <_vfiprintf_r+0x1c4>
 80047ce:	b1b0      	cbz	r0, 80047fe <_vfiprintf_r+0x156>
 80047d0:	9207      	str	r2, [sp, #28]
 80047d2:	e014      	b.n	80047fe <_vfiprintf_r+0x156>
 80047d4:	eba0 0308 	sub.w	r3, r0, r8
 80047d8:	fa09 f303 	lsl.w	r3, r9, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	46a2      	mov	sl, r4
 80047e2:	e7d2      	b.n	800478a <_vfiprintf_r+0xe2>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	1d19      	adds	r1, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	9103      	str	r1, [sp, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bfbb      	ittet	lt
 80047f0:	425b      	neglt	r3, r3
 80047f2:	f042 0202 	orrlt.w	r2, r2, #2
 80047f6:	9307      	strge	r3, [sp, #28]
 80047f8:	9307      	strlt	r3, [sp, #28]
 80047fa:	bfb8      	it	lt
 80047fc:	9204      	strlt	r2, [sp, #16]
 80047fe:	7823      	ldrb	r3, [r4, #0]
 8004800:	2b2e      	cmp	r3, #46	; 0x2e
 8004802:	d10c      	bne.n	800481e <_vfiprintf_r+0x176>
 8004804:	7863      	ldrb	r3, [r4, #1]
 8004806:	2b2a      	cmp	r3, #42	; 0x2a
 8004808:	d135      	bne.n	8004876 <_vfiprintf_r+0x1ce>
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	1d1a      	adds	r2, r3, #4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	9203      	str	r2, [sp, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfb8      	it	lt
 8004816:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800481a:	3402      	adds	r4, #2
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004904 <_vfiprintf_r+0x25c>
 8004822:	7821      	ldrb	r1, [r4, #0]
 8004824:	2203      	movs	r2, #3
 8004826:	4650      	mov	r0, sl
 8004828:	f7fb fcd2 	bl	80001d0 <memchr>
 800482c:	b140      	cbz	r0, 8004840 <_vfiprintf_r+0x198>
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	eba0 000a 	sub.w	r0, r0, sl
 8004834:	fa03 f000 	lsl.w	r0, r3, r0
 8004838:	9b04      	ldr	r3, [sp, #16]
 800483a:	4303      	orrs	r3, r0
 800483c:	3401      	adds	r4, #1
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004844:	482c      	ldr	r0, [pc, #176]	; (80048f8 <_vfiprintf_r+0x250>)
 8004846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800484a:	2206      	movs	r2, #6
 800484c:	f7fb fcc0 	bl	80001d0 <memchr>
 8004850:	2800      	cmp	r0, #0
 8004852:	d03f      	beq.n	80048d4 <_vfiprintf_r+0x22c>
 8004854:	4b29      	ldr	r3, [pc, #164]	; (80048fc <_vfiprintf_r+0x254>)
 8004856:	bb1b      	cbnz	r3, 80048a0 <_vfiprintf_r+0x1f8>
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	3307      	adds	r3, #7
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	3308      	adds	r3, #8
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004866:	443b      	add	r3, r7
 8004868:	9309      	str	r3, [sp, #36]	; 0x24
 800486a:	e767      	b.n	800473c <_vfiprintf_r+0x94>
 800486c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004870:	460c      	mov	r4, r1
 8004872:	2001      	movs	r0, #1
 8004874:	e7a5      	b.n	80047c2 <_vfiprintf_r+0x11a>
 8004876:	2300      	movs	r3, #0
 8004878:	3401      	adds	r4, #1
 800487a:	9305      	str	r3, [sp, #20]
 800487c:	4619      	mov	r1, r3
 800487e:	f04f 0c0a 	mov.w	ip, #10
 8004882:	4620      	mov	r0, r4
 8004884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004888:	3a30      	subs	r2, #48	; 0x30
 800488a:	2a09      	cmp	r2, #9
 800488c:	d903      	bls.n	8004896 <_vfiprintf_r+0x1ee>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0c5      	beq.n	800481e <_vfiprintf_r+0x176>
 8004892:	9105      	str	r1, [sp, #20]
 8004894:	e7c3      	b.n	800481e <_vfiprintf_r+0x176>
 8004896:	fb0c 2101 	mla	r1, ip, r1, r2
 800489a:	4604      	mov	r4, r0
 800489c:	2301      	movs	r3, #1
 800489e:	e7f0      	b.n	8004882 <_vfiprintf_r+0x1da>
 80048a0:	ab03      	add	r3, sp, #12
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	462a      	mov	r2, r5
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <_vfiprintf_r+0x258>)
 80048a8:	a904      	add	r1, sp, #16
 80048aa:	4630      	mov	r0, r6
 80048ac:	f3af 8000 	nop.w
 80048b0:	4607      	mov	r7, r0
 80048b2:	1c78      	adds	r0, r7, #1
 80048b4:	d1d6      	bne.n	8004864 <_vfiprintf_r+0x1bc>
 80048b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b8:	07d9      	lsls	r1, r3, #31
 80048ba:	d405      	bmi.n	80048c8 <_vfiprintf_r+0x220>
 80048bc:	89ab      	ldrh	r3, [r5, #12]
 80048be:	059a      	lsls	r2, r3, #22
 80048c0:	d402      	bmi.n	80048c8 <_vfiprintf_r+0x220>
 80048c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048c4:	f7ff fd7f 	bl	80043c6 <__retarget_lock_release_recursive>
 80048c8:	89ab      	ldrh	r3, [r5, #12]
 80048ca:	065b      	lsls	r3, r3, #25
 80048cc:	f53f af12 	bmi.w	80046f4 <_vfiprintf_r+0x4c>
 80048d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048d2:	e711      	b.n	80046f8 <_vfiprintf_r+0x50>
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	462a      	mov	r2, r5
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <_vfiprintf_r+0x258>)
 80048dc:	a904      	add	r1, sp, #16
 80048de:	4630      	mov	r0, r6
 80048e0:	f000 f880 	bl	80049e4 <_printf_i>
 80048e4:	e7e4      	b.n	80048b0 <_vfiprintf_r+0x208>
 80048e6:	bf00      	nop
 80048e8:	080054e0 	.word	0x080054e0
 80048ec:	08005500 	.word	0x08005500
 80048f0:	080054c0 	.word	0x080054c0
 80048f4:	08005520 	.word	0x08005520
 80048f8:	0800552a 	.word	0x0800552a
 80048fc:	00000000 	.word	0x00000000
 8004900:	08004683 	.word	0x08004683
 8004904:	08005526 	.word	0x08005526

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4699      	mov	r9, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004924:	4607      	mov	r7, r0
 8004926:	460c      	mov	r4, r1
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc26      	bgt.n	800499e <_printf_common+0x96>
 8004950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004954:	1e13      	subs	r3, r2, #0
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d42b      	bmi.n	80049b8 <_printf_common+0xb0>
 8004960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d01e      	beq.n	80049ac <_printf_common+0xa4>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	68e5      	ldr	r5, [r4, #12]
 8004972:	6832      	ldr	r2, [r6, #0]
 8004974:	f003 0306 	and.w	r3, r3, #6
 8004978:	2b04      	cmp	r3, #4
 800497a:	bf08      	it	eq
 800497c:	1aad      	subeq	r5, r5, r2
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	bf0c      	ite	eq
 8004984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004988:	2500      	movne	r5, #0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfc4      	itt	gt
 800498e:	1a9b      	subgt	r3, r3, r2
 8004990:	18ed      	addgt	r5, r5, r3
 8004992:	2600      	movs	r6, #0
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xa8>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4649      	mov	r1, r9
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xac>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c6      	b.n	8004946 <_printf_common+0x3e>
 80049b8:	18e1      	adds	r1, r4, r3
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	2030      	movs	r0, #48	; 0x30
 80049be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c2:	4422      	add	r2, r4
 80049c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049cc:	3302      	adds	r3, #2
 80049ce:	e7c7      	b.n	8004960 <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa4>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x8e>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	7e0f      	ldrb	r7, [r1, #24]
 80049ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ec:	2f78      	cmp	r7, #120	; 0x78
 80049ee:	4691      	mov	r9, r2
 80049f0:	4680      	mov	r8, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	469a      	mov	sl, r3
 80049f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	; 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d8 	beq.w	8004bb6 <_printf_i+0x1d2>
 8004a06:	2f58      	cmp	r7, #88	; 0x58
 8004a08:	f000 80a3 	beq.w	8004b52 <_printf_i+0x16e>
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a101      	add	r1, pc, #4	; (adr r1, 8004a24 <_printf_i+0x40>)
 8004a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b9d 	.word	0x08004b9d
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004b7f 	.word	0x08004b7f
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bbf 	.word	0x08004bbf
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b87 	.word	0x08004b87
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	602a      	str	r2, [r5, #0]
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a3      	b.n	8004bd8 <_printf_i+0x1f4>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	f101 0304 	add.w	r3, r1, #4
 8004a9a:	d50a      	bpl.n	8004ab2 <_printf_i+0xce>
 8004a9c:	680e      	ldr	r6, [r1, #0]
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	da03      	bge.n	8004aac <_printf_i+0xc8>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	4276      	negs	r6, r6
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	485e      	ldr	r0, [pc, #376]	; (8004c28 <_printf_i+0x244>)
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e019      	b.n	8004ae6 <_printf_i+0x102>
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aba:	bf18      	it	ne
 8004abc:	b236      	sxthne	r6, r6
 8004abe:	e7ef      	b.n	8004aa0 <_printf_i+0xbc>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0601      	lsls	r1, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xec>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xf2>
 8004ad0:	0646      	lsls	r6, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe8>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_printf_i+0x244>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90e      	cbnz	r6, 8004afc <_printf_i+0x118>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d04d      	beq.n	8004b98 <_printf_i+0x1b4>
 8004afc:	4615      	mov	r5, r2
 8004afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b02:	fb03 6711 	mls	r7, r3, r1, r6
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460e      	mov	r6, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x11a>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x14c>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07de      	lsls	r6, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x14c>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b30:	1b52      	subs	r2, r2, r5
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee2 	bl	8004908 <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14c      	bne.n	8004be2 <_printf_i+0x1fe>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	4835      	ldr	r0, [pc, #212]	; (8004c28 <_printf_i+0x244>)
 8004b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b58:	6829      	ldr	r1, [r5, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b60:	6029      	str	r1, [r5, #0]
 8004b62:	061d      	lsls	r5, r3, #24
 8004b64:	d514      	bpl.n	8004b90 <_printf_i+0x1ac>
 8004b66:	07df      	lsls	r7, r3, #31
 8004b68:	bf44      	itt	mi
 8004b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6e:	6023      	strmi	r3, [r4, #0]
 8004b70:	b91e      	cbnz	r6, 8004b7a <_printf_i+0x196>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e7b0      	b.n	8004ae0 <_printf_i+0xfc>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2378      	movs	r3, #120	; 0x78
 8004b88:	4828      	ldr	r0, [pc, #160]	; (8004c2c <_printf_i+0x248>)
 8004b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8e:	e7e3      	b.n	8004b58 <_printf_i+0x174>
 8004b90:	0659      	lsls	r1, r3, #25
 8004b92:	bf48      	it	mi
 8004b94:	b2b6      	uxthmi	r6, r6
 8004b96:	e7e6      	b.n	8004b66 <_printf_i+0x182>
 8004b98:	4615      	mov	r5, r2
 8004b9a:	e7bb      	b.n	8004b14 <_printf_i+0x130>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6826      	ldr	r6, [r4, #0]
 8004ba0:	6961      	ldr	r1, [r4, #20]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6028      	str	r0, [r5, #0]
 8004ba6:	0635      	lsls	r5, r6, #24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0x1cc>
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0x1d2>
 8004bb0:	0670      	lsls	r0, r6, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0x1c8>
 8004bb4:	8019      	strh	r1, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	4615      	mov	r5, r2
 8004bbc:	e7ba      	b.n	8004b34 <_printf_i+0x150>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7fb fb00 	bl	80001d0 <memchr>
 8004bd0:	b108      	cbz	r0, 8004bd6 <_printf_i+0x1f2>
 8004bd2:	1b40      	subs	r0, r0, r5
 8004bd4:	6060      	str	r0, [r4, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	e7a8      	b.n	8004b34 <_printf_i+0x150>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ab      	beq.n	8004b48 <_printf_i+0x164>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d413      	bmi.n	8004c1e <_printf_i+0x23a>
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	bfb8      	it	lt
 8004bfe:	4618      	movlt	r0, r3
 8004c00:	e7a4      	b.n	8004b4c <_printf_i+0x168>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d09b      	beq.n	8004b48 <_printf_i+0x164>
 8004c10:	3501      	adds	r5, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dcf2      	bgt.n	8004c02 <_printf_i+0x21e>
 8004c1c:	e7eb      	b.n	8004bf6 <_printf_i+0x212>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	f104 0619 	add.w	r6, r4, #25
 8004c24:	e7f5      	b.n	8004c12 <_printf_i+0x22e>
 8004c26:	bf00      	nop
 8004c28:	08005531 	.word	0x08005531
 8004c2c:	08005542 	.word	0x08005542

08004c30 <_putc_r>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	460d      	mov	r5, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	4606      	mov	r6, r0
 8004c38:	b118      	cbz	r0, 8004c42 <_putc_r+0x12>
 8004c3a:	6983      	ldr	r3, [r0, #24]
 8004c3c:	b90b      	cbnz	r3, 8004c42 <_putc_r+0x12>
 8004c3e:	f7ff fb23 	bl	8004288 <__sinit>
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <_putc_r+0x84>)
 8004c44:	429c      	cmp	r4, r3
 8004c46:	d124      	bne.n	8004c92 <_putc_r+0x62>
 8004c48:	6874      	ldr	r4, [r6, #4]
 8004c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c4c:	07d8      	lsls	r0, r3, #31
 8004c4e:	d405      	bmi.n	8004c5c <_putc_r+0x2c>
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	0599      	lsls	r1, r3, #22
 8004c54:	d402      	bmi.n	8004c5c <_putc_r+0x2c>
 8004c56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c58:	f7ff fbb4 	bl	80043c4 <__retarget_lock_acquire_recursive>
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	da05      	bge.n	8004c72 <_putc_r+0x42>
 8004c66:	69a2      	ldr	r2, [r4, #24]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	db1c      	blt.n	8004ca6 <_putc_r+0x76>
 8004c6c:	b2eb      	uxtb	r3, r5
 8004c6e:	2b0a      	cmp	r3, #10
 8004c70:	d019      	beq.n	8004ca6 <_putc_r+0x76>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	701d      	strb	r5, [r3, #0]
 8004c7a:	b2ed      	uxtb	r5, r5
 8004c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d405      	bmi.n	8004c8e <_putc_r+0x5e>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	059b      	lsls	r3, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_putc_r+0x5e>
 8004c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8a:	f7ff fb9c 	bl	80043c6 <__retarget_lock_release_recursive>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <_putc_r+0x88>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d101      	bne.n	8004c9c <_putc_r+0x6c>
 8004c98:	68b4      	ldr	r4, [r6, #8]
 8004c9a:	e7d6      	b.n	8004c4a <_putc_r+0x1a>
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <_putc_r+0x8c>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	bf08      	it	eq
 8004ca2:	68f4      	ldreq	r4, [r6, #12]
 8004ca4:	e7d1      	b.n	8004c4a <_putc_r+0x1a>
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7ff f912 	bl	8003ed4 <__swbuf_r>
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	e7e3      	b.n	8004c7c <_putc_r+0x4c>
 8004cb4:	080054e0 	.word	0x080054e0
 8004cb8:	08005500 	.word	0x08005500
 8004cbc:	080054c0 	.word	0x080054c0

08004cc0 <_sbrk_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d06      	ldr	r5, [pc, #24]	; (8004cdc <_sbrk_r+0x1c>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fb ff4e 	bl	8000b6c <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_sbrk_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_sbrk_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	20000144 	.word	0x20000144

08004ce0 <__sread>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce8:	f000 f8a0 	bl	8004e2c <_read_r>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	bfab      	itete	ge
 8004cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cf4:	181b      	addge	r3, r3, r0
 8004cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cfa:	bfac      	ite	ge
 8004cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cfe:	81a3      	strhlt	r3, [r4, #12]
 8004d00:	bd10      	pop	{r4, pc}

08004d02 <__swrite>:
 8004d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d06:	461f      	mov	r7, r3
 8004d08:	898b      	ldrh	r3, [r1, #12]
 8004d0a:	05db      	lsls	r3, r3, #23
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	4616      	mov	r6, r2
 8004d12:	d505      	bpl.n	8004d20 <__swrite+0x1e>
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	2302      	movs	r3, #2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f000 f868 	bl	8004df0 <_lseek_r>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	463b      	mov	r3, r7
 8004d30:	4628      	mov	r0, r5
 8004d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d36:	f000 b817 	b.w	8004d68 <_write_r>

08004d3a <__sseek>:
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d42:	f000 f855 	bl	8004df0 <_lseek_r>
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	bf15      	itete	ne
 8004d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d56:	81a3      	strheq	r3, [r4, #12]
 8004d58:	bf18      	it	ne
 8004d5a:	81a3      	strhne	r3, [r4, #12]
 8004d5c:	bd10      	pop	{r4, pc}

08004d5e <__sclose>:
 8004d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d62:	f000 b813 	b.w	8004d8c <_close_r>
	...

08004d68 <_write_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d07      	ldr	r5, [pc, #28]	; (8004d88 <_write_r+0x20>)
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	4608      	mov	r0, r1
 8004d70:	4611      	mov	r1, r2
 8004d72:	2200      	movs	r2, #0
 8004d74:	602a      	str	r2, [r5, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 f911 	bl	8004f9e <_write>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_write_r+0x1e>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_write_r+0x1e>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	20000144 	.word	0x20000144

08004d8c <_close_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d06      	ldr	r5, [pc, #24]	; (8004da8 <_close_r+0x1c>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	602b      	str	r3, [r5, #0]
 8004d98:	f000 f932 	bl	8005000 <_close>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_close_r+0x1a>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_close_r+0x1a>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000144 	.word	0x20000144

08004dac <_fstat_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	; (8004dcc <_fstat_r+0x20>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	602b      	str	r3, [r5, #0]
 8004dba:	f000 f968 	bl	800508e <_fstat>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	d102      	bne.n	8004dc8 <_fstat_r+0x1c>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	b103      	cbz	r3, 8004dc8 <_fstat_r+0x1c>
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000144 	.word	0x20000144

08004dd0 <_isatty_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d06      	ldr	r5, [pc, #24]	; (8004dec <_isatty_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f000 fabe 	bl	800535c <_isatty>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_isatty_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_isatty_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000144 	.word	0x20000144

08004df0 <_lseek_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	; (8004e10 <_lseek_r+0x20>)
 8004df4:	4604      	mov	r4, r0
 8004df6:	4608      	mov	r0, r1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 f8bb 	bl	8004f7a <_lseek>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_lseek_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_lseek_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000144 	.word	0x20000144

08004e14 <__malloc_lock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__malloc_lock+0x8>)
 8004e16:	f7ff bad5 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000138 	.word	0x20000138

08004e20 <__malloc_unlock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__malloc_unlock+0x8>)
 8004e22:	f7ff bad0 	b.w	80043c6 <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000138 	.word	0x20000138

08004e2c <_read_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d07      	ldr	r5, [pc, #28]	; (8004e4c <_read_r+0x20>)
 8004e30:	4604      	mov	r4, r0
 8004e32:	4608      	mov	r0, r1
 8004e34:	4611      	mov	r1, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	602a      	str	r2, [r5, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 f845 	bl	8004eca <_read>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_read_r+0x1e>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_read_r+0x1e>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000144 	.word	0x20000144

08004e50 <findslot>:
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <findslot+0x2c>)
 8004e52:	b510      	push	{r4, lr}
 8004e54:	4604      	mov	r4, r0
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	b118      	cbz	r0, 8004e62 <findslot+0x12>
 8004e5a:	6983      	ldr	r3, [r0, #24]
 8004e5c:	b90b      	cbnz	r3, 8004e62 <findslot+0x12>
 8004e5e:	f7ff fa13 	bl	8004288 <__sinit>
 8004e62:	2c13      	cmp	r4, #19
 8004e64:	d807      	bhi.n	8004e76 <findslot+0x26>
 8004e66:	4806      	ldr	r0, [pc, #24]	; (8004e80 <findslot+0x30>)
 8004e68:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004e6c:	3201      	adds	r2, #1
 8004e6e:	d002      	beq.n	8004e76 <findslot+0x26>
 8004e70:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	2000      	movs	r0, #0
 8004e78:	e7fc      	b.n	8004e74 <findslot+0x24>
 8004e7a:	bf00      	nop
 8004e7c:	20000010 	.word	0x20000010
 8004e80:	20000154 	.word	0x20000154

08004e84 <error>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	4604      	mov	r4, r0
 8004e88:	f7fe ff4e 	bl	8003d28 <__errno>
 8004e8c:	2613      	movs	r6, #19
 8004e8e:	4605      	mov	r5, r0
 8004e90:	2700      	movs	r7, #0
 8004e92:	4630      	mov	r0, r6
 8004e94:	4639      	mov	r1, r7
 8004e96:	beab      	bkpt	0x00ab
 8004e98:	4606      	mov	r6, r0
 8004e9a:	602e      	str	r6, [r5, #0]
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ea0 <checkerror>:
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <checkerror+0x8>
 8004ea4:	f7ff bfee 	b.w	8004e84 <error>
 8004ea8:	4770      	bx	lr

08004eaa <_swiread>:
 8004eaa:	b530      	push	{r4, r5, lr}
 8004eac:	b085      	sub	sp, #20
 8004eae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004eb2:	9203      	str	r2, [sp, #12]
 8004eb4:	2406      	movs	r4, #6
 8004eb6:	ad01      	add	r5, sp, #4
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4629      	mov	r1, r5
 8004ebc:	beab      	bkpt	0x00ab
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7ff ffed 	bl	8004ea0 <checkerror>
 8004ec6:	b005      	add	sp, #20
 8004ec8:	bd30      	pop	{r4, r5, pc}

08004eca <_read>:
 8004eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ecc:	4615      	mov	r5, r2
 8004ece:	9101      	str	r1, [sp, #4]
 8004ed0:	f7ff ffbe 	bl	8004e50 <findslot>
 8004ed4:	9901      	ldr	r1, [sp, #4]
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	b938      	cbnz	r0, 8004eea <_read+0x20>
 8004eda:	f7fe ff25 	bl	8003d28 <__errno>
 8004ede:	2309      	movs	r3, #9
 8004ee0:	6003      	str	r3, [r0, #0]
 8004ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee6:	b003      	add	sp, #12
 8004ee8:	bd30      	pop	{r4, r5, pc}
 8004eea:	6800      	ldr	r0, [r0, #0]
 8004eec:	462a      	mov	r2, r5
 8004eee:	f7ff ffdc 	bl	8004eaa <_swiread>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d0f7      	beq.n	8004ee6 <_read+0x1c>
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	1a2a      	subs	r2, r5, r0
 8004efa:	4413      	add	r3, r2
 8004efc:	6063      	str	r3, [r4, #4]
 8004efe:	4610      	mov	r0, r2
 8004f00:	e7f1      	b.n	8004ee6 <_read+0x1c>

08004f02 <_swilseek>:
 8004f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f04:	460c      	mov	r4, r1
 8004f06:	4616      	mov	r6, r2
 8004f08:	f7ff ffa2 	bl	8004e50 <findslot>
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	b940      	cbnz	r0, 8004f22 <_swilseek+0x20>
 8004f10:	f7fe ff0a 	bl	8003d28 <__errno>
 8004f14:	2309      	movs	r3, #9
 8004f16:	6003      	str	r3, [r0, #0]
 8004f18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	b003      	add	sp, #12
 8004f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f22:	2e02      	cmp	r6, #2
 8004f24:	d903      	bls.n	8004f2e <_swilseek+0x2c>
 8004f26:	f7fe feff 	bl	8003d28 <__errno>
 8004f2a:	2316      	movs	r3, #22
 8004f2c:	e7f3      	b.n	8004f16 <_swilseek+0x14>
 8004f2e:	2e01      	cmp	r6, #1
 8004f30:	d112      	bne.n	8004f58 <_swilseek+0x56>
 8004f32:	6843      	ldr	r3, [r0, #4]
 8004f34:	18e4      	adds	r4, r4, r3
 8004f36:	d4f6      	bmi.n	8004f26 <_swilseek+0x24>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	260a      	movs	r6, #10
 8004f3c:	e9cd 3400 	strd	r3, r4, [sp]
 8004f40:	466f      	mov	r7, sp
 8004f42:	4630      	mov	r0, r6
 8004f44:	4639      	mov	r1, r7
 8004f46:	beab      	bkpt	0x00ab
 8004f48:	4606      	mov	r6, r0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7ff ffa8 	bl	8004ea0 <checkerror>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	dbe1      	blt.n	8004f18 <_swilseek+0x16>
 8004f54:	606c      	str	r4, [r5, #4]
 8004f56:	e7e1      	b.n	8004f1c <_swilseek+0x1a>
 8004f58:	2e02      	cmp	r6, #2
 8004f5a:	d1ed      	bne.n	8004f38 <_swilseek+0x36>
 8004f5c:	6803      	ldr	r3, [r0, #0]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	260c      	movs	r6, #12
 8004f62:	466f      	mov	r7, sp
 8004f64:	4630      	mov	r0, r6
 8004f66:	4639      	mov	r1, r7
 8004f68:	beab      	bkpt	0x00ab
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ff97 	bl	8004ea0 <checkerror>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	d0d0      	beq.n	8004f18 <_swilseek+0x16>
 8004f76:	4404      	add	r4, r0
 8004f78:	e7de      	b.n	8004f38 <_swilseek+0x36>

08004f7a <_lseek>:
 8004f7a:	f7ff bfc2 	b.w	8004f02 <_swilseek>

08004f7e <_swiwrite>:
 8004f7e:	b530      	push	{r4, r5, lr}
 8004f80:	b085      	sub	sp, #20
 8004f82:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	2405      	movs	r4, #5
 8004f8a:	ad01      	add	r5, sp, #4
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	beab      	bkpt	0x00ab
 8004f92:	4604      	mov	r4, r0
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ff83 	bl	8004ea0 <checkerror>
 8004f9a:	b005      	add	sp, #20
 8004f9c:	bd30      	pop	{r4, r5, pc}

08004f9e <_write>:
 8004f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	9101      	str	r1, [sp, #4]
 8004fa4:	f7ff ff54 	bl	8004e50 <findslot>
 8004fa8:	9901      	ldr	r1, [sp, #4]
 8004faa:	4604      	mov	r4, r0
 8004fac:	b930      	cbnz	r0, 8004fbc <_write+0x1e>
 8004fae:	f7fe febb 	bl	8003d28 <__errno>
 8004fb2:	2309      	movs	r3, #9
 8004fb4:	6003      	str	r3, [r0, #0]
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fba:	e012      	b.n	8004fe2 <_write+0x44>
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	f7ff ffdd 	bl	8004f7e <_swiwrite>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	dbf6      	blt.n	8004fb6 <_write+0x18>
 8004fc8:	6862      	ldr	r2, [r4, #4]
 8004fca:	1a2b      	subs	r3, r5, r0
 8004fcc:	441a      	add	r2, r3
 8004fce:	42a8      	cmp	r0, r5
 8004fd0:	6062      	str	r2, [r4, #4]
 8004fd2:	d105      	bne.n	8004fe0 <_write+0x42>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	b003      	add	sp, #12
 8004fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fdc:	f7ff bf52 	b.w	8004e84 <error>
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bd30      	pop	{r4, r5, pc}

08004fe6 <_swiclose>:
 8004fe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fe8:	2402      	movs	r4, #2
 8004fea:	9001      	str	r0, [sp, #4]
 8004fec:	ad01      	add	r5, sp, #4
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	beab      	bkpt	0x00ab
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7ff ff52 	bl	8004ea0 <checkerror>
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd30      	pop	{r4, r5, pc}

08005000 <_close>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4605      	mov	r5, r0
 8005004:	f7ff ff24 	bl	8004e50 <findslot>
 8005008:	4604      	mov	r4, r0
 800500a:	b930      	cbnz	r0, 800501a <_close+0x1a>
 800500c:	f7fe fe8c 	bl	8003d28 <__errno>
 8005010:	2309      	movs	r3, #9
 8005012:	6003      	str	r3, [r0, #0]
 8005014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005018:	bd38      	pop	{r3, r4, r5, pc}
 800501a:	3d01      	subs	r5, #1
 800501c:	2d01      	cmp	r5, #1
 800501e:	d809      	bhi.n	8005034 <_close+0x34>
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <_close+0x48>)
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d104      	bne.n	8005034 <_close+0x34>
 800502a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800502e:	6003      	str	r3, [r0, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e7f1      	b.n	8005018 <_close+0x18>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	f7ff ffd6 	bl	8004fe6 <_swiclose>
 800503a:	2800      	cmp	r0, #0
 800503c:	d1ec      	bne.n	8005018 <_close+0x18>
 800503e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	e7e8      	b.n	8005018 <_close+0x18>
 8005046:	bf00      	nop
 8005048:	20000154 	.word	0x20000154

0800504c <_swistat>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	460c      	mov	r4, r1
 8005050:	f7ff fefe 	bl	8004e50 <findslot>
 8005054:	4605      	mov	r5, r0
 8005056:	b930      	cbnz	r0, 8005066 <_swistat+0x1a>
 8005058:	f7fe fe66 	bl	8003d28 <__errno>
 800505c:	2309      	movs	r3, #9
 800505e:	6003      	str	r3, [r0, #0]
 8005060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800506c:	6063      	str	r3, [r4, #4]
 800506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005072:	64a3      	str	r3, [r4, #72]	; 0x48
 8005074:	260c      	movs	r6, #12
 8005076:	4630      	mov	r0, r6
 8005078:	4629      	mov	r1, r5
 800507a:	beab      	bkpt	0x00ab
 800507c:	4605      	mov	r5, r0
 800507e:	4628      	mov	r0, r5
 8005080:	f7ff ff0e 	bl	8004ea0 <checkerror>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	bf1c      	itt	ne
 8005088:	6120      	strne	r0, [r4, #16]
 800508a:	2000      	movne	r0, #0
 800508c:	e7ea      	b.n	8005064 <_swistat+0x18>

0800508e <_fstat>:
 800508e:	460b      	mov	r3, r1
 8005090:	b510      	push	{r4, lr}
 8005092:	2100      	movs	r1, #0
 8005094:	4604      	mov	r4, r0
 8005096:	2258      	movs	r2, #88	; 0x58
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe fe6f 	bl	8003d7c <memset>
 800509e:	4601      	mov	r1, r0
 80050a0:	4620      	mov	r0, r4
 80050a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a6:	f7ff bfd1 	b.w	800504c <_swistat>

080050aa <_stat>:
 80050aa:	b538      	push	{r3, r4, r5, lr}
 80050ac:	460d      	mov	r5, r1
 80050ae:	4604      	mov	r4, r0
 80050b0:	2258      	movs	r2, #88	; 0x58
 80050b2:	2100      	movs	r1, #0
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7fe fe61 	bl	8003d7c <memset>
 80050ba:	4620      	mov	r0, r4
 80050bc:	2100      	movs	r1, #0
 80050be:	f000 f811 	bl	80050e4 <_swiopen>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	4604      	mov	r4, r0
 80050c6:	d00b      	beq.n	80050e0 <_stat+0x36>
 80050c8:	686b      	ldr	r3, [r5, #4]
 80050ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050ce:	606b      	str	r3, [r5, #4]
 80050d0:	4629      	mov	r1, r5
 80050d2:	f7ff ffbb 	bl	800504c <_swistat>
 80050d6:	4605      	mov	r5, r0
 80050d8:	4620      	mov	r0, r4
 80050da:	f7ff ff91 	bl	8005000 <_close>
 80050de:	462c      	mov	r4, r5
 80050e0:	4620      	mov	r0, r4
 80050e2:	bd38      	pop	{r3, r4, r5, pc}

080050e4 <_swiopen>:
 80050e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005194 <_swiopen+0xb0>
 80050ec:	b097      	sub	sp, #92	; 0x5c
 80050ee:	4607      	mov	r7, r0
 80050f0:	460e      	mov	r6, r1
 80050f2:	2500      	movs	r5, #0
 80050f4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80050f8:	1c61      	adds	r1, r4, #1
 80050fa:	d037      	beq.n	800516c <_swiopen+0x88>
 80050fc:	3501      	adds	r5, #1
 80050fe:	2d14      	cmp	r5, #20
 8005100:	d1f8      	bne.n	80050f4 <_swiopen+0x10>
 8005102:	f7fe fe11 	bl	8003d28 <__errno>
 8005106:	2318      	movs	r3, #24
 8005108:	6003      	str	r3, [r0, #0]
 800510a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800510e:	e03d      	b.n	800518c <_swiopen+0xa8>
 8005110:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8005114:	f240 6301 	movw	r3, #1537	; 0x601
 8005118:	07b2      	lsls	r2, r6, #30
 800511a:	bf48      	it	mi
 800511c:	f044 0402 	orrmi.w	r4, r4, #2
 8005120:	421e      	tst	r6, r3
 8005122:	bf18      	it	ne
 8005124:	f044 0404 	orrne.w	r4, r4, #4
 8005128:	0733      	lsls	r3, r6, #28
 800512a:	bf48      	it	mi
 800512c:	f024 0404 	bicmi.w	r4, r4, #4
 8005130:	4638      	mov	r0, r7
 8005132:	bf48      	it	mi
 8005134:	f044 0408 	orrmi.w	r4, r4, #8
 8005138:	9700      	str	r7, [sp, #0]
 800513a:	f7fb f899 	bl	8000270 <strlen>
 800513e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8005142:	2401      	movs	r4, #1
 8005144:	4620      	mov	r0, r4
 8005146:	4649      	mov	r1, r9
 8005148:	beab      	bkpt	0x00ab
 800514a:	4604      	mov	r4, r0
 800514c:	2c00      	cmp	r4, #0
 800514e:	db08      	blt.n	8005162 <_swiopen+0x7e>
 8005150:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005154:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8005158:	2300      	movs	r3, #0
 800515a:	f8c8 3004 	str.w	r3, [r8, #4]
 800515e:	462c      	mov	r4, r5
 8005160:	e014      	b.n	800518c <_swiopen+0xa8>
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff fe8e 	bl	8004e84 <error>
 8005168:	4604      	mov	r4, r0
 800516a:	e00f      	b.n	800518c <_swiopen+0xa8>
 800516c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005170:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005174:	46e9      	mov	r9, sp
 8005176:	d1cb      	bne.n	8005110 <_swiopen+0x2c>
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	f7ff ff95 	bl	80050aa <_stat>
 8005180:	3001      	adds	r0, #1
 8005182:	d0c5      	beq.n	8005110 <_swiopen+0x2c>
 8005184:	f7fe fdd0 	bl	8003d28 <__errno>
 8005188:	2311      	movs	r3, #17
 800518a:	6003      	str	r3, [r0, #0]
 800518c:	4620      	mov	r0, r4
 800518e:	b017      	add	sp, #92	; 0x5c
 8005190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005194:	20000154 	.word	0x20000154

08005198 <_get_semihosting_exts>:
 8005198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	482a      	ldr	r0, [pc, #168]	; (800524c <_get_semihosting_exts+0xb4>)
 80051a2:	2100      	movs	r1, #0
 80051a4:	4615      	mov	r5, r2
 80051a6:	f7ff ff9d 	bl	80050e4 <_swiopen>
 80051aa:	462a      	mov	r2, r5
 80051ac:	4604      	mov	r4, r0
 80051ae:	2100      	movs	r1, #0
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7fe fde3 	bl	8003d7c <memset>
 80051b6:	1c63      	adds	r3, r4, #1
 80051b8:	d016      	beq.n	80051e8 <_get_semihosting_exts+0x50>
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7ff fe48 	bl	8004e50 <findslot>
 80051c0:	f04f 090c 	mov.w	r9, #12
 80051c4:	4680      	mov	r8, r0
 80051c6:	4648      	mov	r0, r9
 80051c8:	4641      	mov	r1, r8
 80051ca:	beab      	bkpt	0x00ab
 80051cc:	4680      	mov	r8, r0
 80051ce:	4640      	mov	r0, r8
 80051d0:	f7ff fe66 	bl	8004ea0 <checkerror>
 80051d4:	2803      	cmp	r0, #3
 80051d6:	dd02      	ble.n	80051de <_get_semihosting_exts+0x46>
 80051d8:	1ec3      	subs	r3, r0, #3
 80051da:	42ab      	cmp	r3, r5
 80051dc:	dc08      	bgt.n	80051f0 <_get_semihosting_exts+0x58>
 80051de:	4620      	mov	r0, r4
 80051e0:	f7ff ff0e 	bl	8005000 <_close>
 80051e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051e8:	4620      	mov	r0, r4
 80051ea:	b003      	add	sp, #12
 80051ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051f0:	2204      	movs	r2, #4
 80051f2:	eb0d 0102 	add.w	r1, sp, r2
 80051f6:	4620      	mov	r0, r4
 80051f8:	f7ff fe67 	bl	8004eca <_read>
 80051fc:	2803      	cmp	r0, #3
 80051fe:	ddee      	ble.n	80051de <_get_semihosting_exts+0x46>
 8005200:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005204:	2b53      	cmp	r3, #83	; 0x53
 8005206:	d1ea      	bne.n	80051de <_get_semihosting_exts+0x46>
 8005208:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800520c:	2b48      	cmp	r3, #72	; 0x48
 800520e:	d1e6      	bne.n	80051de <_get_semihosting_exts+0x46>
 8005210:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005214:	2b46      	cmp	r3, #70	; 0x46
 8005216:	d1e2      	bne.n	80051de <_get_semihosting_exts+0x46>
 8005218:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800521c:	2b42      	cmp	r3, #66	; 0x42
 800521e:	d1de      	bne.n	80051de <_get_semihosting_exts+0x46>
 8005220:	2201      	movs	r2, #1
 8005222:	4639      	mov	r1, r7
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff fe6c 	bl	8004f02 <_swilseek>
 800522a:	2800      	cmp	r0, #0
 800522c:	dbd7      	blt.n	80051de <_get_semihosting_exts+0x46>
 800522e:	462a      	mov	r2, r5
 8005230:	4631      	mov	r1, r6
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff fe49 	bl	8004eca <_read>
 8005238:	4605      	mov	r5, r0
 800523a:	4620      	mov	r0, r4
 800523c:	f7ff fee0 	bl	8005000 <_close>
 8005240:	4628      	mov	r0, r5
 8005242:	f7ff fe2d 	bl	8004ea0 <checkerror>
 8005246:	4604      	mov	r4, r0
 8005248:	e7ce      	b.n	80051e8 <_get_semihosting_exts+0x50>
 800524a:	bf00      	nop
 800524c:	08005553 	.word	0x08005553

08005250 <initialise_semihosting_exts>:
 8005250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005252:	4d0a      	ldr	r5, [pc, #40]	; (800527c <initialise_semihosting_exts+0x2c>)
 8005254:	4c0a      	ldr	r4, [pc, #40]	; (8005280 <initialise_semihosting_exts+0x30>)
 8005256:	2100      	movs	r1, #0
 8005258:	2201      	movs	r2, #1
 800525a:	a801      	add	r0, sp, #4
 800525c:	6029      	str	r1, [r5, #0]
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	f7ff ff9a 	bl	8005198 <_get_semihosting_exts>
 8005264:	2800      	cmp	r0, #0
 8005266:	dd07      	ble.n	8005278 <initialise_semihosting_exts+0x28>
 8005268:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800526c:	f003 0201 	and.w	r2, r3, #1
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	b003      	add	sp, #12
 800527a:	bd30      	pop	{r4, r5, pc}
 800527c:	20000074 	.word	0x20000074
 8005280:	20000078 	.word	0x20000078

08005284 <_has_ext_stdout_stderr>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4c04      	ldr	r4, [pc, #16]	; (8005298 <_has_ext_stdout_stderr+0x14>)
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	da01      	bge.n	8005292 <_has_ext_stdout_stderr+0xe>
 800528e:	f7ff ffdf 	bl	8005250 <initialise_semihosting_exts>
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	bd10      	pop	{r4, pc}
 8005296:	bf00      	nop
 8005298:	20000078 	.word	0x20000078

0800529c <initialise_monitor_handles>:
 800529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a0:	b085      	sub	sp, #20
 80052a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005354 <initialise_monitor_handles+0xb8>
 80052a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80052aa:	2303      	movs	r3, #3
 80052ac:	2400      	movs	r4, #0
 80052ae:	9303      	str	r3, [sp, #12]
 80052b0:	af01      	add	r7, sp, #4
 80052b2:	9402      	str	r4, [sp, #8]
 80052b4:	2501      	movs	r5, #1
 80052b6:	4628      	mov	r0, r5
 80052b8:	4639      	mov	r1, r7
 80052ba:	beab      	bkpt	0x00ab
 80052bc:	4605      	mov	r5, r0
 80052be:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005358 <initialise_monitor_handles+0xbc>
 80052c2:	4623      	mov	r3, r4
 80052c4:	4c20      	ldr	r4, [pc, #128]	; (8005348 <initialise_monitor_handles+0xac>)
 80052c6:	f8c8 5000 	str.w	r5, [r8]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ce:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80052d2:	3301      	adds	r3, #1
 80052d4:	2b14      	cmp	r3, #20
 80052d6:	d1fa      	bne.n	80052ce <initialise_monitor_handles+0x32>
 80052d8:	f7ff ffd4 	bl	8005284 <_has_ext_stdout_stderr>
 80052dc:	4d1b      	ldr	r5, [pc, #108]	; (800534c <initialise_monitor_handles+0xb0>)
 80052de:	b1d0      	cbz	r0, 8005316 <initialise_monitor_handles+0x7a>
 80052e0:	f04f 0a03 	mov.w	sl, #3
 80052e4:	2304      	movs	r3, #4
 80052e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80052ea:	2601      	movs	r6, #1
 80052ec:	f8cd a00c 	str.w	sl, [sp, #12]
 80052f0:	9302      	str	r3, [sp, #8]
 80052f2:	4630      	mov	r0, r6
 80052f4:	4639      	mov	r1, r7
 80052f6:	beab      	bkpt	0x00ab
 80052f8:	4683      	mov	fp, r0
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <initialise_monitor_handles+0xb4>)
 80052fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005300:	f8c3 b000 	str.w	fp, [r3]
 8005304:	2308      	movs	r3, #8
 8005306:	f8cd a00c 	str.w	sl, [sp, #12]
 800530a:	9302      	str	r3, [sp, #8]
 800530c:	4630      	mov	r0, r6
 800530e:	4639      	mov	r1, r7
 8005310:	beab      	bkpt	0x00ab
 8005312:	4606      	mov	r6, r0
 8005314:	602e      	str	r6, [r5, #0]
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	bf02      	ittt	eq
 800531c:	4b0c      	ldreq	r3, [pc, #48]	; (8005350 <initialise_monitor_handles+0xb4>)
 800531e:	681b      	ldreq	r3, [r3, #0]
 8005320:	602b      	streq	r3, [r5, #0]
 8005322:	2600      	movs	r6, #0
 8005324:	f8d8 3000 	ldr.w	r3, [r8]
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	6066      	str	r6, [r4, #4]
 800532c:	f7ff ffaa 	bl	8005284 <_has_ext_stdout_stderr>
 8005330:	b130      	cbz	r0, 8005340 <initialise_monitor_handles+0xa4>
 8005332:	4b07      	ldr	r3, [pc, #28]	; (8005350 <initialise_monitor_handles+0xb4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005340:	b005      	add	sp, #20
 8005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005346:	bf00      	nop
 8005348:	20000154 	.word	0x20000154
 800534c:	20000148 	.word	0x20000148
 8005350:	20000150 	.word	0x20000150
 8005354:	08005569 	.word	0x08005569
 8005358:	2000014c 	.word	0x2000014c

0800535c <_isatty>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	f7ff fd77 	bl	8004e50 <findslot>
 8005362:	2509      	movs	r5, #9
 8005364:	4604      	mov	r4, r0
 8005366:	b920      	cbnz	r0, 8005372 <_isatty+0x16>
 8005368:	f7fe fcde 	bl	8003d28 <__errno>
 800536c:	6005      	str	r5, [r0, #0]
 800536e:	4620      	mov	r0, r4
 8005370:	bd70      	pop	{r4, r5, r6, pc}
 8005372:	4628      	mov	r0, r5
 8005374:	4621      	mov	r1, r4
 8005376:	beab      	bkpt	0x00ab
 8005378:	4604      	mov	r4, r0
 800537a:	2c01      	cmp	r4, #1
 800537c:	d0f7      	beq.n	800536e <_isatty+0x12>
 800537e:	f7fe fcd3 	bl	8003d28 <__errno>
 8005382:	2400      	movs	r4, #0
 8005384:	4605      	mov	r5, r0
 8005386:	2613      	movs	r6, #19
 8005388:	4630      	mov	r0, r6
 800538a:	4621      	mov	r1, r4
 800538c:	beab      	bkpt	0x00ab
 800538e:	4606      	mov	r6, r0
 8005390:	602e      	str	r6, [r5, #0]
 8005392:	e7ec      	b.n	800536e <_isatty+0x12>

08005394 <_init>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr

080053a0 <_fini>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr
