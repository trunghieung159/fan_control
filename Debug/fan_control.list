
fan_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005680  08005680  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005688  08005688  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200000ac  0800573c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  0800573c  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da8b  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b3  00000000  00000000  0002db67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d8d  00000000  00000000  000315b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e70a  00000000  00000000  00057345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e62ec  00000000  00000000  00065a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bd3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  0014bd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005538 	.word	0x08005538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08005538 	.word	0x08005538

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <mutate_power>:

uint32_t power_page_address = 0x08080000;
uint32_t control_mode_page_address  = 0x08080800;
uint32_t wind_mode_page_address = 0x08081000;

void mutate_power(POWER power){
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	FLASH_EraseInitTypeDef flash_erase_power_init;
	flash_erase_power_init.TypeErase =  0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	flash_erase_power_init.Banks = FLASH_BANK_2;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
	flash_erase_power_init.NbPages = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
	flash_erase_power_init.Page = power_page;
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <mutate_power+0x60>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	617b      	str	r3, [r7, #20]

	uint32_t* p_power_page = (uint32_t*) power_page_address;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <mutate_power+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	61fb      	str	r3, [r7, #28]
	if(*p_power_page != power){
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d014      	beq.n	80005da <mutate_power+0x56>
		HAL_FLASH_Unlock();
 80005b0:	f000 fd94 	bl	80010dc <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <mutate_power+0x68>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fe72 	bl	80012a4 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, power_page_address, power);
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <mutate_power+0x64>)
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2200      	movs	r2, #0
 80005c8:	461c      	mov	r4, r3
 80005ca:	4615      	mov	r5, r2
 80005cc:	4622      	mov	r2, r4
 80005ce:	462b      	mov	r3, r5
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fd17 	bl	8001004 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80005d6:	f000 fda3 	bl	8001120 <HAL_FLASH_Lock>
	}
}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c8 	.word	0x200000c8
 80005e8:	20000008 	.word	0x20000008
 80005ec:	200000cc 	.word	0x200000cc

080005f0 <mutate_control_mode>:


void mutate_control_mode(CONTROL_MODE control_mode){
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	FLASH_EraseInitTypeDef flash_erase_control_mode_init;
	flash_erase_control_mode_init.TypeErase =  0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
	flash_erase_control_mode_init.Banks = FLASH_BANK_2;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
	flash_erase_control_mode_init.NbPages = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
	flash_erase_control_mode_init.Page = control_mode_page;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <mutate_control_mode+0x60>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	617b      	str	r3, [r7, #20]

	uint32_t* p_control_mode_page = (uint32_t*) control_mode_page_address;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <mutate_control_mode+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	61fb      	str	r3, [r7, #28]
	if(*p_control_mode_page != control_mode){
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	429a      	cmp	r2, r3
 800061a:	d014      	beq.n	8000646 <mutate_control_mode+0x56>
		HAL_FLASH_Unlock();
 800061c:	f000 fd5e 	bl	80010dc <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <mutate_control_mode+0x68>)
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fe3c 	bl	80012a4 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, control_mode_page_address, control_mode);
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <mutate_control_mode+0x64>)
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2200      	movs	r2, #0
 8000634:	461c      	mov	r4, r3
 8000636:	4615      	mov	r5, r2
 8000638:	4622      	mov	r2, r4
 800063a:	462b      	mov	r3, r5
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fce1 	bl	8001004 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000642:	f000 fd6d 	bl	8001120 <HAL_FLASH_Lock>
	}
}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bdb0      	pop	{r4, r5, r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	2000000c 	.word	0x2000000c
 8000658:	200000cc 	.word	0x200000cc

0800065c <mutate_wind_mode>:


void mutate_wind_mode(WIND_MODE wind_mode){
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	FLASH_EraseInitTypeDef flash_erase_wind_mode_init;
	flash_erase_wind_mode_init.TypeErase = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
	flash_erase_wind_mode_init.Banks = FLASH_BANK_2;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
	flash_erase_wind_mode_init.NbPages = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
	flash_erase_wind_mode_init.Page = wind_mode_page;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <mutate_wind_mode+0x60>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	617b      	str	r3, [r7, #20]

	uint32_t* p_wind_mode_page = (uint32_t*) wind_mode_page_address;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <mutate_wind_mode+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	61fb      	str	r3, [r7, #28]
	if(*p_wind_mode_page != wind_mode){
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	429a      	cmp	r2, r3
 8000686:	d014      	beq.n	80006b2 <mutate_wind_mode+0x56>
		HAL_FLASH_Unlock();
 8000688:	f000 fd28 	bl	80010dc <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <mutate_wind_mode+0x68>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fe06 	bl	80012a4 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, wind_mode_page_address, wind_mode);
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <mutate_wind_mode+0x64>)
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2200      	movs	r2, #0
 80006a0:	461c      	mov	r4, r3
 80006a2:	4615      	mov	r5, r2
 80006a4:	4622      	mov	r2, r4
 80006a6:	462b      	mov	r3, r5
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fcab 	bl	8001004 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80006ae:	f000 fd37 	bl	8001120 <HAL_FLASH_Lock>
	}
}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004
 80006c0:	20000010 	.word	0x20000010
 80006c4:	200000cc 	.word	0x200000cc

080006c8 <get_power>:

uint8_t get_power(){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	uint32_t* p_power_page = (uint32_t*) power_page_address;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <get_power+0x20>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	607b      	str	r3, [r7, #4]
	return *p_power_page;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000008 	.word	0x20000008

080006ec <get_control_mode>:

uint8_t get_control_mode(){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	uint32_t* p_control_mode_page = (uint32_t*) control_mode_page_address;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <get_control_mode+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	607b      	str	r3, [r7, #4]
	return *p_control_mode_page;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2000000c 	.word	0x2000000c

08000710 <get_wind_mode>:

uint8_t get_wind_mode(){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
	uint32_t* p_wind_mode_page = (uint32_t*) wind_mode_page_address;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <get_wind_mode+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	607b      	str	r3, [r7, #4]
	return *p_wind_mode_page;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000010 	.word	0x20000010

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000738:	f004 fe82 	bl	8005440 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fa5d 	bl	8000bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f80b 	bl	800075a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f880 	bl	8000848 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000748:	f000 f84e 	bl	80007e8 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//  test_message_handler(receiveBuffer, sendBuffer);
  	  test_get();
 800074c:	f000 f9bc 	bl	8000ac8 <test_get>
  	  test_mutate();
 8000750:	f000 f9cc 	bl	8000aec <test_mutate>
 8000754:	2300      	movs	r3, #0
//  ctrl_mode(1);
//  handle_message(receiveBuffer, sendBuffer);
//  set_wind(0);
//  print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
  /* USER CODE END 3 */
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}

0800075a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b096      	sub	sp, #88	; 0x58
 800075e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2244      	movs	r2, #68	; 0x44
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fc37 	bl	8003fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000780:	f001 f88c 	bl	800189c <HAL_PWREx_ControlVoltageScaling>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078a:	f000 f881 	bl	8000890 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800078e:	2310      	movs	r3, #16
 8000790:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800079a:	2360      	movs	r3, #96	; 0x60
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f8ce 	bl	8001948 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007b2:	f000 f86d 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fc96 	bl	8002100 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007da:	f000 f859 	bl	8000890 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	; 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART1_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART1_UART_Init+0x58>)
 80007f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART1_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART1_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART1_UART_Init+0x58>)
 800082c:	f002 fb48 	bl	8002ec0 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f82b 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000d0 	.word	0x200000d0
 8000844:	40013800 	.word	0x40013800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_GPIO_Init+0x44>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_GPIO_Init+0x44>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_GPIO_Init+0x44>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_GPIO_Init+0x44>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0x44>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0x44>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ac      	sub	sp, #176	; 0xb0
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2288      	movs	r2, #136	; 0x88
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fb69 	bl	8003fdc <memset>
  if(huart->Instance==USART1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a25      	ldr	r2, [pc, #148]	; (80009a4 <HAL_UART_MspInit+0xc0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d142      	bne.n	800099a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000918:	2300      	movs	r3, #0
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fe11 	bl	8002548 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800092c:	f7ff ffb0 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6613      	str	r3, [r2, #96]	; 0x60
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000960:	23c0      	movs	r3, #192	; 0xc0
 8000962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000978:	2307      	movs	r3, #7
 800097a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000982:	4619      	mov	r1, r3
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_UART_MspInit+0xc8>)
 8000986:	f000 fdd1 	bl	800152c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2102      	movs	r1, #2
 800098e:	2025      	movs	r0, #37	; 0x25
 8000990:	f000 fa83 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000994:	2025      	movs	r0, #37	; 0x25
 8000996:	f000 fa9c 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	37b0      	adds	r7, #176	; 0xb0
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f952 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <USART1_IRQHandler+0x10>)
 8000a0a:	f002 faa7 	bl	8002f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000d0 	.word	0x200000d0

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f003 fa9e 	bl	8003f88 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20018000 	.word	0x20018000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000154 	.word	0x20000154
 8000a80:	20000218 	.word	0x20000218

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <print_state>:
 */


#include "test_flash_mutate.h"

void print_state(uint8_t state){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	printf("Actual:   %d\n", state);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <print_state+0x1c>)
 8000ab8:	f003 fa98 	bl	8003fec <iprintf>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	08005550 	.word	0x08005550

08000ac8 <test_get>:
void test_get(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	mutate_power(OFF);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fd59 	bl	8000584 <mutate_power>
	printf("Expected: 0\n");
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <test_get+0x20>)
 8000ad4:	f003 fb10 	bl	80040f8 <puts>
	print_state(get_power());
 8000ad8:	f7ff fdf6 	bl	80006c8 <get_power>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ffe2 	bl	8000aa8 <print_state>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08005560 	.word	0x08005560

08000aec <test_mutate>:
void test_mutate(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	mutate_power(OFF);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fd47 	bl	8000584 <mutate_power>
	printf("Expected: 0\n");
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <test_mutate+0xb0>)
 8000af8:	f003 fafe 	bl	80040f8 <puts>
	print_state(get_power());
 8000afc:	f7ff fde4 	bl	80006c8 <get_power>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ffd0 	bl	8000aa8 <print_state>

	mutate_power(ON);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fd3b 	bl	8000584 <mutate_power>
	printf("Expected: 1\n");
 8000b0e:	4824      	ldr	r0, [pc, #144]	; (8000ba0 <test_mutate+0xb4>)
 8000b10:	f003 faf2 	bl	80040f8 <puts>
	print_state(get_power());
 8000b14:	f7ff fdd8 	bl	80006c8 <get_power>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ffc4 	bl	8000aa8 <print_state>

	mutate_control_mode(AUTOMATIC);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fd65 	bl	80005f0 <mutate_control_mode>
	printf("Expected: 0\n");
 8000b26:	481d      	ldr	r0, [pc, #116]	; (8000b9c <test_mutate+0xb0>)
 8000b28:	f003 fae6 	bl	80040f8 <puts>
	print_state(get_control_mode());
 8000b2c:	f7ff fdde 	bl	80006ec <get_control_mode>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffb8 	bl	8000aa8 <print_state>

	mutate_control_mode(MANUAL);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fd59 	bl	80005f0 <mutate_control_mode>
	printf("Expected: 1\n");
 8000b3e:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <test_mutate+0xb4>)
 8000b40:	f003 fada 	bl	80040f8 <puts>
	print_state(get_control_mode());
 8000b44:	f7ff fdd2 	bl	80006ec <get_control_mode>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ffac 	bl	8000aa8 <print_state>

	mutate_wind_mode(LEVEL_0);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fd83 	bl	800065c <mutate_wind_mode>
	printf("Expected: 0\n");
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <test_mutate+0xb0>)
 8000b58:	f003 face 	bl	80040f8 <puts>
	print_state(get_wind_mode());
 8000b5c:	f7ff fdd8 	bl	8000710 <get_wind_mode>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffa0 	bl	8000aa8 <print_state>

	mutate_wind_mode(LEVEL_1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff fd77 	bl	800065c <mutate_wind_mode>
	printf("Expected: 1\n");
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <test_mutate+0xb4>)
 8000b70:	f003 fac2 	bl	80040f8 <puts>
	print_state(get_wind_mode());
 8000b74:	f7ff fdcc 	bl	8000710 <get_wind_mode>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff94 	bl	8000aa8 <print_state>

	mutate_wind_mode(LEVEL_2);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fd6b 	bl	800065c <mutate_wind_mode>
	printf("Expected: 2\n");
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <test_mutate+0xb8>)
 8000b88:	f003 fab6 	bl	80040f8 <puts>
	print_state(get_wind_mode());
 8000b8c:	f7ff fdc0 	bl	8000710 <get_wind_mode>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff88 	bl	8000aa8 <print_state>

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08005560 	.word	0x08005560
 8000ba0:	0800556c 	.word	0x0800556c
 8000ba4:	08005578 	.word	0x08005578

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff ff6a 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f003 f9dd 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fdab 	bl	8000734 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000bec:	08005690 	.word	0x08005690
  ldr r2, =_sbss
 8000bf0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000bf4:	20000218 	.word	0x20000218

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>

08000bfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f93d 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f80e 	bl	8000c2c <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	e001      	b.n	8000c20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c1c:	f7ff fe3e 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_InitTick+0x6c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d023      	beq.n	8000c88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_InitTick+0x70>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_InitTick+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f949 	bl	8000eee <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10f      	bne.n	8000c82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d809      	bhi.n	8000c7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 f913 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_InitTick+0x74>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	e004      	b.n	8000c8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	e001      	b.n	8000c8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000001c 	.word	0x2000001c
 8000c9c:	20000014 	.word	0x20000014
 8000ca0:	20000018 	.word	0x20000018

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000001c 	.word	0x2000001c
 8000cc8:	20000158 	.word	0x20000158

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000158 	.word	0x20000158

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff29 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff3e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff8e 	bl	8000dd8 <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff31 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa2 	bl	8000e40 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d008      	beq.n	8000f30 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2204      	movs	r2, #4
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e022      	b.n	8000f76 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 020e 	bic.w	r2, r2, #14
 8000f3e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	f003 021c 	and.w	r2, r3, #28
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d005      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e029      	b.n	8000ffa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 020e 	bic.w	r2, r2, #14
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f003 021c 	and.w	r2, r3, #28
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	4798      	blx	r3
    }
  }
  return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_FLASH_Program+0xd0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_FLASH_Program+0x1e>
 800101e:	2302      	movs	r3, #2
 8001020:	e053      	b.n	80010ca <HAL_FLASH_Program+0xc6>
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_FLASH_Program+0xd0>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800102c:	f000 f888 	bl	8001140 <FLASH_WaitForLastOperation>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d143      	bne.n	80010c2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_FLASH_Program+0xd0>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <HAL_FLASH_Program+0xd4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001048:	2b00      	cmp	r3, #0
 800104a:	d009      	beq.n	8001060 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_FLASH_Program+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <HAL_FLASH_Program+0xd4>)
 8001052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_FLASH_Program+0xd0>)
 800105a:	2202      	movs	r2, #2
 800105c:	771a      	strb	r2, [r3, #28]
 800105e:	e002      	b.n	8001066 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_FLASH_Program+0xd0>)
 8001062:	2200      	movs	r2, #0
 8001064:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d107      	bne.n	800107c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800106c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f000 f8bb 	bl	80011ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001076:	2301      	movs	r3, #1
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e010      	b.n	800109e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <HAL_FLASH_Program+0x84>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d10a      	bne.n	800109e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	68b8      	ldr	r0, [r7, #8]
 800108e:	f000 f8d3 	bl	8001238 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d102      	bne.n	800109e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001098:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800109c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800109e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010a2:	f000 f84d 	bl	8001140 <FLASH_WaitForLastOperation>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_FLASH_Program+0xd4>)
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <HAL_FLASH_Program+0xd4>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80010be:	f000 f9eb 	bl	8001498 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_FLASH_Program+0xd0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]

  return status;
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000020 	.word	0x20000020
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_FLASH_Unlock+0x38>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da0b      	bge.n	8001106 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_FLASH_Unlock+0x38>)
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_FLASH_Unlock+0x3c>)
 80010f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_FLASH_Unlock+0x38>)
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_FLASH_Unlock+0x40>)
 80010f8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_FLASH_Unlock+0x38>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da01      	bge.n	8001106 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001106:	79fb      	ldrb	r3, [r7, #7]
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40022000 	.word	0x40022000
 8001118:	45670123 	.word	0x45670123
 800111c:	cdef89ab 	.word	0xcdef89ab

08001120 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_FLASH_Lock+0x1c>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_FLASH_Lock+0x1c>)
 800112a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40022000 	.word	0x40022000

08001140 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fdc0 	bl	8000ccc <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800114e:	e00d      	b.n	800116c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001156:	d009      	beq.n	800116c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001158:	f7ff fdb8 	bl	8000ccc <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d801      	bhi.n	800116c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e037      	b.n	80011dc <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1eb      	bne.n	8001150 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01e      	beq.n	80011c8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <FLASH_WaitForLastOperation+0xa8>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4313      	orrs	r3, r2
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <FLASH_WaitForLastOperation+0xa8>)
 8001194:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <FLASH_WaitForLastOperation+0x70>
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	618b      	str	r3, [r1, #24]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <FLASH_WaitForLastOperation+0x84>
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011c2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e009      	b.n	80011dc <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <FLASH_WaitForLastOperation+0xa4>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40022000 	.word	0x40022000
 80011e8:	20000020 	.word	0x20000020

080011ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <FLASH_Program_DoubleWord+0x48>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <FLASH_Program_DoubleWord+0x48>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800120a:	f3bf 8f6f 	isb	sy
}
 800120e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	000a      	movs	r2, r1
 800121e:	2300      	movs	r3, #0
 8001220:	68f9      	ldr	r1, [r7, #12]
 8001222:	3104      	adds	r1, #4
 8001224:	4613      	mov	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40022000 	.word	0x40022000

08001238 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <FLASH_Program_Fast+0x68>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <FLASH_Program_Fast+0x68>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800125a:	f3ef 8310 	mrs	r3, PRIMASK
 800125e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001260:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	3304      	adds	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3304      	adds	r3, #4
 800127a:	617b      	str	r3, [r7, #20]
    row_index--;
 800127c:	7ffb      	ldrb	r3, [r7, #31]
 800127e:	3b01      	subs	r3, #1
 8001280:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ef      	bne.n	8001268 <FLASH_Program_Fast+0x30>
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f383 8810 	msr	PRIMASK, r3
}
 8001292:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001294:	bf00      	nop
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_FLASHEx_Erase+0x16>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e087      	b.n	80013ca <HAL_FLASHEx_Erase+0x126>
 80012ba:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012c4:	f7ff ff3c 	bl	8001140 <FLASH_WaitForLastOperation>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d177      	bne.n	80013c2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80012e4:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d009      	beq.n	8001304 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 80012f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012fa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 80012fe:	2203      	movs	r2, #3
 8001300:	771a      	strb	r2, [r3, #28]
 8001302:	e016      	b.n	8001332 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 8001306:	2201      	movs	r2, #1
 8001308:	771a      	strb	r2, [r3, #28]
 800130a:	e012      	b.n	8001332 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 800131e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001322:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 8001326:	2202      	movs	r2, #2
 8001328:	771a      	strb	r2, [r3, #28]
 800132a:	e002      	b.n	8001332 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 800132e:	2200      	movs	r2, #0
 8001330:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d113      	bne.n	8001362 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f84c 	bl	80013dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001344:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001348:	f7ff fefa 	bl	8001140 <FLASH_WaitForLastOperation>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 8001356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800135a:	f023 0304 	bic.w	r3, r3, #4
 800135e:	6153      	str	r3, [r2, #20]
 8001360:	e02d      	b.n	80013be <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001368:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	e01d      	b.n	80013ae <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4619      	mov	r1, r3
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f000 f857 	bl	800142c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800137e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001382:	f7ff fedd 	bl	8001140 <FLASH_WaitForLastOperation>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_FLASHEx_Erase+0x134>)
 8001390:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001394:	f023 0302 	bic.w	r3, r3, #2
 8001398:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	601a      	str	r2, [r3, #0]
          break;
 80013a6:	e00a      	b.n	80013be <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3d9      	bcc.n	8001372 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80013be:	f000 f86b 	bl	8001498 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_FLASHEx_Erase+0x130>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]

  return status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000020 	.word	0x20000020
 80013d8:	40022000 	.word	0x40022000

080013dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <FLASH_MassErase+0x4c>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <FLASH_MassErase+0x4c>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <FLASH_MassErase+0x4c>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <FLASH_MassErase+0x4c>)
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <FLASH_MassErase+0x4c>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <FLASH_MassErase+0x4c>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141a:	6153      	str	r3, [r2, #20]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40022000 	.word	0x40022000

0800142c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <FLASH_PageErase+0x68>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <FLASH_PageErase+0x68>)
 8001446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800144a:	6153      	str	r3, [r2, #20]
 800144c:	e005      	b.n	800145a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <FLASH_PageErase+0x68>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <FLASH_PageErase+0x68>)
 8001454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001458:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <FLASH_PageErase+0x68>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800146a:	490a      	ldr	r1, [pc, #40]	; (8001494 <FLASH_PageErase+0x68>)
 800146c:	4313      	orrs	r3, r2
 800146e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <FLASH_PageErase+0x68>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <FLASH_PageErase+0x68>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <FLASH_PageErase+0x68>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <FLASH_PageErase+0x68>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001486:	6153      	str	r3, [r2, #20]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40022000 	.word	0x40022000

08001498 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <FLASH_FlushCaches+0x8c>)
 80014a0:	7f1b      	ldrb	r3, [r3, #28]
 80014a2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d002      	beq.n	80014b0 <FLASH_FlushCaches+0x18>
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d117      	bne.n	80014e0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d002      	beq.n	80014ec <FLASH_FlushCaches+0x54>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d111      	bne.n	8001510 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <FLASH_FlushCaches+0x90>)
 80014fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001502:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <FLASH_FlushCaches+0x90>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <FLASH_FlushCaches+0x90>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <FLASH_FlushCaches+0x8c>)
 8001512:	2200      	movs	r2, #0
 8001514:	771a      	strb	r2, [r3, #28]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000020 	.word	0x20000020
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	e17f      	b.n	800183c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8171 	beq.w	8001836 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d005      	beq.n	800156c <HAL_GPIO_Init+0x40>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d130      	bne.n	80015ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a2:	2201      	movs	r2, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 0201 	and.w	r2, r3, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d118      	bne.n	800160c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	6939      	ldr	r1, [r7, #16]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80ac 	beq.w	8001836 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_GPIO_Init+0x330>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_GPIO_Init+0x330>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ea:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_GPIO_Init+0x330>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016f6:	4a5a      	ldr	r2, [pc, #360]	; (8001860 <HAL_GPIO_Init+0x334>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x242>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <HAL_GPIO_Init+0x338>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x23e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_GPIO_Init+0x33c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x23a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_GPIO_Init+0x340>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x236>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_GPIO_Init+0x344>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x232>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <HAL_GPIO_Init+0x348>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x22e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x34c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x22a>
 8001752:	2306      	movs	r3, #6
 8001754:	e00c      	b.n	8001770 <HAL_GPIO_Init+0x244>
 8001756:	2307      	movs	r3, #7
 8001758:	e00a      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800175a:	2305      	movs	r3, #5
 800175c:	e008      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800175e:	2304      	movs	r3, #4
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x244>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x244>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800176e:	2300      	movs	r3, #0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_GPIO_Init+0x334>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_GPIO_Init+0x350>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <HAL_GPIO_Init+0x350>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017b8:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_GPIO_Init+0x350>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_GPIO_Init+0x350>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_GPIO_Init+0x350>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_GPIO_Init+0x350>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_GPIO_Init+0x350>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_GPIO_Init+0x350>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae78 	bne.w	800153c <HAL_GPIO_Init+0x10>
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	48000400 	.word	0x48000400
 8001868:	48000800 	.word	0x48000800
 800186c:	48000c00 	.word	0x48000c00
 8001870:	48001000 	.word	0x48001000
 8001874:	48001400 	.word	0x48001400
 8001878:	48001800 	.word	0x48001800
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_PWREx_GetVoltageRange+0x18>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40007000 	.word	0x40007000

0800189c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018aa:	d130      	bne.n	800190e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b8:	d038      	beq.n	800192c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2232      	movs	r2, #50	; 0x32
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e0:	e002      	b.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f4:	d102      	bne.n	80018fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f2      	bne.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001908:	d110      	bne.n	800192c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e00f      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191a:	d007      	beq.n	800192c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001924:	4a05      	ldr	r2, [pc, #20]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40007000 	.word	0x40007000
 8001940:	20000014 	.word	0x20000014
 8001944:	431bde83 	.word	0x431bde83

08001948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e3ca      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195a:	4b97      	ldr	r3, [pc, #604]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001964:	4b94      	ldr	r3, [pc, #592]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80e4 	beq.w	8001b44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_RCC_OscConfig+0x4a>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	f040 808b 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	f040 8087 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x62>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e3a2      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	4b82      	ldr	r3, [pc, #520]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <HAL_RCC_OscConfig+0x7c>
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c2:	e005      	b.n	80019d0 <HAL_RCC_OscConfig+0x88>
 80019c4:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d223      	bcs.n	8001a1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fd55 	bl	8002488 <RCC_SetFlashLatencyFromMSIRange>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e383      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e8:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	496d      	ldr	r1, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a06:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	4968      	ldr	r1, [pc, #416]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
 8001a1a:	e025      	b.n	8001a68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	495b      	ldr	r1, [pc, #364]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fd15 	bl	8002488 <RCC_SetFlashLatencyFromMSIRange>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e343      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a68:	f000 fc4a 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	4950      	ldr	r1, [pc, #320]	; (8001bbc <HAL_RCC_OscConfig+0x274>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <HAL_RCC_OscConfig+0x278>)
 8001a86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8cd 	bl	8000c2c <HAL_InitTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d052      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	e327      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d032      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f90a 	bl	8000ccc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abc:	f7ff f906 	bl	8000ccc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e310      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a36      	ldr	r2, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4931      	ldr	r1, [pc, #196]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	e01a      	b.n	8001b44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f8d7 	bl	8000ccc <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b22:	f7ff f8d3 	bl	8000ccc <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e2dd      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1da>
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d074      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d005      	beq.n	8001b62 <HAL_RCC_OscConfig+0x21a>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b0c      	cmp	r3, #12
 8001b5a:	d10e      	bne.n	8001b7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d10b      	bne.n	8001b7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d064      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d160      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e2ba      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x24a>
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e026      	b.n	8001be0 <HAL_RCC_OscConfig+0x298>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9a:	d115      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x280>
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a02      	ldr	r2, [pc, #8]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x298>
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08005584 	.word	0x08005584
 8001bc0:	20000014 	.word	0x20000014
 8001bc4:	20000018 	.word	0x20000018
 8001bc8:	4ba0      	ldr	r3, [pc, #640]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a9f      	ldr	r2, [pc, #636]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b9d      	ldr	r3, [pc, #628]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a9c      	ldr	r2, [pc, #624]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f870 	bl	8000ccc <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f86c 	bl	8000ccc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e276      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x2a8>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f85c 	bl	8000ccc <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff f858 	bl	8000ccc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e262      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2a:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2d0>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d060      	beq.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_OscConfig+0x310>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d119      	bne.n	8001c86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d116      	bne.n	8001c86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_OscConfig+0x328>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e23f      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	4973      	ldr	r1, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	e040      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d023      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f817 	bl	8000ccc <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f813 	bl	8000ccc <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e21d      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	495f      	ldr	r1, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e018      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fff3 	bl	8000ccc <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7fe ffef 	bl	8000ccc <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1f9      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d03c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d22:	4a4a      	ldr	r2, [pc, #296]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7fe ffce 	bl	8000ccc <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7fe ffca 	bl	8000ccc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1d4      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ef      	beq.n	8001d34 <HAL_RCC_OscConfig+0x3ec>
 8001d54:	e01b      	b.n	8001d8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	4a3b      	ldr	r2, [pc, #236]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7fe ffb1 	bl	8000ccc <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7fe ffad 	bl	8000ccc <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1b7      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ef      	bne.n	8001d6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80a6 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d118      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de0:	f7fe ff74 	bl	8000ccc <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de8:	f7fe ff70 	bl	8000ccc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e17a      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4d8>
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1e:	e029      	b.n	8001e74 <HAL_RCC_OscConfig+0x52c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d115      	bne.n	8001e54 <HAL_RCC_OscConfig+0x50c>
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x52c>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	4b9c      	ldr	r3, [pc, #624]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a9b      	ldr	r2, [pc, #620]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	4b98      	ldr	r3, [pc, #608]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a97      	ldr	r2, [pc, #604]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d016      	beq.n	8001eaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7fe ff26 	bl	8000ccc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7fe ff22 	bl	8000ccc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e12a      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ed      	beq.n	8001e84 <HAL_RCC_OscConfig+0x53c>
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ff0f 	bl	8000ccc <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe ff0b 	bl	8000ccc <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e113      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec8:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ed      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a79      	ldr	r2, [pc, #484]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80fe 	beq.w	80020ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	f040 80d0 	bne.w	800209c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001efc:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d130      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d127      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11f      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f3c:	2a07      	cmp	r2, #7
 8001f3e:	bf14      	ite	ne
 8001f40:	2201      	movne	r2, #1
 8001f42:	2200      	moveq	r2, #0
 8001f44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d113      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d06e      	beq.n	8002050 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d069      	beq.n	800204c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0ad      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f94:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa0:	f7fe fe94 	bl	8000ccc <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe fe90 	bl	8000ccc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e09a      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc6:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fd6:	3a01      	subs	r2, #1
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fe0:	0212      	lsls	r2, r2, #8
 8001fe2:	4311      	orrs	r1, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fe8:	0852      	lsrs	r2, r2, #1
 8001fea:	3a01      	subs	r2, #1
 8001fec:	0552      	lsls	r2, r2, #21
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ff4:	0852      	lsrs	r2, r2, #1
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	0652      	lsls	r2, r2, #25
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002000:	0912      	lsrs	r2, r2, #4
 8002002:	0452      	lsls	r2, r2, #17
 8002004:	430a      	orrs	r2, r1
 8002006:	4930      	ldr	r1, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002022:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002024:	f7fe fe52 	bl	8000ccc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe fe4e 	bl	8000ccc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e058      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800204a:	e050      	b.n	80020ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04f      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d148      	bne.n	80020ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002072:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002074:	f7fe fe2a 	bl	8000ccc <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe fe26 	bl	8000ccc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e030      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x734>
 800209a:	e028      	b.n	80020ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d023      	beq.n	80020ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_RCC_OscConfig+0x780>)
 80020a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7fe fe0d 	bl	8000ccc <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b4:	e00c      	b.n	80020d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe fe09 	bl	8000ccc <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d905      	bls.n	80020d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e013      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_OscConfig+0x7b0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ec      	bne.n	80020b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x7b0>)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4905      	ldr	r1, [pc, #20]	; (80020f8 <HAL_RCC_OscConfig+0x7b0>)
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_OscConfig+0x7b4>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
 80020e8:	e001      	b.n	80020ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	feeefffc 	.word	0xfeeefffc

08002100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0e7      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d910      	bls.n	8002144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b72      	ldr	r3, [pc, #456]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	4970      	ldr	r1, [pc, #448]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b6e      	ldr	r3, [pc, #440]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0cf      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d010      	beq.n	8002172 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800215c:	429a      	cmp	r2, r3
 800215e:	d908      	bls.n	8002172 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4960      	ldr	r1, [pc, #384]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d04c      	beq.n	8002218 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d121      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0a6      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e09a      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b6:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e08e      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e086      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4943      	ldr	r1, [pc, #268]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e8:	f7fe fd70 	bl	8000ccc <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7fe fd6c 	bl	8000ccc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e06e      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002230:	429a      	cmp	r2, r3
 8002232:	d208      	bcs.n	8002246 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	492b      	ldr	r1, [pc, #172]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d210      	bcs.n	8002276 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 0207 	bic.w	r2, r3, #7
 800225c:	4923      	ldr	r1, [pc, #140]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_RCC_ClockConfig+0x1ec>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e036      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4918      	ldr	r1, [pc, #96]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4910      	ldr	r1, [pc, #64]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b4:	f000 f824 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	490b      	ldr	r1, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1f4>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1f8>)
 80022d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1fc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fca7 	bl	8000c2c <HAL_InitTick>
 80022de:	4603      	mov	r3, r0
 80022e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80022e2:	7afb      	ldrb	r3, [r7, #11]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08005584 	.word	0x08005584
 80022f8:	20000014 	.word	0x20000014
 80022fc:	20000018 	.word	0x20000018

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230e:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x34>
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d121      	bne.n	8002372 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d11e      	bne.n	8002372 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002340:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e005      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800235c:	4a2b      	ldr	r2, [pc, #172]	; (800240c <HAL_RCC_GetSysClockFreq+0x10c>)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10d      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d102      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCC_GetSysClockFreq+0x110>)
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	e004      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d101      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_RCC_GetSysClockFreq+0x114>)
 8002386:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d134      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d003      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0xac>
 80023a4:	e005      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_GetSysClockFreq+0x110>)
 80023a8:	617b      	str	r3, [r7, #20]
      break;
 80023aa:	e005      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ae:	617b      	str	r3, [r7, #20]
      break;
 80023b0:	e002      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	617b      	str	r3, [r7, #20]
      break;
 80023b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	3301      	adds	r3, #1
 80023c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	fb03 f202 	mul.w	r2, r3, r2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	0e5b      	lsrs	r3, r3, #25
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	3301      	adds	r3, #1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023f8:	69bb      	ldr	r3, [r7, #24]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	0800559c 	.word	0x0800559c
 8002410:	00f42400 	.word	0x00f42400
 8002414:	007a1200 	.word	0x007a1200

08002418 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_RCC_GetHCLKFreq+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000014 	.word	0x20000014

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002434:	f7ff fff0 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4904      	ldr	r1, [pc, #16]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	08005594 	.word	0x08005594

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002460:	f7ff ffda 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	08005594 	.word	0x08005594

08002488 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024a0:	f7ff f9ee 	bl	8001880 <HAL_PWREx_GetVoltageRange>
 80024a4:	6178      	str	r0, [r7, #20]
 80024a6:	e014      	b.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	4a24      	ldr	r2, [pc, #144]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	; 0x58
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024c0:	f7ff f9de 	bl	8001880 <HAL_PWREx_GetVoltageRange>
 80024c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d8:	d10b      	bne.n	80024f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b80      	cmp	r3, #128	; 0x80
 80024de:	d919      	bls.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2ba0      	cmp	r3, #160	; 0xa0
 80024e4:	d902      	bls.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e6:	2302      	movs	r3, #2
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e013      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ec:	2301      	movs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	e010      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d902      	bls.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024f8:	2303      	movs	r3, #3
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	e00a      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d102      	bne.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002504:	2302      	movs	r3, #2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e004      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d101      	bne.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 0207 	bic.w	r2, r3, #7
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	40022000 	.word	0x40022000

08002548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002550:	2300      	movs	r3, #0
 8002552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002554:	2300      	movs	r3, #0
 8002556:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002560:	2b00      	cmp	r3, #0
 8002562:	d041      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002568:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800256c:	d02a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800256e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002572:	d824      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800257a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800257e:	d81e      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002588:	d010      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800258a:	e018      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800258c:	4b86      	ldr	r3, [pc, #536]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a85      	ldr	r2, [pc, #532]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002598:	e015      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fabb 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025aa:	e00c      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3320      	adds	r3, #32
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fba6 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025bc:	e003      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	74fb      	strb	r3, [r7, #19]
      break;
 80025c2:	e000      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025cc:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025da:	4973      	ldr	r1, [pc, #460]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025e2:	e001      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d041      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025fc:	d02a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002602:	d824      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002604:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002608:	d008      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800260a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800260e:	d81e      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d010      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800261a:	e018      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800261c:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a61      	ldr	r2, [pc, #388]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002628:	e015      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fa73 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800263a:	e00c      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3320      	adds	r3, #32
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fb5e 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800264c:	e003      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	74fb      	strb	r3, [r7, #19]
      break;
 8002652:	e000      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800265c:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800266a:	494f      	ldr	r1, [pc, #316]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002672:	e001      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a0 	beq.w	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800269a:	2300      	movs	r3, #0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00d      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6593      	str	r3, [r2, #88]	; 0x58
 80026ac:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026bc:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fb00 	bl	8000ccc <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ce:	e009      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7fe fafc 	bl	8000ccc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d902      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	74fb      	strb	r3, [r7, #19]
        break;
 80026e2:	e005      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ef      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d15c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002700:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01f      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	d019      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fabb 	bl	8000ccc <HAL_GetTick>
 8002756:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002758:	e00b      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe fab7 	bl	8000ccc <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d902      	bls.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	74fb      	strb	r3, [r7, #19]
            break;
 8002770:	e006      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ec      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800279e:	e009      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
 80027a4:	e006      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b4:	7c7b      	ldrb	r3, [r7, #17]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ba:	4b9e      	ldr	r3, [pc, #632]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	4a9d      	ldr	r2, [pc, #628]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d2:	4b98      	ldr	r3, [pc, #608]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f023 0203 	bic.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	4994      	ldr	r1, [pc, #592]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027f4:	4b8f      	ldr	r3, [pc, #572]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 020c 	bic.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	498c      	ldr	r1, [pc, #560]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002816:	4b87      	ldr	r3, [pc, #540]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4983      	ldr	r1, [pc, #524]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002838:	4b7e      	ldr	r3, [pc, #504]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	497b      	ldr	r1, [pc, #492]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800285a:	4b76      	ldr	r3, [pc, #472]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	4972      	ldr	r1, [pc, #456]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800287c:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	496a      	ldr	r1, [pc, #424]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	4961      	ldr	r1, [pc, #388]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028c0:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	4959      	ldr	r1, [pc, #356]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e2:	4b54      	ldr	r3, [pc, #336]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	4950      	ldr	r1, [pc, #320]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	4948      	ldr	r1, [pc, #288]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002926:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	493f      	ldr	r1, [pc, #252]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d028      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	4937      	ldr	r1, [pc, #220]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002966:	d106      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
 8002974:	e011      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800297e:	d10c      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f8c8 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002996:	7cfb      	ldrb	r3, [r7, #19]
 8002998:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d028      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	491f      	ldr	r1, [pc, #124]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c4:	d106      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d0:	60d3      	str	r3, [r2, #12]
 80029d2:	e011      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f899 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02b      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	4908      	ldr	r1, [pc, #32]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a22:	d109      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a02      	ldr	r2, [pc, #8]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2e:	60d3      	str	r3, [r2, #12]
 8002a30:	e014      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f867 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02f      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a76:	4928      	ldr	r1, [pc, #160]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f844 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d014      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	74bb      	strb	r3, [r7, #18]
 8002aa2:	e011      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3320      	adds	r3, #32
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f925 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae2:	490d      	ldr	r1, [pc, #52]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2a:	4b75      	ldr	r3, [pc, #468]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d018      	beq.n	8002b68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0203 	and.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d047      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e044      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d018      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0x86>
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d825      	bhi.n	8002bc0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x62>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d009      	beq.n	8002b90 <RCCEx_PLLSAI1_Config+0x74>
 8002b7c:	e020      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7e:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e01a      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b90:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e013      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bbe:	e006      	b.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e004      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	430b      	orrs	r3, r1
 8002bec:	4944      	ldr	r1, [pc, #272]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d17d      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bf8:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe f862 	bl	8000ccc <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c0a:	e009      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c0c:	f7fe f85e 	bl	8000ccc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1e:	e005      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d160      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	0912      	lsrs	r2, r2, #4
 8002c50:	0452      	lsls	r2, r2, #17
 8002c52:	430a      	orrs	r2, r1
 8002c54:	492a      	ldr	r1, [pc, #168]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]
 8002c5a:	e027      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d112      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6892      	ldr	r2, [r2, #8]
 8002c72:	0211      	lsls	r1, r2, #8
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6912      	ldr	r2, [r2, #16]
 8002c78:	0852      	lsrs	r2, r2, #1
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0552      	lsls	r2, r2, #21
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	491f      	ldr	r1, [pc, #124]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	610b      	str	r3, [r1, #16]
 8002c86:	e011      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	0211      	lsls	r1, r2, #8
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6952      	ldr	r2, [r2, #20]
 8002c9e:	0852      	lsrs	r2, r2, #1
 8002ca0:	3a01      	subs	r2, #1
 8002ca2:	0652      	lsls	r2, r2, #25
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	4916      	ldr	r1, [pc, #88]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe f808 	bl	8000ccc <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cbe:	e009      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc0:	f7fe f804 	bl	8000ccc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d902      	bls.n	8002cd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd2:	e005      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ef      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	4904      	ldr	r1, [pc, #16]	; (8002d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000

08002d04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d12:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d018      	beq.n	8002d50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0203 	and.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d10d      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
       ||
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d36:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
       ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d047      	beq.n	8002dda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e044      	b.n	8002dda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d018      	beq.n	8002d8a <RCCEx_PLLSAI2_Config+0x86>
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d825      	bhi.n	8002da8 <RCCEx_PLLSAI2_Config+0xa4>
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d002      	beq.n	8002d66 <RCCEx_PLLSAI2_Config+0x62>
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d009      	beq.n	8002d78 <RCCEx_PLLSAI2_Config+0x74>
 8002d64:	e020      	b.n	8002da8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d66:	4b55      	ldr	r3, [pc, #340]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11d      	bne.n	8002dae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d76:	e01a      	b.n	8002dae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e013      	b.n	8002db2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002da6:	e006      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e004      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10d      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dbe:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	4939      	ldr	r1, [pc, #228]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d167      	bne.n	8002eb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fd ff6e 	bl	8000ccc <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002df2:	e009      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df4:	f7fd ff6a 	bl	8000ccc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d902      	bls.n	8002e08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	73fb      	strb	r3, [r7, #15]
        break;
 8002e06:	e005      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e08:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ef      	bne.n	8002df4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d14a      	bne.n	8002eb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	0211      	lsls	r1, r2, #8
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	0912      	lsrs	r2, r2, #4
 8002e38:	0452      	lsls	r2, r2, #17
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	491f      	ldr	r1, [pc, #124]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	614b      	str	r3, [r1, #20]
 8002e42:	e011      	b.n	8002e68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	0211      	lsls	r1, r2, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6912      	ldr	r2, [r2, #16]
 8002e5a:	0852      	lsrs	r2, r2, #1
 8002e5c:	3a01      	subs	r2, #1
 8002e5e:	0652      	lsls	r2, r2, #25
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4916      	ldr	r1, [pc, #88]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fd ff2a 	bl	8000ccc <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e7a:	e009      	b.n	8002e90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e7c:	f7fd ff26 	bl	8000ccc <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d902      	bls.n	8002e90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8e:	e005      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ef      	beq.n	8002e7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4904      	ldr	r1, [pc, #16]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e040      	b.n	8002f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fcfe 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fb2e 	bl	8003560 <UART_SetConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e022      	b.n	8002f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fdda 	bl	8003ad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fe61 	bl	8003c14 <UART_CheckIdleState>
 8002f52:	4603      	mov	r3, r0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0ba      	sub	sp, #232	; 0xe8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f86:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d115      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 82a6 	beq.w	8003506 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
      }
      return;
 8002fc2:	e2a0      	b.n	8003506 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8117 	beq.w	80031fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fde:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <HAL_UART_IRQHandler+0x298>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 810a 	beq.w	80031fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d011      	beq.n	8003018 <HAL_UART_IRQHandler+0xbc>
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2201      	movs	r2, #1
 8003006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d011      	beq.n	8003048 <HAL_UART_IRQHandler+0xec>
 8003024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2202      	movs	r2, #2
 8003036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d011      	beq.n	8003078 <HAL_UART_IRQHandler+0x11c>
 8003054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2204      	movs	r2, #4
 8003066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d017      	beq.n	80030b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003094:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2208      	movs	r2, #8
 80030a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	f043 0208 	orr.w	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d012      	beq.n	80030e6 <HAL_UART_IRQHandler+0x18a>
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 820c 	beq.w	800350a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d005      	beq.n	800313e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003136:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04f      	beq.n	80031de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fe75 	bl	8003e2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d141      	bne.n	80031d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3308      	adds	r3, #8
 8003158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800316c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800317e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800318a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1d9      	bne.n	8003152 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <HAL_UART_IRQHandler+0x29c>)
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fee5 	bl	8000f82 <HAL_DMA_Abort_IT>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031c8:	4610      	mov	r0, r2
 80031ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	e00f      	b.n	80031ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f9b0 	bl	8003534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	e00b      	b.n	80031ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9ac 	bl	8003534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	e007      	b.n	80031ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9a8 	bl	8003534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031ec:	e18d      	b.n	800350a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ee:	bf00      	nop
    return;
 80031f0:	e18b      	b.n	800350a <HAL_UART_IRQHandler+0x5ae>
 80031f2:	bf00      	nop
 80031f4:	04000120 	.word	0x04000120
 80031f8:	08003ef5 	.word	0x08003ef5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8146 	bne.w	8003492 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 813f 	beq.w	8003492 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8138 	beq.w	8003492 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2210      	movs	r2, #16
 8003228:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	f040 80b4 	bne.w	80033a2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003246:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 815f 	beq.w	800350e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800325a:	429a      	cmp	r2, r3
 800325c:	f080 8157 	bcs.w	800350e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003266:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	f040 8085 	bne.w	8003386 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1da      	bne.n	800327c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e1      	bne.n	80032c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3308      	adds	r3, #8
 8003322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800332c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e3      	bne.n	8003302 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003356:	f023 0310 	bic.w	r3, r3, #16
 800335a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003368:	65bb      	str	r3, [r7, #88]	; 0x58
 800336a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800336e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e4      	bne.n	8003346 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fdc0 	bl	8000f06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003392:	b29b      	uxth	r3, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	b29b      	uxth	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8d4 	bl	8003548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033a0:	e0b5      	b.n	800350e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80a7 	beq.w	8003512 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a2 	beq.w	8003512 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
 80033f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e4      	bne.n	80033ce <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	623b      	str	r3, [r7, #32]
   return(result);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3308      	adds	r3, #8
 8003424:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003428:	633a      	str	r2, [r7, #48]	; 0x30
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800342e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e3      	bne.n	8003404 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	60fb      	str	r3, [r7, #12]
   return(result);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0310 	bic.w	r3, r3, #16
 8003462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	617b      	str	r3, [r7, #20]
   return(result);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e4      	bne.n	800344e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f85c 	bl	8003548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003490:	e03f      	b.n	8003512 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <HAL_UART_IRQHandler+0x560>
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fd5d 	bl	8003f74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034ba:	e02d      	b.n	8003518 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01c      	beq.n	8003516 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
    }
    return;
 80034e4:	e017      	b.n	8003516 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <HAL_UART_IRQHandler+0x5bc>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fd0e 	bl	8003f20 <UART_EndTransmit_IT>
    return;
 8003504:	e008      	b.n	8003518 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <HAL_UART_IRQHandler+0x5bc>
    return;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <HAL_UART_IRQHandler+0x5bc>
      return;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003516:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003518:	37e8      	adds	r7, #232	; 0xe8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b08a      	sub	sp, #40	; 0x28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	431a      	orrs	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	4313      	orrs	r3, r2
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4ba4      	ldr	r3, [pc, #656]	; (8003820 <UART_SetConfig+0x2c0>)
 8003590:	4013      	ands	r3, r2
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003598:	430b      	orrs	r3, r1
 800359a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a99      	ldr	r2, [pc, #612]	; (8003824 <UART_SetConfig+0x2c4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	4313      	orrs	r3, r2
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a90      	ldr	r2, [pc, #576]	; (8003828 <UART_SetConfig+0x2c8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d126      	bne.n	8003638 <UART_SetConfig+0xd8>
 80035ea:	4b90      	ldr	r3, [pc, #576]	; (800382c <UART_SetConfig+0x2cc>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d81b      	bhi.n	8003630 <UART_SetConfig+0xd0>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <UART_SetConfig+0xa0>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003621 	.word	0x08003621
 8003608:	08003619 	.word	0x08003619
 800360c:	08003629 	.word	0x08003629
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e116      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003618:	2302      	movs	r3, #2
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e112      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003620:	2304      	movs	r3, #4
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e10e      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003628:	2308      	movs	r3, #8
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e10a      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e106      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a7c      	ldr	r2, [pc, #496]	; (8003830 <UART_SetConfig+0x2d0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d138      	bne.n	80036b4 <UART_SetConfig+0x154>
 8003642:	4b7a      	ldr	r3, [pc, #488]	; (800382c <UART_SetConfig+0x2cc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d82d      	bhi.n	80036ac <UART_SetConfig+0x14c>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0xf8>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036ad 	.word	0x080036ad
 8003664:	080036ad 	.word	0x080036ad
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036ad 	.word	0x080036ad
 8003670:	080036ad 	.word	0x080036ad
 8003674:	080036ad 	.word	0x080036ad
 8003678:	08003695 	.word	0x08003695
 800367c:	080036ad 	.word	0x080036ad
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036ad 	.word	0x080036ad
 8003688:	080036a5 	.word	0x080036a5
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e0d8      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003694:	2302      	movs	r3, #2
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e0d4      	b.n	8003846 <UART_SetConfig+0x2e6>
 800369c:	2304      	movs	r3, #4
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e0d0      	b.n	8003846 <UART_SetConfig+0x2e6>
 80036a4:	2308      	movs	r3, #8
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e0cc      	b.n	8003846 <UART_SetConfig+0x2e6>
 80036ac:	2310      	movs	r3, #16
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e0c8      	b.n	8003846 <UART_SetConfig+0x2e6>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a5e      	ldr	r2, [pc, #376]	; (8003834 <UART_SetConfig+0x2d4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d125      	bne.n	800370a <UART_SetConfig+0x1aa>
 80036be:	4b5b      	ldr	r3, [pc, #364]	; (800382c <UART_SetConfig+0x2cc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d016      	beq.n	80036fa <UART_SetConfig+0x19a>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d818      	bhi.n	8003702 <UART_SetConfig+0x1a2>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d00a      	beq.n	80036ea <UART_SetConfig+0x18a>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d814      	bhi.n	8003702 <UART_SetConfig+0x1a2>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <UART_SetConfig+0x182>
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d008      	beq.n	80036f2 <UART_SetConfig+0x192>
 80036e0:	e00f      	b.n	8003702 <UART_SetConfig+0x1a2>
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e8:	e0ad      	b.n	8003846 <UART_SetConfig+0x2e6>
 80036ea:	2302      	movs	r3, #2
 80036ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f0:	e0a9      	b.n	8003846 <UART_SetConfig+0x2e6>
 80036f2:	2304      	movs	r3, #4
 80036f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f8:	e0a5      	b.n	8003846 <UART_SetConfig+0x2e6>
 80036fa:	2308      	movs	r3, #8
 80036fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003700:	e0a1      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003702:	2310      	movs	r3, #16
 8003704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003708:	e09d      	b.n	8003846 <UART_SetConfig+0x2e6>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a4a      	ldr	r2, [pc, #296]	; (8003838 <UART_SetConfig+0x2d8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d125      	bne.n	8003760 <UART_SetConfig+0x200>
 8003714:	4b45      	ldr	r3, [pc, #276]	; (800382c <UART_SetConfig+0x2cc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800371e:	2bc0      	cmp	r3, #192	; 0xc0
 8003720:	d016      	beq.n	8003750 <UART_SetConfig+0x1f0>
 8003722:	2bc0      	cmp	r3, #192	; 0xc0
 8003724:	d818      	bhi.n	8003758 <UART_SetConfig+0x1f8>
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d00a      	beq.n	8003740 <UART_SetConfig+0x1e0>
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d814      	bhi.n	8003758 <UART_SetConfig+0x1f8>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x1d8>
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d008      	beq.n	8003748 <UART_SetConfig+0x1e8>
 8003736:	e00f      	b.n	8003758 <UART_SetConfig+0x1f8>
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e082      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003740:	2302      	movs	r3, #2
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e07e      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003748:	2304      	movs	r3, #4
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e07a      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003750:	2308      	movs	r3, #8
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e076      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e072      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a35      	ldr	r2, [pc, #212]	; (800383c <UART_SetConfig+0x2dc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12a      	bne.n	80037c0 <UART_SetConfig+0x260>
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <UART_SetConfig+0x2cc>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003778:	d01a      	beq.n	80037b0 <UART_SetConfig+0x250>
 800377a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377e:	d81b      	bhi.n	80037b8 <UART_SetConfig+0x258>
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d00c      	beq.n	80037a0 <UART_SetConfig+0x240>
 8003786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378a:	d815      	bhi.n	80037b8 <UART_SetConfig+0x258>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <UART_SetConfig+0x238>
 8003790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003794:	d008      	beq.n	80037a8 <UART_SetConfig+0x248>
 8003796:	e00f      	b.n	80037b8 <UART_SetConfig+0x258>
 8003798:	2300      	movs	r3, #0
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e052      	b.n	8003846 <UART_SetConfig+0x2e6>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e04e      	b.n	8003846 <UART_SetConfig+0x2e6>
 80037a8:	2304      	movs	r3, #4
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e04a      	b.n	8003846 <UART_SetConfig+0x2e6>
 80037b0:	2308      	movs	r3, #8
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e046      	b.n	8003846 <UART_SetConfig+0x2e6>
 80037b8:	2310      	movs	r3, #16
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e042      	b.n	8003846 <UART_SetConfig+0x2e6>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <UART_SetConfig+0x2c4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d13a      	bne.n	8003840 <UART_SetConfig+0x2e0>
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <UART_SetConfig+0x2cc>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d8:	d01a      	beq.n	8003810 <UART_SetConfig+0x2b0>
 80037da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037de:	d81b      	bhi.n	8003818 <UART_SetConfig+0x2b8>
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e4:	d00c      	beq.n	8003800 <UART_SetConfig+0x2a0>
 80037e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ea:	d815      	bhi.n	8003818 <UART_SetConfig+0x2b8>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <UART_SetConfig+0x298>
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d008      	beq.n	8003808 <UART_SetConfig+0x2a8>
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x2b8>
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e022      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003800:	2302      	movs	r3, #2
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e01e      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003808:	2304      	movs	r3, #4
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e01a      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003810:	2308      	movs	r3, #8
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003816:	e016      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003818:	2310      	movs	r3, #16
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381e:	e012      	b.n	8003846 <UART_SetConfig+0x2e6>
 8003820:	efff69f3 	.word	0xefff69f3
 8003824:	40008000 	.word	0x40008000
 8003828:	40013800 	.word	0x40013800
 800382c:	40021000 	.word	0x40021000
 8003830:	40004400 	.word	0x40004400
 8003834:	40004800 	.word	0x40004800
 8003838:	40004c00 	.word	0x40004c00
 800383c:	40005000 	.word	0x40005000
 8003840:	2310      	movs	r3, #16
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a9f      	ldr	r2, [pc, #636]	; (8003ac8 <UART_SetConfig+0x568>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d17a      	bne.n	8003946 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003854:	2b08      	cmp	r3, #8
 8003856:	d824      	bhi.n	80038a2 <UART_SetConfig+0x342>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x300>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003885 	.word	0x08003885
 8003864:	080038a3 	.word	0x080038a3
 8003868:	0800388d 	.word	0x0800388d
 800386c:	080038a3 	.word	0x080038a3
 8003870:	08003893 	.word	0x08003893
 8003874:	080038a3 	.word	0x080038a3
 8003878:	080038a3 	.word	0x080038a3
 800387c:	080038a3 	.word	0x080038a3
 8003880:	0800389b 	.word	0x0800389b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7fe fdd4 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003888:	61f8      	str	r0, [r7, #28]
        break;
 800388a:	e010      	b.n	80038ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b8f      	ldr	r3, [pc, #572]	; (8003acc <UART_SetConfig+0x56c>)
 800388e:	61fb      	str	r3, [r7, #28]
        break;
 8003890:	e00d      	b.n	80038ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe fd35 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 8003896:	61f8      	str	r0, [r7, #28]
        break;
 8003898:	e009      	b.n	80038ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	61fb      	str	r3, [r7, #28]
        break;
 80038a0:	e005      	b.n	80038ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80fb 	beq.w	8003aac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d305      	bcc.n	80038d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d903      	bls.n	80038da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038d8:	e0e8      	b.n	8003aac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2200      	movs	r2, #0
 80038de:	461c      	mov	r4, r3
 80038e0:	4615      	mov	r5, r2
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	022b      	lsls	r3, r5, #8
 80038ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038f0:	0222      	lsls	r2, r4, #8
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	6849      	ldr	r1, [r1, #4]
 80038f6:	0849      	lsrs	r1, r1, #1
 80038f8:	2000      	movs	r0, #0
 80038fa:	4688      	mov	r8, r1
 80038fc:	4681      	mov	r9, r0
 80038fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003902:	eb43 0b09 	adc.w	fp, r3, r9
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003914:	4650      	mov	r0, sl
 8003916:	4659      	mov	r1, fp
 8003918:	f7fc fcb2 	bl	8000280 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392a:	d308      	bcc.n	800393e <UART_SetConfig+0x3de>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003932:	d204      	bcs.n	800393e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e0b6      	b.n	8003aac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003944:	e0b2      	b.n	8003aac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394e:	d15e      	bne.n	8003a0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003954:	2b08      	cmp	r3, #8
 8003956:	d828      	bhi.n	80039aa <UART_SetConfig+0x44a>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0x400>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003985 	.word	0x08003985
 8003964:	0800398d 	.word	0x0800398d
 8003968:	08003995 	.word	0x08003995
 800396c:	080039ab 	.word	0x080039ab
 8003970:	0800399b 	.word	0x0800399b
 8003974:	080039ab 	.word	0x080039ab
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039a3 	.word	0x080039a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7fe fd54 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003988:	61f8      	str	r0, [r7, #28]
        break;
 800398a:	e014      	b.n	80039b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7fe fd66 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003990:	61f8      	str	r0, [r7, #28]
        break;
 8003992:	e010      	b.n	80039b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003994:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <UART_SetConfig+0x56c>)
 8003996:	61fb      	str	r3, [r7, #28]
        break;
 8003998:	e00d      	b.n	80039b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399a:	f7fe fcb1 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 800399e:	61f8      	str	r0, [r7, #28]
        break;
 80039a0:	e009      	b.n	80039b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a6:	61fb      	str	r3, [r7, #28]
        break;
 80039a8:	e005      	b.n	80039b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d077      	beq.n	8003aac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005a      	lsls	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	441a      	add	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d916      	bls.n	8003a06 <UART_SetConfig+0x4a6>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039de:	d212      	bcs.n	8003a06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f023 030f 	bic.w	r3, r3, #15
 80039e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	8afb      	ldrh	r3, [r7, #22]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	8afa      	ldrh	r2, [r7, #22]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	e052      	b.n	8003aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a0c:	e04e      	b.n	8003aac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d827      	bhi.n	8003a66 <UART_SetConfig+0x506>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x4bc>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a67 	.word	0x08003a67
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a67 	.word	0x08003a67
 8003a34:	08003a67 	.word	0x08003a67
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	08003a5f 	.word	0x08003a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7fe fcf6 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003a44:	61f8      	str	r0, [r7, #28]
        break;
 8003a46:	e014      	b.n	8003a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7fe fd08 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003a4c:	61f8      	str	r0, [r7, #28]
        break;
 8003a4e:	e010      	b.n	8003a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a50:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <UART_SetConfig+0x56c>)
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e00d      	b.n	8003a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a56:	f7fe fc53 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 8003a5a:	61f8      	str	r0, [r7, #28]
        break;
 8003a5c:	e009      	b.n	8003a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a62:	61fb      	str	r3, [r7, #28]
        break;
 8003a64:	e005      	b.n	8003a72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a70:	bf00      	nop
    }

    if (pclk != 0U)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d019      	beq.n	8003aac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	085a      	lsrs	r2, r3, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0f      	cmp	r3, #15
 8003a90:	d909      	bls.n	8003aa6 <UART_SetConfig+0x546>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d205      	bcs.n	8003aa6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	e002      	b.n	8003aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ab8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40008000 	.word	0x40008000
 8003acc:	00f42400 	.word	0x00f42400

08003ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bce:	d10a      	bne.n	8003be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c24:	f7fd f852 	bl	8000ccc <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d10e      	bne.n	8003c56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f82d 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e023      	b.n	8003c9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d10e      	bne.n	8003c82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f817 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e00d      	b.n	8003c9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b09c      	sub	sp, #112	; 0x70
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	e0a5      	b.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cbe:	f000 80a1 	beq.w	8003e04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fd f803 	bl	8000ccc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d13e      	bne.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cec:	667b      	str	r3, [r7, #100]	; 0x64
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	663b      	str	r3, [r7, #96]	; 0x60
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e5      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e067      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04f      	beq.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d72:	d147      	bne.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e6      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dd0:	623a      	str	r2, [r7, #32]
 8003dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	69f9      	ldr	r1, [r7, #28]
 8003dd6:	6a3a      	ldr	r2, [r7, #32]
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e010      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f43f af4a 	beq.w	8003cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3770      	adds	r7, #112	; 0x70
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b095      	sub	sp, #84	; 0x54
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e54:	643b      	str	r3, [r7, #64]	; 0x40
 8003e56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e6      	bne.n	8003e36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3308      	adds	r3, #8
 8003e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e5      	bne.n	8003e68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d118      	bne.n	8003ed6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f023 0310 	bic.w	r3, r3, #16
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e6      	bne.n	8003ea4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ee8:	bf00      	nop
 8003eea:	3754      	adds	r7, #84	; 0x54
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff fb0e 	bl	8003534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	613b      	str	r3, [r7, #16]
   return(result);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e6      	bne.n	8003f28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fada 	bl	8003520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6c:	bf00      	nop
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000040 	.word	0x20000040

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4d0d      	ldr	r5, [pc, #52]	; (8003fcc <__libc_init_array+0x38>)
 8003f98:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	4d0b      	ldr	r5, [pc, #44]	; (8003fd4 <__libc_init_array+0x40>)
 8003fa6:	4c0c      	ldr	r4, [pc, #48]	; (8003fd8 <__libc_init_array+0x44>)
 8003fa8:	f001 fac6 	bl	8005538 <_init>
 8003fac:	1b64      	subs	r4, r4, r5
 8003fae:	10a4      	asrs	r4, r4, #2
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08005688 	.word	0x08005688
 8003fd0:	08005688 	.word	0x08005688
 8003fd4:	08005688 	.word	0x08005688
 8003fd8:	0800568c 	.word	0x0800568c

08003fdc <memset>:
 8003fdc:	4402      	add	r2, r0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <iprintf>:
 8003fec:	b40f      	push	{r0, r1, r2, r3}
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <iprintf+0x2c>)
 8003ff0:	b513      	push	{r0, r1, r4, lr}
 8003ff2:	681c      	ldr	r4, [r3, #0]
 8003ff4:	b124      	cbz	r4, 8004000 <iprintf+0x14>
 8003ff6:	69a3      	ldr	r3, [r4, #24]
 8003ff8:	b913      	cbnz	r3, 8004000 <iprintf+0x14>
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f000 fa5e 	bl	80044bc <__sinit>
 8004000:	ab05      	add	r3, sp, #20
 8004002:	9a04      	ldr	r2, [sp, #16]
 8004004:	68a1      	ldr	r1, [r4, #8]
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	4620      	mov	r0, r4
 800400a:	f000 fc67 	bl	80048dc <_vfiprintf_r>
 800400e:	b002      	add	sp, #8
 8004010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004014:	b004      	add	sp, #16
 8004016:	4770      	bx	lr
 8004018:	20000040 	.word	0x20000040

0800401c <_puts_r>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	460e      	mov	r6, r1
 8004020:	4605      	mov	r5, r0
 8004022:	b118      	cbz	r0, 800402c <_puts_r+0x10>
 8004024:	6983      	ldr	r3, [r0, #24]
 8004026:	b90b      	cbnz	r3, 800402c <_puts_r+0x10>
 8004028:	f000 fa48 	bl	80044bc <__sinit>
 800402c:	69ab      	ldr	r3, [r5, #24]
 800402e:	68ac      	ldr	r4, [r5, #8]
 8004030:	b913      	cbnz	r3, 8004038 <_puts_r+0x1c>
 8004032:	4628      	mov	r0, r5
 8004034:	f000 fa42 	bl	80044bc <__sinit>
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <_puts_r+0xd0>)
 800403a:	429c      	cmp	r4, r3
 800403c:	d120      	bne.n	8004080 <_puts_r+0x64>
 800403e:	686c      	ldr	r4, [r5, #4]
 8004040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004042:	07db      	lsls	r3, r3, #31
 8004044:	d405      	bmi.n	8004052 <_puts_r+0x36>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	0598      	lsls	r0, r3, #22
 800404a:	d402      	bmi.n	8004052 <_puts_r+0x36>
 800404c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800404e:	f000 fad3 	bl	80045f8 <__retarget_lock_acquire_recursive>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	0719      	lsls	r1, r3, #28
 8004056:	d51d      	bpl.n	8004094 <_puts_r+0x78>
 8004058:	6923      	ldr	r3, [r4, #16]
 800405a:	b1db      	cbz	r3, 8004094 <_puts_r+0x78>
 800405c:	3e01      	subs	r6, #1
 800405e:	68a3      	ldr	r3, [r4, #8]
 8004060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004064:	3b01      	subs	r3, #1
 8004066:	60a3      	str	r3, [r4, #8]
 8004068:	bb39      	cbnz	r1, 80040ba <_puts_r+0x9e>
 800406a:	2b00      	cmp	r3, #0
 800406c:	da38      	bge.n	80040e0 <_puts_r+0xc4>
 800406e:	4622      	mov	r2, r4
 8004070:	210a      	movs	r1, #10
 8004072:	4628      	mov	r0, r5
 8004074:	f000 f848 	bl	8004108 <__swbuf_r>
 8004078:	3001      	adds	r0, #1
 800407a:	d011      	beq.n	80040a0 <_puts_r+0x84>
 800407c:	250a      	movs	r5, #10
 800407e:	e011      	b.n	80040a4 <_puts_r+0x88>
 8004080:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <_puts_r+0xd4>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d101      	bne.n	800408a <_puts_r+0x6e>
 8004086:	68ac      	ldr	r4, [r5, #8]
 8004088:	e7da      	b.n	8004040 <_puts_r+0x24>
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <_puts_r+0xd8>)
 800408c:	429c      	cmp	r4, r3
 800408e:	bf08      	it	eq
 8004090:	68ec      	ldreq	r4, [r5, #12]
 8004092:	e7d5      	b.n	8004040 <_puts_r+0x24>
 8004094:	4621      	mov	r1, r4
 8004096:	4628      	mov	r0, r5
 8004098:	f000 f888 	bl	80041ac <__swsetup_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	d0dd      	beq.n	800405c <_puts_r+0x40>
 80040a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80040a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a6:	07da      	lsls	r2, r3, #31
 80040a8:	d405      	bmi.n	80040b6 <_puts_r+0x9a>
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	059b      	lsls	r3, r3, #22
 80040ae:	d402      	bmi.n	80040b6 <_puts_r+0x9a>
 80040b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040b2:	f000 faa2 	bl	80045fa <__retarget_lock_release_recursive>
 80040b6:	4628      	mov	r0, r5
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da04      	bge.n	80040c8 <_puts_r+0xac>
 80040be:	69a2      	ldr	r2, [r4, #24]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	dc06      	bgt.n	80040d2 <_puts_r+0xb6>
 80040c4:	290a      	cmp	r1, #10
 80040c6:	d004      	beq.n	80040d2 <_puts_r+0xb6>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	6022      	str	r2, [r4, #0]
 80040ce:	7019      	strb	r1, [r3, #0]
 80040d0:	e7c5      	b.n	800405e <_puts_r+0x42>
 80040d2:	4622      	mov	r2, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 f817 	bl	8004108 <__swbuf_r>
 80040da:	3001      	adds	r0, #1
 80040dc:	d1bf      	bne.n	800405e <_puts_r+0x42>
 80040de:	e7df      	b.n	80040a0 <_puts_r+0x84>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	250a      	movs	r5, #10
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	6022      	str	r2, [r4, #0]
 80040e8:	701d      	strb	r5, [r3, #0]
 80040ea:	e7db      	b.n	80040a4 <_puts_r+0x88>
 80040ec:	080055f0 	.word	0x080055f0
 80040f0:	08005610 	.word	0x08005610
 80040f4:	080055d0 	.word	0x080055d0

080040f8 <puts>:
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <puts+0xc>)
 80040fa:	4601      	mov	r1, r0
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f7ff bf8d 	b.w	800401c <_puts_r>
 8004102:	bf00      	nop
 8004104:	20000040 	.word	0x20000040

08004108 <__swbuf_r>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	460e      	mov	r6, r1
 800410c:	4614      	mov	r4, r2
 800410e:	4605      	mov	r5, r0
 8004110:	b118      	cbz	r0, 800411a <__swbuf_r+0x12>
 8004112:	6983      	ldr	r3, [r0, #24]
 8004114:	b90b      	cbnz	r3, 800411a <__swbuf_r+0x12>
 8004116:	f000 f9d1 	bl	80044bc <__sinit>
 800411a:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <__swbuf_r+0x98>)
 800411c:	429c      	cmp	r4, r3
 800411e:	d12b      	bne.n	8004178 <__swbuf_r+0x70>
 8004120:	686c      	ldr	r4, [r5, #4]
 8004122:	69a3      	ldr	r3, [r4, #24]
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	071a      	lsls	r2, r3, #28
 800412a:	d52f      	bpl.n	800418c <__swbuf_r+0x84>
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	b36b      	cbz	r3, 800418c <__swbuf_r+0x84>
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	1ac0      	subs	r0, r0, r3
 8004136:	6963      	ldr	r3, [r4, #20]
 8004138:	b2f6      	uxtb	r6, r6
 800413a:	4283      	cmp	r3, r0
 800413c:	4637      	mov	r7, r6
 800413e:	dc04      	bgt.n	800414a <__swbuf_r+0x42>
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f926 	bl	8004394 <_fflush_r>
 8004148:	bb30      	cbnz	r0, 8004198 <__swbuf_r+0x90>
 800414a:	68a3      	ldr	r3, [r4, #8]
 800414c:	3b01      	subs	r3, #1
 800414e:	60a3      	str	r3, [r4, #8]
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	6022      	str	r2, [r4, #0]
 8004156:	701e      	strb	r6, [r3, #0]
 8004158:	6963      	ldr	r3, [r4, #20]
 800415a:	3001      	adds	r0, #1
 800415c:	4283      	cmp	r3, r0
 800415e:	d004      	beq.n	800416a <__swbuf_r+0x62>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	07db      	lsls	r3, r3, #31
 8004164:	d506      	bpl.n	8004174 <__swbuf_r+0x6c>
 8004166:	2e0a      	cmp	r6, #10
 8004168:	d104      	bne.n	8004174 <__swbuf_r+0x6c>
 800416a:	4621      	mov	r1, r4
 800416c:	4628      	mov	r0, r5
 800416e:	f000 f911 	bl	8004394 <_fflush_r>
 8004172:	b988      	cbnz	r0, 8004198 <__swbuf_r+0x90>
 8004174:	4638      	mov	r0, r7
 8004176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <__swbuf_r+0x9c>)
 800417a:	429c      	cmp	r4, r3
 800417c:	d101      	bne.n	8004182 <__swbuf_r+0x7a>
 800417e:	68ac      	ldr	r4, [r5, #8]
 8004180:	e7cf      	b.n	8004122 <__swbuf_r+0x1a>
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <__swbuf_r+0xa0>)
 8004184:	429c      	cmp	r4, r3
 8004186:	bf08      	it	eq
 8004188:	68ec      	ldreq	r4, [r5, #12]
 800418a:	e7ca      	b.n	8004122 <__swbuf_r+0x1a>
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f80c 	bl	80041ac <__swsetup_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	d0cb      	beq.n	8004130 <__swbuf_r+0x28>
 8004198:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800419c:	e7ea      	b.n	8004174 <__swbuf_r+0x6c>
 800419e:	bf00      	nop
 80041a0:	080055f0 	.word	0x080055f0
 80041a4:	08005610 	.word	0x08005610
 80041a8:	080055d0 	.word	0x080055d0

080041ac <__swsetup_r>:
 80041ac:	4b32      	ldr	r3, [pc, #200]	; (8004278 <__swsetup_r+0xcc>)
 80041ae:	b570      	push	{r4, r5, r6, lr}
 80041b0:	681d      	ldr	r5, [r3, #0]
 80041b2:	4606      	mov	r6, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	b125      	cbz	r5, 80041c2 <__swsetup_r+0x16>
 80041b8:	69ab      	ldr	r3, [r5, #24]
 80041ba:	b913      	cbnz	r3, 80041c2 <__swsetup_r+0x16>
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 f97d 	bl	80044bc <__sinit>
 80041c2:	4b2e      	ldr	r3, [pc, #184]	; (800427c <__swsetup_r+0xd0>)
 80041c4:	429c      	cmp	r4, r3
 80041c6:	d10f      	bne.n	80041e8 <__swsetup_r+0x3c>
 80041c8:	686c      	ldr	r4, [r5, #4]
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041d0:	0719      	lsls	r1, r3, #28
 80041d2:	d42c      	bmi.n	800422e <__swsetup_r+0x82>
 80041d4:	06dd      	lsls	r5, r3, #27
 80041d6:	d411      	bmi.n	80041fc <__swsetup_r+0x50>
 80041d8:	2309      	movs	r3, #9
 80041da:	6033      	str	r3, [r6, #0]
 80041dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e6:	e03e      	b.n	8004266 <__swsetup_r+0xba>
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <__swsetup_r+0xd4>)
 80041ea:	429c      	cmp	r4, r3
 80041ec:	d101      	bne.n	80041f2 <__swsetup_r+0x46>
 80041ee:	68ac      	ldr	r4, [r5, #8]
 80041f0:	e7eb      	b.n	80041ca <__swsetup_r+0x1e>
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <__swsetup_r+0xd8>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	bf08      	it	eq
 80041f8:	68ec      	ldreq	r4, [r5, #12]
 80041fa:	e7e6      	b.n	80041ca <__swsetup_r+0x1e>
 80041fc:	0758      	lsls	r0, r3, #29
 80041fe:	d512      	bpl.n	8004226 <__swsetup_r+0x7a>
 8004200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004202:	b141      	cbz	r1, 8004216 <__swsetup_r+0x6a>
 8004204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004208:	4299      	cmp	r1, r3
 800420a:	d002      	beq.n	8004212 <__swsetup_r+0x66>
 800420c:	4630      	mov	r0, r6
 800420e:	f000 fa5b 	bl	80046c8 <_free_r>
 8004212:	2300      	movs	r3, #0
 8004214:	6363      	str	r3, [r4, #52]	; 0x34
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	2300      	movs	r3, #0
 8004220:	6063      	str	r3, [r4, #4]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	b94b      	cbnz	r3, 8004246 <__swsetup_r+0x9a>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d003      	beq.n	8004246 <__swsetup_r+0x9a>
 800423e:	4621      	mov	r1, r4
 8004240:	4630      	mov	r0, r6
 8004242:	f000 fa01 	bl	8004648 <__smakebuf_r>
 8004246:	89a0      	ldrh	r0, [r4, #12]
 8004248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800424c:	f010 0301 	ands.w	r3, r0, #1
 8004250:	d00a      	beq.n	8004268 <__swsetup_r+0xbc>
 8004252:	2300      	movs	r3, #0
 8004254:	60a3      	str	r3, [r4, #8]
 8004256:	6963      	ldr	r3, [r4, #20]
 8004258:	425b      	negs	r3, r3
 800425a:	61a3      	str	r3, [r4, #24]
 800425c:	6923      	ldr	r3, [r4, #16]
 800425e:	b943      	cbnz	r3, 8004272 <__swsetup_r+0xc6>
 8004260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004264:	d1ba      	bne.n	80041dc <__swsetup_r+0x30>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	0781      	lsls	r1, r0, #30
 800426a:	bf58      	it	pl
 800426c:	6963      	ldrpl	r3, [r4, #20]
 800426e:	60a3      	str	r3, [r4, #8]
 8004270:	e7f4      	b.n	800425c <__swsetup_r+0xb0>
 8004272:	2000      	movs	r0, #0
 8004274:	e7f7      	b.n	8004266 <__swsetup_r+0xba>
 8004276:	bf00      	nop
 8004278:	20000040 	.word	0x20000040
 800427c:	080055f0 	.word	0x080055f0
 8004280:	08005610 	.word	0x08005610
 8004284:	080055d0 	.word	0x080055d0

08004288 <__sflush_r>:
 8004288:	898a      	ldrh	r2, [r1, #12]
 800428a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428e:	4605      	mov	r5, r0
 8004290:	0710      	lsls	r0, r2, #28
 8004292:	460c      	mov	r4, r1
 8004294:	d458      	bmi.n	8004348 <__sflush_r+0xc0>
 8004296:	684b      	ldr	r3, [r1, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	dc05      	bgt.n	80042a8 <__sflush_r+0x20>
 800429c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	dc02      	bgt.n	80042a8 <__sflush_r+0x20>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	d0f9      	beq.n	80042a2 <__sflush_r+0x1a>
 80042ae:	2300      	movs	r3, #0
 80042b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042b4:	682f      	ldr	r7, [r5, #0]
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	d032      	beq.n	8004320 <__sflush_r+0x98>
 80042ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	075a      	lsls	r2, r3, #29
 80042c0:	d505      	bpl.n	80042ce <__sflush_r+0x46>
 80042c2:	6863      	ldr	r3, [r4, #4]
 80042c4:	1ac0      	subs	r0, r0, r3
 80042c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042c8:	b10b      	cbz	r3, 80042ce <__sflush_r+0x46>
 80042ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042cc:	1ac0      	subs	r0, r0, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	4602      	mov	r2, r0
 80042d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042d4:	6a21      	ldr	r1, [r4, #32]
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b0      	blx	r6
 80042da:	1c43      	adds	r3, r0, #1
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	d106      	bne.n	80042ee <__sflush_r+0x66>
 80042e0:	6829      	ldr	r1, [r5, #0]
 80042e2:	291d      	cmp	r1, #29
 80042e4:	d82c      	bhi.n	8004340 <__sflush_r+0xb8>
 80042e6:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <__sflush_r+0x108>)
 80042e8:	40ca      	lsrs	r2, r1
 80042ea:	07d6      	lsls	r6, r2, #31
 80042ec:	d528      	bpl.n	8004340 <__sflush_r+0xb8>
 80042ee:	2200      	movs	r2, #0
 80042f0:	6062      	str	r2, [r4, #4]
 80042f2:	04d9      	lsls	r1, r3, #19
 80042f4:	6922      	ldr	r2, [r4, #16]
 80042f6:	6022      	str	r2, [r4, #0]
 80042f8:	d504      	bpl.n	8004304 <__sflush_r+0x7c>
 80042fa:	1c42      	adds	r2, r0, #1
 80042fc:	d101      	bne.n	8004302 <__sflush_r+0x7a>
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	b903      	cbnz	r3, 8004304 <__sflush_r+0x7c>
 8004302:	6560      	str	r0, [r4, #84]	; 0x54
 8004304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004306:	602f      	str	r7, [r5, #0]
 8004308:	2900      	cmp	r1, #0
 800430a:	d0ca      	beq.n	80042a2 <__sflush_r+0x1a>
 800430c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004310:	4299      	cmp	r1, r3
 8004312:	d002      	beq.n	800431a <__sflush_r+0x92>
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f9d7 	bl	80046c8 <_free_r>
 800431a:	2000      	movs	r0, #0
 800431c:	6360      	str	r0, [r4, #52]	; 0x34
 800431e:	e7c1      	b.n	80042a4 <__sflush_r+0x1c>
 8004320:	6a21      	ldr	r1, [r4, #32]
 8004322:	2301      	movs	r3, #1
 8004324:	4628      	mov	r0, r5
 8004326:	47b0      	blx	r6
 8004328:	1c41      	adds	r1, r0, #1
 800432a:	d1c7      	bne.n	80042bc <__sflush_r+0x34>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0c4      	beq.n	80042bc <__sflush_r+0x34>
 8004332:	2b1d      	cmp	r3, #29
 8004334:	d001      	beq.n	800433a <__sflush_r+0xb2>
 8004336:	2b16      	cmp	r3, #22
 8004338:	d101      	bne.n	800433e <__sflush_r+0xb6>
 800433a:	602f      	str	r7, [r5, #0]
 800433c:	e7b1      	b.n	80042a2 <__sflush_r+0x1a>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	e7ad      	b.n	80042a4 <__sflush_r+0x1c>
 8004348:	690f      	ldr	r7, [r1, #16]
 800434a:	2f00      	cmp	r7, #0
 800434c:	d0a9      	beq.n	80042a2 <__sflush_r+0x1a>
 800434e:	0793      	lsls	r3, r2, #30
 8004350:	680e      	ldr	r6, [r1, #0]
 8004352:	bf08      	it	eq
 8004354:	694b      	ldreq	r3, [r1, #20]
 8004356:	600f      	str	r7, [r1, #0]
 8004358:	bf18      	it	ne
 800435a:	2300      	movne	r3, #0
 800435c:	eba6 0807 	sub.w	r8, r6, r7
 8004360:	608b      	str	r3, [r1, #8]
 8004362:	f1b8 0f00 	cmp.w	r8, #0
 8004366:	dd9c      	ble.n	80042a2 <__sflush_r+0x1a>
 8004368:	6a21      	ldr	r1, [r4, #32]
 800436a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800436c:	4643      	mov	r3, r8
 800436e:	463a      	mov	r2, r7
 8004370:	4628      	mov	r0, r5
 8004372:	47b0      	blx	r6
 8004374:	2800      	cmp	r0, #0
 8004376:	dc06      	bgt.n	8004386 <__sflush_r+0xfe>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004384:	e78e      	b.n	80042a4 <__sflush_r+0x1c>
 8004386:	4407      	add	r7, r0
 8004388:	eba8 0800 	sub.w	r8, r8, r0
 800438c:	e7e9      	b.n	8004362 <__sflush_r+0xda>
 800438e:	bf00      	nop
 8004390:	20400001 	.word	0x20400001

08004394 <_fflush_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	690b      	ldr	r3, [r1, #16]
 8004398:	4605      	mov	r5, r0
 800439a:	460c      	mov	r4, r1
 800439c:	b913      	cbnz	r3, 80043a4 <_fflush_r+0x10>
 800439e:	2500      	movs	r5, #0
 80043a0:	4628      	mov	r0, r5
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	b118      	cbz	r0, 80043ae <_fflush_r+0x1a>
 80043a6:	6983      	ldr	r3, [r0, #24]
 80043a8:	b90b      	cbnz	r3, 80043ae <_fflush_r+0x1a>
 80043aa:	f000 f887 	bl	80044bc <__sinit>
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <_fflush_r+0x6c>)
 80043b0:	429c      	cmp	r4, r3
 80043b2:	d11b      	bne.n	80043ec <_fflush_r+0x58>
 80043b4:	686c      	ldr	r4, [r5, #4]
 80043b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ef      	beq.n	800439e <_fflush_r+0xa>
 80043be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043c0:	07d0      	lsls	r0, r2, #31
 80043c2:	d404      	bmi.n	80043ce <_fflush_r+0x3a>
 80043c4:	0599      	lsls	r1, r3, #22
 80043c6:	d402      	bmi.n	80043ce <_fflush_r+0x3a>
 80043c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ca:	f000 f915 	bl	80045f8 <__retarget_lock_acquire_recursive>
 80043ce:	4628      	mov	r0, r5
 80043d0:	4621      	mov	r1, r4
 80043d2:	f7ff ff59 	bl	8004288 <__sflush_r>
 80043d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d8:	07da      	lsls	r2, r3, #31
 80043da:	4605      	mov	r5, r0
 80043dc:	d4e0      	bmi.n	80043a0 <_fflush_r+0xc>
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	059b      	lsls	r3, r3, #22
 80043e2:	d4dd      	bmi.n	80043a0 <_fflush_r+0xc>
 80043e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e6:	f000 f908 	bl	80045fa <__retarget_lock_release_recursive>
 80043ea:	e7d9      	b.n	80043a0 <_fflush_r+0xc>
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <_fflush_r+0x70>)
 80043ee:	429c      	cmp	r4, r3
 80043f0:	d101      	bne.n	80043f6 <_fflush_r+0x62>
 80043f2:	68ac      	ldr	r4, [r5, #8]
 80043f4:	e7df      	b.n	80043b6 <_fflush_r+0x22>
 80043f6:	4b04      	ldr	r3, [pc, #16]	; (8004408 <_fflush_r+0x74>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	bf08      	it	eq
 80043fc:	68ec      	ldreq	r4, [r5, #12]
 80043fe:	e7da      	b.n	80043b6 <_fflush_r+0x22>
 8004400:	080055f0 	.word	0x080055f0
 8004404:	08005610 	.word	0x08005610
 8004408:	080055d0 	.word	0x080055d0

0800440c <std>:
 800440c:	2300      	movs	r3, #0
 800440e:	b510      	push	{r4, lr}
 8004410:	4604      	mov	r4, r0
 8004412:	e9c0 3300 	strd	r3, r3, [r0]
 8004416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800441a:	6083      	str	r3, [r0, #8]
 800441c:	8181      	strh	r1, [r0, #12]
 800441e:	6643      	str	r3, [r0, #100]	; 0x64
 8004420:	81c2      	strh	r2, [r0, #14]
 8004422:	6183      	str	r3, [r0, #24]
 8004424:	4619      	mov	r1, r3
 8004426:	2208      	movs	r2, #8
 8004428:	305c      	adds	r0, #92	; 0x5c
 800442a:	f7ff fdd7 	bl	8003fdc <memset>
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <std+0x38>)
 8004430:	6263      	str	r3, [r4, #36]	; 0x24
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <std+0x3c>)
 8004434:	62a3      	str	r3, [r4, #40]	; 0x28
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <std+0x40>)
 8004438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <std+0x44>)
 800443c:	6224      	str	r4, [r4, #32]
 800443e:	6323      	str	r3, [r4, #48]	; 0x30
 8004440:	bd10      	pop	{r4, pc}
 8004442:	bf00      	nop
 8004444:	08004e85 	.word	0x08004e85
 8004448:	08004ea7 	.word	0x08004ea7
 800444c:	08004edf 	.word	0x08004edf
 8004450:	08004f03 	.word	0x08004f03

08004454 <_cleanup_r>:
 8004454:	4901      	ldr	r1, [pc, #4]	; (800445c <_cleanup_r+0x8>)
 8004456:	f000 b8af 	b.w	80045b8 <_fwalk_reent>
 800445a:	bf00      	nop
 800445c:	08004395 	.word	0x08004395

08004460 <__sfmoreglue>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	2268      	movs	r2, #104	; 0x68
 8004464:	1e4d      	subs	r5, r1, #1
 8004466:	4355      	muls	r5, r2
 8004468:	460e      	mov	r6, r1
 800446a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800446e:	f000 f997 	bl	80047a0 <_malloc_r>
 8004472:	4604      	mov	r4, r0
 8004474:	b140      	cbz	r0, 8004488 <__sfmoreglue+0x28>
 8004476:	2100      	movs	r1, #0
 8004478:	e9c0 1600 	strd	r1, r6, [r0]
 800447c:	300c      	adds	r0, #12
 800447e:	60a0      	str	r0, [r4, #8]
 8004480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004484:	f7ff fdaa 	bl	8003fdc <memset>
 8004488:	4620      	mov	r0, r4
 800448a:	bd70      	pop	{r4, r5, r6, pc}

0800448c <__sfp_lock_acquire>:
 800448c:	4801      	ldr	r0, [pc, #4]	; (8004494 <__sfp_lock_acquire+0x8>)
 800448e:	f000 b8b3 	b.w	80045f8 <__retarget_lock_acquire_recursive>
 8004492:	bf00      	nop
 8004494:	2000015d 	.word	0x2000015d

08004498 <__sfp_lock_release>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__sfp_lock_release+0x8>)
 800449a:	f000 b8ae 	b.w	80045fa <__retarget_lock_release_recursive>
 800449e:	bf00      	nop
 80044a0:	2000015d 	.word	0x2000015d

080044a4 <__sinit_lock_acquire>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__sinit_lock_acquire+0x8>)
 80044a6:	f000 b8a7 	b.w	80045f8 <__retarget_lock_acquire_recursive>
 80044aa:	bf00      	nop
 80044ac:	2000015e 	.word	0x2000015e

080044b0 <__sinit_lock_release>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__sinit_lock_release+0x8>)
 80044b2:	f000 b8a2 	b.w	80045fa <__retarget_lock_release_recursive>
 80044b6:	bf00      	nop
 80044b8:	2000015e 	.word	0x2000015e

080044bc <__sinit>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	4604      	mov	r4, r0
 80044c0:	f7ff fff0 	bl	80044a4 <__sinit_lock_acquire>
 80044c4:	69a3      	ldr	r3, [r4, #24]
 80044c6:	b11b      	cbz	r3, 80044d0 <__sinit+0x14>
 80044c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044cc:	f7ff bff0 	b.w	80044b0 <__sinit_lock_release>
 80044d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044d4:	6523      	str	r3, [r4, #80]	; 0x50
 80044d6:	4b13      	ldr	r3, [pc, #76]	; (8004524 <__sinit+0x68>)
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <__sinit+0x6c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80044de:	42a3      	cmp	r3, r4
 80044e0:	bf04      	itt	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	61a3      	streq	r3, [r4, #24]
 80044e6:	4620      	mov	r0, r4
 80044e8:	f000 f820 	bl	800452c <__sfp>
 80044ec:	6060      	str	r0, [r4, #4]
 80044ee:	4620      	mov	r0, r4
 80044f0:	f000 f81c 	bl	800452c <__sfp>
 80044f4:	60a0      	str	r0, [r4, #8]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f000 f818 	bl	800452c <__sfp>
 80044fc:	2200      	movs	r2, #0
 80044fe:	60e0      	str	r0, [r4, #12]
 8004500:	2104      	movs	r1, #4
 8004502:	6860      	ldr	r0, [r4, #4]
 8004504:	f7ff ff82 	bl	800440c <std>
 8004508:	68a0      	ldr	r0, [r4, #8]
 800450a:	2201      	movs	r2, #1
 800450c:	2109      	movs	r1, #9
 800450e:	f7ff ff7d 	bl	800440c <std>
 8004512:	68e0      	ldr	r0, [r4, #12]
 8004514:	2202      	movs	r2, #2
 8004516:	2112      	movs	r1, #18
 8004518:	f7ff ff78 	bl	800440c <std>
 800451c:	2301      	movs	r3, #1
 800451e:	61a3      	str	r3, [r4, #24]
 8004520:	e7d2      	b.n	80044c8 <__sinit+0xc>
 8004522:	bf00      	nop
 8004524:	080055cc 	.word	0x080055cc
 8004528:	08004455 	.word	0x08004455

0800452c <__sfp>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	4607      	mov	r7, r0
 8004530:	f7ff ffac 	bl	800448c <__sfp_lock_acquire>
 8004534:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <__sfp+0x84>)
 8004536:	681e      	ldr	r6, [r3, #0]
 8004538:	69b3      	ldr	r3, [r6, #24]
 800453a:	b913      	cbnz	r3, 8004542 <__sfp+0x16>
 800453c:	4630      	mov	r0, r6
 800453e:	f7ff ffbd 	bl	80044bc <__sinit>
 8004542:	3648      	adds	r6, #72	; 0x48
 8004544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004548:	3b01      	subs	r3, #1
 800454a:	d503      	bpl.n	8004554 <__sfp+0x28>
 800454c:	6833      	ldr	r3, [r6, #0]
 800454e:	b30b      	cbz	r3, 8004594 <__sfp+0x68>
 8004550:	6836      	ldr	r6, [r6, #0]
 8004552:	e7f7      	b.n	8004544 <__sfp+0x18>
 8004554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004558:	b9d5      	cbnz	r5, 8004590 <__sfp+0x64>
 800455a:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <__sfp+0x88>)
 800455c:	60e3      	str	r3, [r4, #12]
 800455e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004562:	6665      	str	r5, [r4, #100]	; 0x64
 8004564:	f000 f847 	bl	80045f6 <__retarget_lock_init_recursive>
 8004568:	f7ff ff96 	bl	8004498 <__sfp_lock_release>
 800456c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	61a5      	str	r5, [r4, #24]
 8004578:	2208      	movs	r2, #8
 800457a:	4629      	mov	r1, r5
 800457c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004580:	f7ff fd2c 	bl	8003fdc <memset>
 8004584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800458c:	4620      	mov	r0, r4
 800458e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004590:	3468      	adds	r4, #104	; 0x68
 8004592:	e7d9      	b.n	8004548 <__sfp+0x1c>
 8004594:	2104      	movs	r1, #4
 8004596:	4638      	mov	r0, r7
 8004598:	f7ff ff62 	bl	8004460 <__sfmoreglue>
 800459c:	4604      	mov	r4, r0
 800459e:	6030      	str	r0, [r6, #0]
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d1d5      	bne.n	8004550 <__sfp+0x24>
 80045a4:	f7ff ff78 	bl	8004498 <__sfp_lock_release>
 80045a8:	230c      	movs	r3, #12
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	e7ee      	b.n	800458c <__sfp+0x60>
 80045ae:	bf00      	nop
 80045b0:	080055cc 	.word	0x080055cc
 80045b4:	ffff0001 	.word	0xffff0001

080045b8 <_fwalk_reent>:
 80045b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045bc:	4606      	mov	r6, r0
 80045be:	4688      	mov	r8, r1
 80045c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045c4:	2700      	movs	r7, #0
 80045c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045ca:	f1b9 0901 	subs.w	r9, r9, #1
 80045ce:	d505      	bpl.n	80045dc <_fwalk_reent+0x24>
 80045d0:	6824      	ldr	r4, [r4, #0]
 80045d2:	2c00      	cmp	r4, #0
 80045d4:	d1f7      	bne.n	80045c6 <_fwalk_reent+0xe>
 80045d6:	4638      	mov	r0, r7
 80045d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045dc:	89ab      	ldrh	r3, [r5, #12]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d907      	bls.n	80045f2 <_fwalk_reent+0x3a>
 80045e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045e6:	3301      	adds	r3, #1
 80045e8:	d003      	beq.n	80045f2 <_fwalk_reent+0x3a>
 80045ea:	4629      	mov	r1, r5
 80045ec:	4630      	mov	r0, r6
 80045ee:	47c0      	blx	r8
 80045f0:	4307      	orrs	r7, r0
 80045f2:	3568      	adds	r5, #104	; 0x68
 80045f4:	e7e9      	b.n	80045ca <_fwalk_reent+0x12>

080045f6 <__retarget_lock_init_recursive>:
 80045f6:	4770      	bx	lr

080045f8 <__retarget_lock_acquire_recursive>:
 80045f8:	4770      	bx	lr

080045fa <__retarget_lock_release_recursive>:
 80045fa:	4770      	bx	lr

080045fc <__swhatbuf_r>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	460e      	mov	r6, r1
 8004600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004604:	2900      	cmp	r1, #0
 8004606:	b096      	sub	sp, #88	; 0x58
 8004608:	4614      	mov	r4, r2
 800460a:	461d      	mov	r5, r3
 800460c:	da08      	bge.n	8004620 <__swhatbuf_r+0x24>
 800460e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	602a      	str	r2, [r5, #0]
 8004616:	061a      	lsls	r2, r3, #24
 8004618:	d410      	bmi.n	800463c <__swhatbuf_r+0x40>
 800461a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461e:	e00e      	b.n	800463e <__swhatbuf_r+0x42>
 8004620:	466a      	mov	r2, sp
 8004622:	f000 fc95 	bl	8004f50 <_fstat_r>
 8004626:	2800      	cmp	r0, #0
 8004628:	dbf1      	blt.n	800460e <__swhatbuf_r+0x12>
 800462a:	9a01      	ldr	r2, [sp, #4]
 800462c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004634:	425a      	negs	r2, r3
 8004636:	415a      	adcs	r2, r3
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	e7ee      	b.n	800461a <__swhatbuf_r+0x1e>
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	2000      	movs	r0, #0
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	b016      	add	sp, #88	; 0x58
 8004644:	bd70      	pop	{r4, r5, r6, pc}
	...

08004648 <__smakebuf_r>:
 8004648:	898b      	ldrh	r3, [r1, #12]
 800464a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800464c:	079d      	lsls	r5, r3, #30
 800464e:	4606      	mov	r6, r0
 8004650:	460c      	mov	r4, r1
 8004652:	d507      	bpl.n	8004664 <__smakebuf_r+0x1c>
 8004654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	2301      	movs	r3, #1
 800465e:	6163      	str	r3, [r4, #20]
 8004660:	b002      	add	sp, #8
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	ab01      	add	r3, sp, #4
 8004666:	466a      	mov	r2, sp
 8004668:	f7ff ffc8 	bl	80045fc <__swhatbuf_r>
 800466c:	9900      	ldr	r1, [sp, #0]
 800466e:	4605      	mov	r5, r0
 8004670:	4630      	mov	r0, r6
 8004672:	f000 f895 	bl	80047a0 <_malloc_r>
 8004676:	b948      	cbnz	r0, 800468c <__smakebuf_r+0x44>
 8004678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800467c:	059a      	lsls	r2, r3, #22
 800467e:	d4ef      	bmi.n	8004660 <__smakebuf_r+0x18>
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	e7e3      	b.n	8004654 <__smakebuf_r+0xc>
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <__smakebuf_r+0x7c>)
 800468e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	6020      	str	r0, [r4, #0]
 8004694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	9b00      	ldr	r3, [sp, #0]
 800469c:	6163      	str	r3, [r4, #20]
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	6120      	str	r0, [r4, #16]
 80046a2:	b15b      	cbz	r3, 80046bc <__smakebuf_r+0x74>
 80046a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a8:	4630      	mov	r0, r6
 80046aa:	f000 fc63 	bl	8004f74 <_isatty_r>
 80046ae:	b128      	cbz	r0, 80046bc <__smakebuf_r+0x74>
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	f023 0303 	bic.w	r3, r3, #3
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	81a3      	strh	r3, [r4, #12]
 80046bc:	89a0      	ldrh	r0, [r4, #12]
 80046be:	4305      	orrs	r5, r0
 80046c0:	81a5      	strh	r5, [r4, #12]
 80046c2:	e7cd      	b.n	8004660 <__smakebuf_r+0x18>
 80046c4:	08004455 	.word	0x08004455

080046c8 <_free_r>:
 80046c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ca:	2900      	cmp	r1, #0
 80046cc:	d044      	beq.n	8004758 <_free_r+0x90>
 80046ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f1a1 0404 	sub.w	r4, r1, #4
 80046da:	bfb8      	it	lt
 80046dc:	18e4      	addlt	r4, r4, r3
 80046de:	f000 fc6b 	bl	8004fb8 <__malloc_lock>
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <_free_r+0x94>)
 80046e4:	9801      	ldr	r0, [sp, #4]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	b933      	cbnz	r3, 80046f8 <_free_r+0x30>
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	6014      	str	r4, [r2, #0]
 80046ee:	b003      	add	sp, #12
 80046f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f4:	f000 bc66 	b.w	8004fc4 <__malloc_unlock>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d908      	bls.n	800470e <_free_r+0x46>
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	1961      	adds	r1, r4, r5
 8004700:	428b      	cmp	r3, r1
 8004702:	bf01      	itttt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	1949      	addeq	r1, r1, r5
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	e7ed      	b.n	80046ea <_free_r+0x22>
 800470e:	461a      	mov	r2, r3
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b10b      	cbz	r3, 8004718 <_free_r+0x50>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d9fa      	bls.n	800470e <_free_r+0x46>
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	1855      	adds	r5, r2, r1
 800471c:	42a5      	cmp	r5, r4
 800471e:	d10b      	bne.n	8004738 <_free_r+0x70>
 8004720:	6824      	ldr	r4, [r4, #0]
 8004722:	4421      	add	r1, r4
 8004724:	1854      	adds	r4, r2, r1
 8004726:	42a3      	cmp	r3, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	d1e0      	bne.n	80046ee <_free_r+0x26>
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	4421      	add	r1, r4
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	e7da      	b.n	80046ee <_free_r+0x26>
 8004738:	d902      	bls.n	8004740 <_free_r+0x78>
 800473a:	230c      	movs	r3, #12
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	e7d6      	b.n	80046ee <_free_r+0x26>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1961      	adds	r1, r4, r5
 8004744:	428b      	cmp	r3, r1
 8004746:	bf04      	itt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	bf04      	itt	eq
 8004750:	1949      	addeq	r1, r1, r5
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6054      	str	r4, [r2, #4]
 8004756:	e7ca      	b.n	80046ee <_free_r+0x26>
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	20000160 	.word	0x20000160

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0e      	ldr	r6, [pc, #56]	; (800479c <sbrk_aligned+0x3c>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fb7a 	bl	8004e64 <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fb75 	bl	8004e64 <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d00a      	beq.n	8004794 <sbrk_aligned+0x34>
 800477e:	1cc4      	adds	r4, r0, #3
 8004780:	f024 0403 	bic.w	r4, r4, #3
 8004784:	42a0      	cmp	r0, r4
 8004786:	d007      	beq.n	8004798 <sbrk_aligned+0x38>
 8004788:	1a21      	subs	r1, r4, r0
 800478a:	4628      	mov	r0, r5
 800478c:	f000 fb6a 	bl	8004e64 <_sbrk_r>
 8004790:	3001      	adds	r0, #1
 8004792:	d101      	bne.n	8004798 <sbrk_aligned+0x38>
 8004794:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004798:	4620      	mov	r0, r4
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	20000164 	.word	0x20000164

080047a0 <_malloc_r>:
 80047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a4:	1ccd      	adds	r5, r1, #3
 80047a6:	f025 0503 	bic.w	r5, r5, #3
 80047aa:	3508      	adds	r5, #8
 80047ac:	2d0c      	cmp	r5, #12
 80047ae:	bf38      	it	cc
 80047b0:	250c      	movcc	r5, #12
 80047b2:	2d00      	cmp	r5, #0
 80047b4:	4607      	mov	r7, r0
 80047b6:	db01      	blt.n	80047bc <_malloc_r+0x1c>
 80047b8:	42a9      	cmp	r1, r5
 80047ba:	d905      	bls.n	80047c8 <_malloc_r+0x28>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	2600      	movs	r6, #0
 80047c2:	4630      	mov	r0, r6
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	4e2e      	ldr	r6, [pc, #184]	; (8004884 <_malloc_r+0xe4>)
 80047ca:	f000 fbf5 	bl	8004fb8 <__malloc_lock>
 80047ce:	6833      	ldr	r3, [r6, #0]
 80047d0:	461c      	mov	r4, r3
 80047d2:	bb34      	cbnz	r4, 8004822 <_malloc_r+0x82>
 80047d4:	4629      	mov	r1, r5
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff ffc2 	bl	8004760 <sbrk_aligned>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	4604      	mov	r4, r0
 80047e0:	d14d      	bne.n	800487e <_malloc_r+0xde>
 80047e2:	6834      	ldr	r4, [r6, #0]
 80047e4:	4626      	mov	r6, r4
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d140      	bne.n	800486c <_malloc_r+0xcc>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4631      	mov	r1, r6
 80047ee:	4638      	mov	r0, r7
 80047f0:	eb04 0803 	add.w	r8, r4, r3
 80047f4:	f000 fb36 	bl	8004e64 <_sbrk_r>
 80047f8:	4580      	cmp	r8, r0
 80047fa:	d13a      	bne.n	8004872 <_malloc_r+0xd2>
 80047fc:	6821      	ldr	r1, [r4, #0]
 80047fe:	3503      	adds	r5, #3
 8004800:	1a6d      	subs	r5, r5, r1
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	4629      	mov	r1, r5
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ffa5 	bl	8004760 <sbrk_aligned>
 8004816:	3001      	adds	r0, #1
 8004818:	d02b      	beq.n	8004872 <_malloc_r+0xd2>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	442b      	add	r3, r5
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	e00e      	b.n	8004840 <_malloc_r+0xa0>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	1b52      	subs	r2, r2, r5
 8004826:	d41e      	bmi.n	8004866 <_malloc_r+0xc6>
 8004828:	2a0b      	cmp	r2, #11
 800482a:	d916      	bls.n	800485a <_malloc_r+0xba>
 800482c:	1961      	adds	r1, r4, r5
 800482e:	42a3      	cmp	r3, r4
 8004830:	6025      	str	r5, [r4, #0]
 8004832:	bf18      	it	ne
 8004834:	6059      	strne	r1, [r3, #4]
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	bf08      	it	eq
 800483a:	6031      	streq	r1, [r6, #0]
 800483c:	5162      	str	r2, [r4, r5]
 800483e:	604b      	str	r3, [r1, #4]
 8004840:	4638      	mov	r0, r7
 8004842:	f104 060b 	add.w	r6, r4, #11
 8004846:	f000 fbbd 	bl	8004fc4 <__malloc_unlock>
 800484a:	f026 0607 	bic.w	r6, r6, #7
 800484e:	1d23      	adds	r3, r4, #4
 8004850:	1af2      	subs	r2, r6, r3
 8004852:	d0b6      	beq.n	80047c2 <_malloc_r+0x22>
 8004854:	1b9b      	subs	r3, r3, r6
 8004856:	50a3      	str	r3, [r4, r2]
 8004858:	e7b3      	b.n	80047c2 <_malloc_r+0x22>
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	42a3      	cmp	r3, r4
 800485e:	bf0c      	ite	eq
 8004860:	6032      	streq	r2, [r6, #0]
 8004862:	605a      	strne	r2, [r3, #4]
 8004864:	e7ec      	b.n	8004840 <_malloc_r+0xa0>
 8004866:	4623      	mov	r3, r4
 8004868:	6864      	ldr	r4, [r4, #4]
 800486a:	e7b2      	b.n	80047d2 <_malloc_r+0x32>
 800486c:	4634      	mov	r4, r6
 800486e:	6876      	ldr	r6, [r6, #4]
 8004870:	e7b9      	b.n	80047e6 <_malloc_r+0x46>
 8004872:	230c      	movs	r3, #12
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4638      	mov	r0, r7
 8004878:	f000 fba4 	bl	8004fc4 <__malloc_unlock>
 800487c:	e7a1      	b.n	80047c2 <_malloc_r+0x22>
 800487e:	6025      	str	r5, [r4, #0]
 8004880:	e7de      	b.n	8004840 <_malloc_r+0xa0>
 8004882:	bf00      	nop
 8004884:	20000160 	.word	0x20000160

08004888 <__sfputc_r>:
 8004888:	6893      	ldr	r3, [r2, #8]
 800488a:	3b01      	subs	r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	b410      	push	{r4}
 8004890:	6093      	str	r3, [r2, #8]
 8004892:	da08      	bge.n	80048a6 <__sfputc_r+0x1e>
 8004894:	6994      	ldr	r4, [r2, #24]
 8004896:	42a3      	cmp	r3, r4
 8004898:	db01      	blt.n	800489e <__sfputc_r+0x16>
 800489a:	290a      	cmp	r1, #10
 800489c:	d103      	bne.n	80048a6 <__sfputc_r+0x1e>
 800489e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a2:	f7ff bc31 	b.w	8004108 <__swbuf_r>
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	1c58      	adds	r0, r3, #1
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	7019      	strb	r1, [r3, #0]
 80048ae:	4608      	mov	r0, r1
 80048b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <__sfputs_r>:
 80048b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	18d5      	adds	r5, r2, r3
 80048c0:	42ac      	cmp	r4, r5
 80048c2:	d101      	bne.n	80048c8 <__sfputs_r+0x12>
 80048c4:	2000      	movs	r0, #0
 80048c6:	e007      	b.n	80048d8 <__sfputs_r+0x22>
 80048c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048cc:	463a      	mov	r2, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7ff ffda 	bl	8004888 <__sfputc_r>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d1f3      	bne.n	80048c0 <__sfputs_r+0xa>
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048dc <_vfiprintf_r>:
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	460d      	mov	r5, r1
 80048e2:	b09d      	sub	sp, #116	; 0x74
 80048e4:	4614      	mov	r4, r2
 80048e6:	4698      	mov	r8, r3
 80048e8:	4606      	mov	r6, r0
 80048ea:	b118      	cbz	r0, 80048f4 <_vfiprintf_r+0x18>
 80048ec:	6983      	ldr	r3, [r0, #24]
 80048ee:	b90b      	cbnz	r3, 80048f4 <_vfiprintf_r+0x18>
 80048f0:	f7ff fde4 	bl	80044bc <__sinit>
 80048f4:	4b89      	ldr	r3, [pc, #548]	; (8004b1c <_vfiprintf_r+0x240>)
 80048f6:	429d      	cmp	r5, r3
 80048f8:	d11b      	bne.n	8004932 <_vfiprintf_r+0x56>
 80048fa:	6875      	ldr	r5, [r6, #4]
 80048fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048fe:	07d9      	lsls	r1, r3, #31
 8004900:	d405      	bmi.n	800490e <_vfiprintf_r+0x32>
 8004902:	89ab      	ldrh	r3, [r5, #12]
 8004904:	059a      	lsls	r2, r3, #22
 8004906:	d402      	bmi.n	800490e <_vfiprintf_r+0x32>
 8004908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800490a:	f7ff fe75 	bl	80045f8 <__retarget_lock_acquire_recursive>
 800490e:	89ab      	ldrh	r3, [r5, #12]
 8004910:	071b      	lsls	r3, r3, #28
 8004912:	d501      	bpl.n	8004918 <_vfiprintf_r+0x3c>
 8004914:	692b      	ldr	r3, [r5, #16]
 8004916:	b9eb      	cbnz	r3, 8004954 <_vfiprintf_r+0x78>
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff fc46 	bl	80041ac <__swsetup_r>
 8004920:	b1c0      	cbz	r0, 8004954 <_vfiprintf_r+0x78>
 8004922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004924:	07dc      	lsls	r4, r3, #31
 8004926:	d50e      	bpl.n	8004946 <_vfiprintf_r+0x6a>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800492c:	b01d      	add	sp, #116	; 0x74
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <_vfiprintf_r+0x244>)
 8004934:	429d      	cmp	r5, r3
 8004936:	d101      	bne.n	800493c <_vfiprintf_r+0x60>
 8004938:	68b5      	ldr	r5, [r6, #8]
 800493a:	e7df      	b.n	80048fc <_vfiprintf_r+0x20>
 800493c:	4b79      	ldr	r3, [pc, #484]	; (8004b24 <_vfiprintf_r+0x248>)
 800493e:	429d      	cmp	r5, r3
 8004940:	bf08      	it	eq
 8004942:	68f5      	ldreq	r5, [r6, #12]
 8004944:	e7da      	b.n	80048fc <_vfiprintf_r+0x20>
 8004946:	89ab      	ldrh	r3, [r5, #12]
 8004948:	0598      	lsls	r0, r3, #22
 800494a:	d4ed      	bmi.n	8004928 <_vfiprintf_r+0x4c>
 800494c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800494e:	f7ff fe54 	bl	80045fa <__retarget_lock_release_recursive>
 8004952:	e7e9      	b.n	8004928 <_vfiprintf_r+0x4c>
 8004954:	2300      	movs	r3, #0
 8004956:	9309      	str	r3, [sp, #36]	; 0x24
 8004958:	2320      	movs	r3, #32
 800495a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800495e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004962:	2330      	movs	r3, #48	; 0x30
 8004964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b28 <_vfiprintf_r+0x24c>
 8004968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800496c:	f04f 0901 	mov.w	r9, #1
 8004970:	4623      	mov	r3, r4
 8004972:	469a      	mov	sl, r3
 8004974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004978:	b10a      	cbz	r2, 800497e <_vfiprintf_r+0xa2>
 800497a:	2a25      	cmp	r2, #37	; 0x25
 800497c:	d1f9      	bne.n	8004972 <_vfiprintf_r+0x96>
 800497e:	ebba 0b04 	subs.w	fp, sl, r4
 8004982:	d00b      	beq.n	800499c <_vfiprintf_r+0xc0>
 8004984:	465b      	mov	r3, fp
 8004986:	4622      	mov	r2, r4
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff ff93 	bl	80048b6 <__sfputs_r>
 8004990:	3001      	adds	r0, #1
 8004992:	f000 80aa 	beq.w	8004aea <_vfiprintf_r+0x20e>
 8004996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004998:	445a      	add	r2, fp
 800499a:	9209      	str	r2, [sp, #36]	; 0x24
 800499c:	f89a 3000 	ldrb.w	r3, [sl]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80a2 	beq.w	8004aea <_vfiprintf_r+0x20e>
 80049a6:	2300      	movs	r3, #0
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049b0:	f10a 0a01 	add.w	sl, sl, #1
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	9307      	str	r3, [sp, #28]
 80049b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049bc:	931a      	str	r3, [sp, #104]	; 0x68
 80049be:	4654      	mov	r4, sl
 80049c0:	2205      	movs	r2, #5
 80049c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c6:	4858      	ldr	r0, [pc, #352]	; (8004b28 <_vfiprintf_r+0x24c>)
 80049c8:	f7fb fc02 	bl	80001d0 <memchr>
 80049cc:	9a04      	ldr	r2, [sp, #16]
 80049ce:	b9d8      	cbnz	r0, 8004a08 <_vfiprintf_r+0x12c>
 80049d0:	06d1      	lsls	r1, r2, #27
 80049d2:	bf44      	itt	mi
 80049d4:	2320      	movmi	r3, #32
 80049d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049da:	0713      	lsls	r3, r2, #28
 80049dc:	bf44      	itt	mi
 80049de:	232b      	movmi	r3, #43	; 0x2b
 80049e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e4:	f89a 3000 	ldrb.w	r3, [sl]
 80049e8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ea:	d015      	beq.n	8004a18 <_vfiprintf_r+0x13c>
 80049ec:	9a07      	ldr	r2, [sp, #28]
 80049ee:	4654      	mov	r4, sl
 80049f0:	2000      	movs	r0, #0
 80049f2:	f04f 0c0a 	mov.w	ip, #10
 80049f6:	4621      	mov	r1, r4
 80049f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fc:	3b30      	subs	r3, #48	; 0x30
 80049fe:	2b09      	cmp	r3, #9
 8004a00:	d94e      	bls.n	8004aa0 <_vfiprintf_r+0x1c4>
 8004a02:	b1b0      	cbz	r0, 8004a32 <_vfiprintf_r+0x156>
 8004a04:	9207      	str	r2, [sp, #28]
 8004a06:	e014      	b.n	8004a32 <_vfiprintf_r+0x156>
 8004a08:	eba0 0308 	sub.w	r3, r0, r8
 8004a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	46a2      	mov	sl, r4
 8004a16:	e7d2      	b.n	80049be <_vfiprintf_r+0xe2>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	1d19      	adds	r1, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	9103      	str	r1, [sp, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bfbb      	ittet	lt
 8004a24:	425b      	neglt	r3, r3
 8004a26:	f042 0202 	orrlt.w	r2, r2, #2
 8004a2a:	9307      	strge	r3, [sp, #28]
 8004a2c:	9307      	strlt	r3, [sp, #28]
 8004a2e:	bfb8      	it	lt
 8004a30:	9204      	strlt	r2, [sp, #16]
 8004a32:	7823      	ldrb	r3, [r4, #0]
 8004a34:	2b2e      	cmp	r3, #46	; 0x2e
 8004a36:	d10c      	bne.n	8004a52 <_vfiprintf_r+0x176>
 8004a38:	7863      	ldrb	r3, [r4, #1]
 8004a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3c:	d135      	bne.n	8004aaa <_vfiprintf_r+0x1ce>
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	1d1a      	adds	r2, r3, #4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	9203      	str	r2, [sp, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bfb8      	it	lt
 8004a4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a4e:	3402      	adds	r4, #2
 8004a50:	9305      	str	r3, [sp, #20]
 8004a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b38 <_vfiprintf_r+0x25c>
 8004a56:	7821      	ldrb	r1, [r4, #0]
 8004a58:	2203      	movs	r2, #3
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f7fb fbb8 	bl	80001d0 <memchr>
 8004a60:	b140      	cbz	r0, 8004a74 <_vfiprintf_r+0x198>
 8004a62:	2340      	movs	r3, #64	; 0x40
 8004a64:	eba0 000a 	sub.w	r0, r0, sl
 8004a68:	fa03 f000 	lsl.w	r0, r3, r0
 8004a6c:	9b04      	ldr	r3, [sp, #16]
 8004a6e:	4303      	orrs	r3, r0
 8004a70:	3401      	adds	r4, #1
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	482c      	ldr	r0, [pc, #176]	; (8004b2c <_vfiprintf_r+0x250>)
 8004a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a7e:	2206      	movs	r2, #6
 8004a80:	f7fb fba6 	bl	80001d0 <memchr>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d03f      	beq.n	8004b08 <_vfiprintf_r+0x22c>
 8004a88:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <_vfiprintf_r+0x254>)
 8004a8a:	bb1b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x1f8>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	3307      	adds	r3, #7
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	3308      	adds	r3, #8
 8004a96:	9303      	str	r3, [sp, #12]
 8004a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9a:	443b      	add	r3, r7
 8004a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9e:	e767      	b.n	8004970 <_vfiprintf_r+0x94>
 8004aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	e7a5      	b.n	80049f6 <_vfiprintf_r+0x11a>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	3401      	adds	r4, #1
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f04f 0c0a 	mov.w	ip, #10
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004abc:	3a30      	subs	r2, #48	; 0x30
 8004abe:	2a09      	cmp	r2, #9
 8004ac0:	d903      	bls.n	8004aca <_vfiprintf_r+0x1ee>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0c5      	beq.n	8004a52 <_vfiprintf_r+0x176>
 8004ac6:	9105      	str	r1, [sp, #20]
 8004ac8:	e7c3      	b.n	8004a52 <_vfiprintf_r+0x176>
 8004aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ace:	4604      	mov	r4, r0
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e7f0      	b.n	8004ab6 <_vfiprintf_r+0x1da>
 8004ad4:	ab03      	add	r3, sp, #12
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <_vfiprintf_r+0x258>)
 8004adc:	a904      	add	r1, sp, #16
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f3af 8000 	nop.w
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	1c78      	adds	r0, r7, #1
 8004ae8:	d1d6      	bne.n	8004a98 <_vfiprintf_r+0x1bc>
 8004aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aec:	07d9      	lsls	r1, r3, #31
 8004aee:	d405      	bmi.n	8004afc <_vfiprintf_r+0x220>
 8004af0:	89ab      	ldrh	r3, [r5, #12]
 8004af2:	059a      	lsls	r2, r3, #22
 8004af4:	d402      	bmi.n	8004afc <_vfiprintf_r+0x220>
 8004af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af8:	f7ff fd7f 	bl	80045fa <__retarget_lock_release_recursive>
 8004afc:	89ab      	ldrh	r3, [r5, #12]
 8004afe:	065b      	lsls	r3, r3, #25
 8004b00:	f53f af12 	bmi.w	8004928 <_vfiprintf_r+0x4c>
 8004b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b06:	e711      	b.n	800492c <_vfiprintf_r+0x50>
 8004b08:	ab03      	add	r3, sp, #12
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <_vfiprintf_r+0x258>)
 8004b10:	a904      	add	r1, sp, #16
 8004b12:	4630      	mov	r0, r6
 8004b14:	f000 f880 	bl	8004c18 <_printf_i>
 8004b18:	e7e4      	b.n	8004ae4 <_vfiprintf_r+0x208>
 8004b1a:	bf00      	nop
 8004b1c:	080055f0 	.word	0x080055f0
 8004b20:	08005610 	.word	0x08005610
 8004b24:	080055d0 	.word	0x080055d0
 8004b28:	08005630 	.word	0x08005630
 8004b2c:	0800563a 	.word	0x0800563a
 8004b30:	00000000 	.word	0x00000000
 8004b34:	080048b7 	.word	0x080048b7
 8004b38:	08005636 	.word	0x08005636

08004b3c <_printf_common>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	4616      	mov	r6, r2
 8004b42:	4699      	mov	r9, r3
 8004b44:	688a      	ldr	r2, [r1, #8]
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bfb8      	it	lt
 8004b50:	4613      	movlt	r3, r2
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b58:	4607      	mov	r7, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	b10a      	cbz	r2, 8004b62 <_printf_common+0x26>
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	bf42      	ittt	mi
 8004b68:	6833      	ldrmi	r3, [r6, #0]
 8004b6a:	3302      	addmi	r3, #2
 8004b6c:	6033      	strmi	r3, [r6, #0]
 8004b6e:	6825      	ldr	r5, [r4, #0]
 8004b70:	f015 0506 	ands.w	r5, r5, #6
 8004b74:	d106      	bne.n	8004b84 <_printf_common+0x48>
 8004b76:	f104 0a19 	add.w	sl, r4, #25
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	6832      	ldr	r2, [r6, #0]
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dc26      	bgt.n	8004bd2 <_printf_common+0x96>
 8004b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b88:	1e13      	subs	r3, r2, #0
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	bf18      	it	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	0692      	lsls	r2, r2, #26
 8004b92:	d42b      	bmi.n	8004bec <_printf_common+0xb0>
 8004b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d01e      	beq.n	8004be0 <_printf_common+0xa4>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	68e5      	ldr	r5, [r4, #12]
 8004ba6:	6832      	ldr	r2, [r6, #0]
 8004ba8:	f003 0306 	and.w	r3, r3, #6
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	bf08      	it	eq
 8004bb0:	1aad      	subeq	r5, r5, r2
 8004bb2:	68a3      	ldr	r3, [r4, #8]
 8004bb4:	6922      	ldr	r2, [r4, #16]
 8004bb6:	bf0c      	ite	eq
 8004bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bbc:	2500      	movne	r5, #0
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	bfc4      	itt	gt
 8004bc2:	1a9b      	subgt	r3, r3, r2
 8004bc4:	18ed      	addgt	r5, r5, r3
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	341a      	adds	r4, #26
 8004bca:	42b5      	cmp	r5, r6
 8004bcc:	d11a      	bne.n	8004c04 <_printf_common+0xc8>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e008      	b.n	8004be4 <_printf_common+0xa8>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4652      	mov	r2, sl
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	4638      	mov	r0, r7
 8004bda:	47c0      	blx	r8
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d103      	bne.n	8004be8 <_printf_common+0xac>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	3501      	adds	r5, #1
 8004bea:	e7c6      	b.n	8004b7a <_printf_common+0x3e>
 8004bec:	18e1      	adds	r1, r4, r3
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	2030      	movs	r0, #48	; 0x30
 8004bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bf6:	4422      	add	r2, r4
 8004bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c00:	3302      	adds	r3, #2
 8004c02:	e7c7      	b.n	8004b94 <_printf_common+0x58>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4622      	mov	r2, r4
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	47c0      	blx	r8
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d0e6      	beq.n	8004be0 <_printf_common+0xa4>
 8004c12:	3601      	adds	r6, #1
 8004c14:	e7d9      	b.n	8004bca <_printf_common+0x8e>
	...

08004c18 <_printf_i>:
 8004c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	7e0f      	ldrb	r7, [r1, #24]
 8004c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c20:	2f78      	cmp	r7, #120	; 0x78
 8004c22:	4691      	mov	r9, r2
 8004c24:	4680      	mov	r8, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	469a      	mov	sl, r3
 8004c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c2e:	d807      	bhi.n	8004c40 <_printf_i+0x28>
 8004c30:	2f62      	cmp	r7, #98	; 0x62
 8004c32:	d80a      	bhi.n	8004c4a <_printf_i+0x32>
 8004c34:	2f00      	cmp	r7, #0
 8004c36:	f000 80d8 	beq.w	8004dea <_printf_i+0x1d2>
 8004c3a:	2f58      	cmp	r7, #88	; 0x58
 8004c3c:	f000 80a3 	beq.w	8004d86 <_printf_i+0x16e>
 8004c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c48:	e03a      	b.n	8004cc0 <_printf_i+0xa8>
 8004c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c4e:	2b15      	cmp	r3, #21
 8004c50:	d8f6      	bhi.n	8004c40 <_printf_i+0x28>
 8004c52:	a101      	add	r1, pc, #4	; (adr r1, 8004c58 <_printf_i+0x40>)
 8004c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004c41 	.word	0x08004c41
 8004c64:	08004c41 	.word	0x08004c41
 8004c68:	08004c41 	.word	0x08004c41
 8004c6c:	08004c41 	.word	0x08004c41
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004c41 	.word	0x08004c41
 8004c78:	08004c41 	.word	0x08004c41
 8004c7c:	08004c41 	.word	0x08004c41
 8004c80:	08004c41 	.word	0x08004c41
 8004c84:	08004dd1 	.word	0x08004dd1
 8004c88:	08004cf5 	.word	0x08004cf5
 8004c8c:	08004db3 	.word	0x08004db3
 8004c90:	08004c41 	.word	0x08004c41
 8004c94:	08004c41 	.word	0x08004c41
 8004c98:	08004df3 	.word	0x08004df3
 8004c9c:	08004c41 	.word	0x08004c41
 8004ca0:	08004cf5 	.word	0x08004cf5
 8004ca4:	08004c41 	.word	0x08004c41
 8004ca8:	08004c41 	.word	0x08004c41
 8004cac:	08004dbb 	.word	0x08004dbb
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	602a      	str	r2, [r5, #0]
 8004cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0a3      	b.n	8004e0c <_printf_i+0x1f4>
 8004cc4:	6820      	ldr	r0, [r4, #0]
 8004cc6:	6829      	ldr	r1, [r5, #0]
 8004cc8:	0606      	lsls	r6, r0, #24
 8004cca:	f101 0304 	add.w	r3, r1, #4
 8004cce:	d50a      	bpl.n	8004ce6 <_printf_i+0xce>
 8004cd0:	680e      	ldr	r6, [r1, #0]
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	da03      	bge.n	8004ce0 <_printf_i+0xc8>
 8004cd8:	232d      	movs	r3, #45	; 0x2d
 8004cda:	4276      	negs	r6, r6
 8004cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce0:	485e      	ldr	r0, [pc, #376]	; (8004e5c <_printf_i+0x244>)
 8004ce2:	230a      	movs	r3, #10
 8004ce4:	e019      	b.n	8004d1a <_printf_i+0x102>
 8004ce6:	680e      	ldr	r6, [r1, #0]
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cee:	bf18      	it	ne
 8004cf0:	b236      	sxthne	r6, r6
 8004cf2:	e7ef      	b.n	8004cd4 <_printf_i+0xbc>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	6820      	ldr	r0, [r4, #0]
 8004cf8:	1d19      	adds	r1, r3, #4
 8004cfa:	6029      	str	r1, [r5, #0]
 8004cfc:	0601      	lsls	r1, r0, #24
 8004cfe:	d501      	bpl.n	8004d04 <_printf_i+0xec>
 8004d00:	681e      	ldr	r6, [r3, #0]
 8004d02:	e002      	b.n	8004d0a <_printf_i+0xf2>
 8004d04:	0646      	lsls	r6, r0, #25
 8004d06:	d5fb      	bpl.n	8004d00 <_printf_i+0xe8>
 8004d08:	881e      	ldrh	r6, [r3, #0]
 8004d0a:	4854      	ldr	r0, [pc, #336]	; (8004e5c <_printf_i+0x244>)
 8004d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d0e:	bf0c      	ite	eq
 8004d10:	2308      	moveq	r3, #8
 8004d12:	230a      	movne	r3, #10
 8004d14:	2100      	movs	r1, #0
 8004d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d1a:	6865      	ldr	r5, [r4, #4]
 8004d1c:	60a5      	str	r5, [r4, #8]
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	bfa2      	ittt	ge
 8004d22:	6821      	ldrge	r1, [r4, #0]
 8004d24:	f021 0104 	bicge.w	r1, r1, #4
 8004d28:	6021      	strge	r1, [r4, #0]
 8004d2a:	b90e      	cbnz	r6, 8004d30 <_printf_i+0x118>
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	d04d      	beq.n	8004dcc <_printf_i+0x1b4>
 8004d30:	4615      	mov	r5, r2
 8004d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d36:	fb03 6711 	mls	r7, r3, r1, r6
 8004d3a:	5dc7      	ldrb	r7, [r0, r7]
 8004d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d40:	4637      	mov	r7, r6
 8004d42:	42bb      	cmp	r3, r7
 8004d44:	460e      	mov	r6, r1
 8004d46:	d9f4      	bls.n	8004d32 <_printf_i+0x11a>
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d10b      	bne.n	8004d64 <_printf_i+0x14c>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	07de      	lsls	r6, r3, #31
 8004d50:	d508      	bpl.n	8004d64 <_printf_i+0x14c>
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	6861      	ldr	r1, [r4, #4]
 8004d56:	4299      	cmp	r1, r3
 8004d58:	bfde      	ittt	le
 8004d5a:	2330      	movle	r3, #48	; 0x30
 8004d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d64:	1b52      	subs	r2, r2, r5
 8004d66:	6122      	str	r2, [r4, #16]
 8004d68:	f8cd a000 	str.w	sl, [sp]
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	aa03      	add	r2, sp, #12
 8004d70:	4621      	mov	r1, r4
 8004d72:	4640      	mov	r0, r8
 8004d74:	f7ff fee2 	bl	8004b3c <_printf_common>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d14c      	bne.n	8004e16 <_printf_i+0x1fe>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d80:	b004      	add	sp, #16
 8004d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d86:	4835      	ldr	r0, [pc, #212]	; (8004e5c <_printf_i+0x244>)
 8004d88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d8c:	6829      	ldr	r1, [r5, #0]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d94:	6029      	str	r1, [r5, #0]
 8004d96:	061d      	lsls	r5, r3, #24
 8004d98:	d514      	bpl.n	8004dc4 <_printf_i+0x1ac>
 8004d9a:	07df      	lsls	r7, r3, #31
 8004d9c:	bf44      	itt	mi
 8004d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004da2:	6023      	strmi	r3, [r4, #0]
 8004da4:	b91e      	cbnz	r6, 8004dae <_printf_i+0x196>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	f023 0320 	bic.w	r3, r3, #32
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	2310      	movs	r3, #16
 8004db0:	e7b0      	b.n	8004d14 <_printf_i+0xfc>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f043 0320 	orr.w	r3, r3, #32
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	2378      	movs	r3, #120	; 0x78
 8004dbc:	4828      	ldr	r0, [pc, #160]	; (8004e60 <_printf_i+0x248>)
 8004dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dc2:	e7e3      	b.n	8004d8c <_printf_i+0x174>
 8004dc4:	0659      	lsls	r1, r3, #25
 8004dc6:	bf48      	it	mi
 8004dc8:	b2b6      	uxthmi	r6, r6
 8004dca:	e7e6      	b.n	8004d9a <_printf_i+0x182>
 8004dcc:	4615      	mov	r5, r2
 8004dce:	e7bb      	b.n	8004d48 <_printf_i+0x130>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	6826      	ldr	r6, [r4, #0]
 8004dd4:	6961      	ldr	r1, [r4, #20]
 8004dd6:	1d18      	adds	r0, r3, #4
 8004dd8:	6028      	str	r0, [r5, #0]
 8004dda:	0635      	lsls	r5, r6, #24
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0x1cc>
 8004de0:	6019      	str	r1, [r3, #0]
 8004de2:	e002      	b.n	8004dea <_printf_i+0x1d2>
 8004de4:	0670      	lsls	r0, r6, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0x1c8>
 8004de8:	8019      	strh	r1, [r3, #0]
 8004dea:	2300      	movs	r3, #0
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	4615      	mov	r5, r2
 8004df0:	e7ba      	b.n	8004d68 <_printf_i+0x150>
 8004df2:	682b      	ldr	r3, [r5, #0]
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	602a      	str	r2, [r5, #0]
 8004df8:	681d      	ldr	r5, [r3, #0]
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f7fb f9e6 	bl	80001d0 <memchr>
 8004e04:	b108      	cbz	r0, 8004e0a <_printf_i+0x1f2>
 8004e06:	1b40      	subs	r0, r0, r5
 8004e08:	6060      	str	r0, [r4, #4]
 8004e0a:	6863      	ldr	r3, [r4, #4]
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e14:	e7a8      	b.n	8004d68 <_printf_i+0x150>
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	462a      	mov	r2, r5
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	47d0      	blx	sl
 8004e20:	3001      	adds	r0, #1
 8004e22:	d0ab      	beq.n	8004d7c <_printf_i+0x164>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	079b      	lsls	r3, r3, #30
 8004e28:	d413      	bmi.n	8004e52 <_printf_i+0x23a>
 8004e2a:	68e0      	ldr	r0, [r4, #12]
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	bfb8      	it	lt
 8004e32:	4618      	movlt	r0, r3
 8004e34:	e7a4      	b.n	8004d80 <_printf_i+0x168>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4632      	mov	r2, r6
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	47d0      	blx	sl
 8004e40:	3001      	adds	r0, #1
 8004e42:	d09b      	beq.n	8004d7c <_printf_i+0x164>
 8004e44:	3501      	adds	r5, #1
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	9903      	ldr	r1, [sp, #12]
 8004e4a:	1a5b      	subs	r3, r3, r1
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dcf2      	bgt.n	8004e36 <_printf_i+0x21e>
 8004e50:	e7eb      	b.n	8004e2a <_printf_i+0x212>
 8004e52:	2500      	movs	r5, #0
 8004e54:	f104 0619 	add.w	r6, r4, #25
 8004e58:	e7f5      	b.n	8004e46 <_printf_i+0x22e>
 8004e5a:	bf00      	nop
 8004e5c:	08005641 	.word	0x08005641
 8004e60:	08005652 	.word	0x08005652

08004e64 <_sbrk_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4d06      	ldr	r5, [pc, #24]	; (8004e80 <_sbrk_r+0x1c>)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	f7fb fdd2 	bl	8000a18 <_sbrk>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_sbrk_r+0x1a>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_sbrk_r+0x1a>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	20000168 	.word	0x20000168

08004e84 <__sread>:
 8004e84:	b510      	push	{r4, lr}
 8004e86:	460c      	mov	r4, r1
 8004e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8c:	f000 f8a0 	bl	8004fd0 <_read_r>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	bfab      	itete	ge
 8004e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e96:	89a3      	ldrhlt	r3, [r4, #12]
 8004e98:	181b      	addge	r3, r3, r0
 8004e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e9e:	bfac      	ite	ge
 8004ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ea2:	81a3      	strhlt	r3, [r4, #12]
 8004ea4:	bd10      	pop	{r4, pc}

08004ea6 <__swrite>:
 8004ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	461f      	mov	r7, r3
 8004eac:	898b      	ldrh	r3, [r1, #12]
 8004eae:	05db      	lsls	r3, r3, #23
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	d505      	bpl.n	8004ec4 <__swrite+0x1e>
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f000 f868 	bl	8004f94 <_lseek_r>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	f000 b817 	b.w	8004f0c <_write_r>

08004ede <__sseek>:
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee6:	f000 f855 	bl	8004f94 <_lseek_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	bf15      	itete	ne
 8004ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004efa:	81a3      	strheq	r3, [r4, #12]
 8004efc:	bf18      	it	ne
 8004efe:	81a3      	strhne	r3, [r4, #12]
 8004f00:	bd10      	pop	{r4, pc}

08004f02 <__sclose>:
 8004f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f06:	f000 b813 	b.w	8004f30 <_close_r>
	...

08004f0c <_write_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d07      	ldr	r5, [pc, #28]	; (8004f2c <_write_r+0x20>)
 8004f10:	4604      	mov	r4, r0
 8004f12:	4608      	mov	r0, r1
 8004f14:	4611      	mov	r1, r2
 8004f16:	2200      	movs	r2, #0
 8004f18:	602a      	str	r2, [r5, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 f911 	bl	8005142 <_write>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_write_r+0x1e>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_write_r+0x1e>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000168 	.word	0x20000168

08004f30 <_close_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d06      	ldr	r5, [pc, #24]	; (8004f4c <_close_r+0x1c>)
 8004f34:	2300      	movs	r3, #0
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f000 f932 	bl	80051a4 <_close>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_close_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_close_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20000168 	.word	0x20000168

08004f50 <_fstat_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d07      	ldr	r5, [pc, #28]	; (8004f70 <_fstat_r+0x20>)
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	602b      	str	r3, [r5, #0]
 8004f5e:	f000 f968 	bl	8005232 <_fstat>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	d102      	bne.n	8004f6c <_fstat_r+0x1c>
 8004f66:	682b      	ldr	r3, [r5, #0]
 8004f68:	b103      	cbz	r3, 8004f6c <_fstat_r+0x1c>
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	bd38      	pop	{r3, r4, r5, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000168 	.word	0x20000168

08004f74 <_isatty_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d06      	ldr	r5, [pc, #24]	; (8004f90 <_isatty_r+0x1c>)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	f000 fabe 	bl	8005500 <_isatty>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_isatty_r+0x1a>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_isatty_r+0x1a>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	20000168 	.word	0x20000168

08004f94 <_lseek_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d07      	ldr	r5, [pc, #28]	; (8004fb4 <_lseek_r+0x20>)
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 f8bb 	bl	800511e <_lseek>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_lseek_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_lseek_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000168 	.word	0x20000168

08004fb8 <__malloc_lock>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__malloc_lock+0x8>)
 8004fba:	f7ff bb1d 	b.w	80045f8 <__retarget_lock_acquire_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	2000015c 	.word	0x2000015c

08004fc4 <__malloc_unlock>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__malloc_unlock+0x8>)
 8004fc6:	f7ff bb18 	b.w	80045fa <__retarget_lock_release_recursive>
 8004fca:	bf00      	nop
 8004fcc:	2000015c 	.word	0x2000015c

08004fd0 <_read_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d07      	ldr	r5, [pc, #28]	; (8004ff0 <_read_r+0x20>)
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	2200      	movs	r2, #0
 8004fdc:	602a      	str	r2, [r5, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f000 f845 	bl	800506e <_read>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_read_r+0x1e>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_read_r+0x1e>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	20000168 	.word	0x20000168

08004ff4 <findslot>:
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <findslot+0x2c>)
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	b118      	cbz	r0, 8005006 <findslot+0x12>
 8004ffe:	6983      	ldr	r3, [r0, #24]
 8005000:	b90b      	cbnz	r3, 8005006 <findslot+0x12>
 8005002:	f7ff fa5b 	bl	80044bc <__sinit>
 8005006:	2c13      	cmp	r4, #19
 8005008:	d807      	bhi.n	800501a <findslot+0x26>
 800500a:	4806      	ldr	r0, [pc, #24]	; (8005024 <findslot+0x30>)
 800500c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005010:	3201      	adds	r2, #1
 8005012:	d002      	beq.n	800501a <findslot+0x26>
 8005014:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005018:	bd10      	pop	{r4, pc}
 800501a:	2000      	movs	r0, #0
 800501c:	e7fc      	b.n	8005018 <findslot+0x24>
 800501e:	bf00      	nop
 8005020:	20000040 	.word	0x20000040
 8005024:	20000178 	.word	0x20000178

08005028 <error>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	4604      	mov	r4, r0
 800502c:	f7fe ffac 	bl	8003f88 <__errno>
 8005030:	2613      	movs	r6, #19
 8005032:	4605      	mov	r5, r0
 8005034:	2700      	movs	r7, #0
 8005036:	4630      	mov	r0, r6
 8005038:	4639      	mov	r1, r7
 800503a:	beab      	bkpt	0x00ab
 800503c:	4606      	mov	r6, r0
 800503e:	602e      	str	r6, [r5, #0]
 8005040:	4620      	mov	r0, r4
 8005042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005044 <checkerror>:
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d101      	bne.n	800504c <checkerror+0x8>
 8005048:	f7ff bfee 	b.w	8005028 <error>
 800504c:	4770      	bx	lr

0800504e <_swiread>:
 800504e:	b530      	push	{r4, r5, lr}
 8005050:	b085      	sub	sp, #20
 8005052:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005056:	9203      	str	r2, [sp, #12]
 8005058:	2406      	movs	r4, #6
 800505a:	ad01      	add	r5, sp, #4
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	beab      	bkpt	0x00ab
 8005062:	4604      	mov	r4, r0
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff ffed 	bl	8005044 <checkerror>
 800506a:	b005      	add	sp, #20
 800506c:	bd30      	pop	{r4, r5, pc}

0800506e <_read>:
 800506e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005070:	4615      	mov	r5, r2
 8005072:	9101      	str	r1, [sp, #4]
 8005074:	f7ff ffbe 	bl	8004ff4 <findslot>
 8005078:	9901      	ldr	r1, [sp, #4]
 800507a:	4604      	mov	r4, r0
 800507c:	b938      	cbnz	r0, 800508e <_read+0x20>
 800507e:	f7fe ff83 	bl	8003f88 <__errno>
 8005082:	2309      	movs	r3, #9
 8005084:	6003      	str	r3, [r0, #0]
 8005086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800508a:	b003      	add	sp, #12
 800508c:	bd30      	pop	{r4, r5, pc}
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	462a      	mov	r2, r5
 8005092:	f7ff ffdc 	bl	800504e <_swiread>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d0f7      	beq.n	800508a <_read+0x1c>
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	1a2a      	subs	r2, r5, r0
 800509e:	4413      	add	r3, r2
 80050a0:	6063      	str	r3, [r4, #4]
 80050a2:	4610      	mov	r0, r2
 80050a4:	e7f1      	b.n	800508a <_read+0x1c>

080050a6 <_swilseek>:
 80050a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a8:	460c      	mov	r4, r1
 80050aa:	4616      	mov	r6, r2
 80050ac:	f7ff ffa2 	bl	8004ff4 <findslot>
 80050b0:	4605      	mov	r5, r0
 80050b2:	b940      	cbnz	r0, 80050c6 <_swilseek+0x20>
 80050b4:	f7fe ff68 	bl	8003f88 <__errno>
 80050b8:	2309      	movs	r3, #9
 80050ba:	6003      	str	r3, [r0, #0]
 80050bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050c0:	4620      	mov	r0, r4
 80050c2:	b003      	add	sp, #12
 80050c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c6:	2e02      	cmp	r6, #2
 80050c8:	d903      	bls.n	80050d2 <_swilseek+0x2c>
 80050ca:	f7fe ff5d 	bl	8003f88 <__errno>
 80050ce:	2316      	movs	r3, #22
 80050d0:	e7f3      	b.n	80050ba <_swilseek+0x14>
 80050d2:	2e01      	cmp	r6, #1
 80050d4:	d112      	bne.n	80050fc <_swilseek+0x56>
 80050d6:	6843      	ldr	r3, [r0, #4]
 80050d8:	18e4      	adds	r4, r4, r3
 80050da:	d4f6      	bmi.n	80050ca <_swilseek+0x24>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	260a      	movs	r6, #10
 80050e0:	e9cd 3400 	strd	r3, r4, [sp]
 80050e4:	466f      	mov	r7, sp
 80050e6:	4630      	mov	r0, r6
 80050e8:	4639      	mov	r1, r7
 80050ea:	beab      	bkpt	0x00ab
 80050ec:	4606      	mov	r6, r0
 80050ee:	4630      	mov	r0, r6
 80050f0:	f7ff ffa8 	bl	8005044 <checkerror>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	dbe1      	blt.n	80050bc <_swilseek+0x16>
 80050f8:	606c      	str	r4, [r5, #4]
 80050fa:	e7e1      	b.n	80050c0 <_swilseek+0x1a>
 80050fc:	2e02      	cmp	r6, #2
 80050fe:	d1ed      	bne.n	80050dc <_swilseek+0x36>
 8005100:	6803      	ldr	r3, [r0, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	260c      	movs	r6, #12
 8005106:	466f      	mov	r7, sp
 8005108:	4630      	mov	r0, r6
 800510a:	4639      	mov	r1, r7
 800510c:	beab      	bkpt	0x00ab
 800510e:	4606      	mov	r6, r0
 8005110:	4630      	mov	r0, r6
 8005112:	f7ff ff97 	bl	8005044 <checkerror>
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	d0d0      	beq.n	80050bc <_swilseek+0x16>
 800511a:	4404      	add	r4, r0
 800511c:	e7de      	b.n	80050dc <_swilseek+0x36>

0800511e <_lseek>:
 800511e:	f7ff bfc2 	b.w	80050a6 <_swilseek>

08005122 <_swiwrite>:
 8005122:	b530      	push	{r4, r5, lr}
 8005124:	b085      	sub	sp, #20
 8005126:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800512a:	9203      	str	r2, [sp, #12]
 800512c:	2405      	movs	r4, #5
 800512e:	ad01      	add	r5, sp, #4
 8005130:	4620      	mov	r0, r4
 8005132:	4629      	mov	r1, r5
 8005134:	beab      	bkpt	0x00ab
 8005136:	4604      	mov	r4, r0
 8005138:	4620      	mov	r0, r4
 800513a:	f7ff ff83 	bl	8005044 <checkerror>
 800513e:	b005      	add	sp, #20
 8005140:	bd30      	pop	{r4, r5, pc}

08005142 <_write>:
 8005142:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005144:	4615      	mov	r5, r2
 8005146:	9101      	str	r1, [sp, #4]
 8005148:	f7ff ff54 	bl	8004ff4 <findslot>
 800514c:	9901      	ldr	r1, [sp, #4]
 800514e:	4604      	mov	r4, r0
 8005150:	b930      	cbnz	r0, 8005160 <_write+0x1e>
 8005152:	f7fe ff19 	bl	8003f88 <__errno>
 8005156:	2309      	movs	r3, #9
 8005158:	6003      	str	r3, [r0, #0]
 800515a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515e:	e012      	b.n	8005186 <_write+0x44>
 8005160:	6800      	ldr	r0, [r0, #0]
 8005162:	462a      	mov	r2, r5
 8005164:	f7ff ffdd 	bl	8005122 <_swiwrite>
 8005168:	2800      	cmp	r0, #0
 800516a:	dbf6      	blt.n	800515a <_write+0x18>
 800516c:	6862      	ldr	r2, [r4, #4]
 800516e:	1a2b      	subs	r3, r5, r0
 8005170:	441a      	add	r2, r3
 8005172:	42a8      	cmp	r0, r5
 8005174:	6062      	str	r2, [r4, #4]
 8005176:	d105      	bne.n	8005184 <_write+0x42>
 8005178:	2000      	movs	r0, #0
 800517a:	b003      	add	sp, #12
 800517c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005180:	f7ff bf52 	b.w	8005028 <error>
 8005184:	4618      	mov	r0, r3
 8005186:	b003      	add	sp, #12
 8005188:	bd30      	pop	{r4, r5, pc}

0800518a <_swiclose>:
 800518a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800518c:	2402      	movs	r4, #2
 800518e:	9001      	str	r0, [sp, #4]
 8005190:	ad01      	add	r5, sp, #4
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	beab      	bkpt	0x00ab
 8005198:	4604      	mov	r4, r0
 800519a:	4620      	mov	r0, r4
 800519c:	f7ff ff52 	bl	8005044 <checkerror>
 80051a0:	b003      	add	sp, #12
 80051a2:	bd30      	pop	{r4, r5, pc}

080051a4 <_close>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4605      	mov	r5, r0
 80051a8:	f7ff ff24 	bl	8004ff4 <findslot>
 80051ac:	4604      	mov	r4, r0
 80051ae:	b930      	cbnz	r0, 80051be <_close+0x1a>
 80051b0:	f7fe feea 	bl	8003f88 <__errno>
 80051b4:	2309      	movs	r3, #9
 80051b6:	6003      	str	r3, [r0, #0]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051bc:	bd38      	pop	{r3, r4, r5, pc}
 80051be:	3d01      	subs	r5, #1
 80051c0:	2d01      	cmp	r5, #1
 80051c2:	d809      	bhi.n	80051d8 <_close+0x34>
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <_close+0x48>)
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d104      	bne.n	80051d8 <_close+0x34>
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d2:	6003      	str	r3, [r0, #0]
 80051d4:	2000      	movs	r0, #0
 80051d6:	e7f1      	b.n	80051bc <_close+0x18>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	f7ff ffd6 	bl	800518a <_swiclose>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d1ec      	bne.n	80051bc <_close+0x18>
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	e7e8      	b.n	80051bc <_close+0x18>
 80051ea:	bf00      	nop
 80051ec:	20000178 	.word	0x20000178

080051f0 <_swistat>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	460c      	mov	r4, r1
 80051f4:	f7ff fefe 	bl	8004ff4 <findslot>
 80051f8:	4605      	mov	r5, r0
 80051fa:	b930      	cbnz	r0, 800520a <_swistat+0x1a>
 80051fc:	f7fe fec4 	bl	8003f88 <__errno>
 8005200:	2309      	movs	r3, #9
 8005202:	6003      	str	r3, [r0, #0]
 8005204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005210:	6063      	str	r3, [r4, #4]
 8005212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005216:	64a3      	str	r3, [r4, #72]	; 0x48
 8005218:	260c      	movs	r6, #12
 800521a:	4630      	mov	r0, r6
 800521c:	4629      	mov	r1, r5
 800521e:	beab      	bkpt	0x00ab
 8005220:	4605      	mov	r5, r0
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff ff0e 	bl	8005044 <checkerror>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	bf1c      	itt	ne
 800522c:	6120      	strne	r0, [r4, #16]
 800522e:	2000      	movne	r0, #0
 8005230:	e7ea      	b.n	8005208 <_swistat+0x18>

08005232 <_fstat>:
 8005232:	460b      	mov	r3, r1
 8005234:	b510      	push	{r4, lr}
 8005236:	2100      	movs	r1, #0
 8005238:	4604      	mov	r4, r0
 800523a:	2258      	movs	r2, #88	; 0x58
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fecd 	bl	8003fdc <memset>
 8005242:	4601      	mov	r1, r0
 8005244:	4620      	mov	r0, r4
 8005246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524a:	f7ff bfd1 	b.w	80051f0 <_swistat>

0800524e <_stat>:
 800524e:	b538      	push	{r3, r4, r5, lr}
 8005250:	460d      	mov	r5, r1
 8005252:	4604      	mov	r4, r0
 8005254:	2258      	movs	r2, #88	; 0x58
 8005256:	2100      	movs	r1, #0
 8005258:	4628      	mov	r0, r5
 800525a:	f7fe febf 	bl	8003fdc <memset>
 800525e:	4620      	mov	r0, r4
 8005260:	2100      	movs	r1, #0
 8005262:	f000 f811 	bl	8005288 <_swiopen>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	4604      	mov	r4, r0
 800526a:	d00b      	beq.n	8005284 <_stat+0x36>
 800526c:	686b      	ldr	r3, [r5, #4]
 800526e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005272:	606b      	str	r3, [r5, #4]
 8005274:	4629      	mov	r1, r5
 8005276:	f7ff ffbb 	bl	80051f0 <_swistat>
 800527a:	4605      	mov	r5, r0
 800527c:	4620      	mov	r0, r4
 800527e:	f7ff ff91 	bl	80051a4 <_close>
 8005282:	462c      	mov	r4, r5
 8005284:	4620      	mov	r0, r4
 8005286:	bd38      	pop	{r3, r4, r5, pc}

08005288 <_swiopen>:
 8005288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800528c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005338 <_swiopen+0xb0>
 8005290:	b097      	sub	sp, #92	; 0x5c
 8005292:	4607      	mov	r7, r0
 8005294:	460e      	mov	r6, r1
 8005296:	2500      	movs	r5, #0
 8005298:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800529c:	1c61      	adds	r1, r4, #1
 800529e:	d037      	beq.n	8005310 <_swiopen+0x88>
 80052a0:	3501      	adds	r5, #1
 80052a2:	2d14      	cmp	r5, #20
 80052a4:	d1f8      	bne.n	8005298 <_swiopen+0x10>
 80052a6:	f7fe fe6f 	bl	8003f88 <__errno>
 80052aa:	2318      	movs	r3, #24
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052b2:	e03d      	b.n	8005330 <_swiopen+0xa8>
 80052b4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80052b8:	f240 6301 	movw	r3, #1537	; 0x601
 80052bc:	07b2      	lsls	r2, r6, #30
 80052be:	bf48      	it	mi
 80052c0:	f044 0402 	orrmi.w	r4, r4, #2
 80052c4:	421e      	tst	r6, r3
 80052c6:	bf18      	it	ne
 80052c8:	f044 0404 	orrne.w	r4, r4, #4
 80052cc:	0733      	lsls	r3, r6, #28
 80052ce:	bf48      	it	mi
 80052d0:	f024 0404 	bicmi.w	r4, r4, #4
 80052d4:	4638      	mov	r0, r7
 80052d6:	bf48      	it	mi
 80052d8:	f044 0408 	orrmi.w	r4, r4, #8
 80052dc:	9700      	str	r7, [sp, #0]
 80052de:	f7fa ffc7 	bl	8000270 <strlen>
 80052e2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80052e6:	2401      	movs	r4, #1
 80052e8:	4620      	mov	r0, r4
 80052ea:	4649      	mov	r1, r9
 80052ec:	beab      	bkpt	0x00ab
 80052ee:	4604      	mov	r4, r0
 80052f0:	2c00      	cmp	r4, #0
 80052f2:	db08      	blt.n	8005306 <_swiopen+0x7e>
 80052f4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80052f8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80052fc:	2300      	movs	r3, #0
 80052fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8005302:	462c      	mov	r4, r5
 8005304:	e014      	b.n	8005330 <_swiopen+0xa8>
 8005306:	4620      	mov	r0, r4
 8005308:	f7ff fe8e 	bl	8005028 <error>
 800530c:	4604      	mov	r4, r0
 800530e:	e00f      	b.n	8005330 <_swiopen+0xa8>
 8005310:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005314:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005318:	46e9      	mov	r9, sp
 800531a:	d1cb      	bne.n	80052b4 <_swiopen+0x2c>
 800531c:	4649      	mov	r1, r9
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff ff95 	bl	800524e <_stat>
 8005324:	3001      	adds	r0, #1
 8005326:	d0c5      	beq.n	80052b4 <_swiopen+0x2c>
 8005328:	f7fe fe2e 	bl	8003f88 <__errno>
 800532c:	2311      	movs	r3, #17
 800532e:	6003      	str	r3, [r0, #0]
 8005330:	4620      	mov	r0, r4
 8005332:	b017      	add	sp, #92	; 0x5c
 8005334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005338:	20000178 	.word	0x20000178

0800533c <_get_semihosting_exts>:
 800533c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	482a      	ldr	r0, [pc, #168]	; (80053f0 <_get_semihosting_exts+0xb4>)
 8005346:	2100      	movs	r1, #0
 8005348:	4615      	mov	r5, r2
 800534a:	f7ff ff9d 	bl	8005288 <_swiopen>
 800534e:	462a      	mov	r2, r5
 8005350:	4604      	mov	r4, r0
 8005352:	2100      	movs	r1, #0
 8005354:	4630      	mov	r0, r6
 8005356:	f7fe fe41 	bl	8003fdc <memset>
 800535a:	1c63      	adds	r3, r4, #1
 800535c:	d016      	beq.n	800538c <_get_semihosting_exts+0x50>
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff fe48 	bl	8004ff4 <findslot>
 8005364:	f04f 090c 	mov.w	r9, #12
 8005368:	4680      	mov	r8, r0
 800536a:	4648      	mov	r0, r9
 800536c:	4641      	mov	r1, r8
 800536e:	beab      	bkpt	0x00ab
 8005370:	4680      	mov	r8, r0
 8005372:	4640      	mov	r0, r8
 8005374:	f7ff fe66 	bl	8005044 <checkerror>
 8005378:	2803      	cmp	r0, #3
 800537a:	dd02      	ble.n	8005382 <_get_semihosting_exts+0x46>
 800537c:	1ec3      	subs	r3, r0, #3
 800537e:	42ab      	cmp	r3, r5
 8005380:	dc08      	bgt.n	8005394 <_get_semihosting_exts+0x58>
 8005382:	4620      	mov	r0, r4
 8005384:	f7ff ff0e 	bl	80051a4 <_close>
 8005388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800538c:	4620      	mov	r0, r4
 800538e:	b003      	add	sp, #12
 8005390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005394:	2204      	movs	r2, #4
 8005396:	eb0d 0102 	add.w	r1, sp, r2
 800539a:	4620      	mov	r0, r4
 800539c:	f7ff fe67 	bl	800506e <_read>
 80053a0:	2803      	cmp	r0, #3
 80053a2:	ddee      	ble.n	8005382 <_get_semihosting_exts+0x46>
 80053a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053a8:	2b53      	cmp	r3, #83	; 0x53
 80053aa:	d1ea      	bne.n	8005382 <_get_semihosting_exts+0x46>
 80053ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80053b0:	2b48      	cmp	r3, #72	; 0x48
 80053b2:	d1e6      	bne.n	8005382 <_get_semihosting_exts+0x46>
 80053b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80053b8:	2b46      	cmp	r3, #70	; 0x46
 80053ba:	d1e2      	bne.n	8005382 <_get_semihosting_exts+0x46>
 80053bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053c0:	2b42      	cmp	r3, #66	; 0x42
 80053c2:	d1de      	bne.n	8005382 <_get_semihosting_exts+0x46>
 80053c4:	2201      	movs	r2, #1
 80053c6:	4639      	mov	r1, r7
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7ff fe6c 	bl	80050a6 <_swilseek>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	dbd7      	blt.n	8005382 <_get_semihosting_exts+0x46>
 80053d2:	462a      	mov	r2, r5
 80053d4:	4631      	mov	r1, r6
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff fe49 	bl	800506e <_read>
 80053dc:	4605      	mov	r5, r0
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff fee0 	bl	80051a4 <_close>
 80053e4:	4628      	mov	r0, r5
 80053e6:	f7ff fe2d 	bl	8005044 <checkerror>
 80053ea:	4604      	mov	r4, r0
 80053ec:	e7ce      	b.n	800538c <_get_semihosting_exts+0x50>
 80053ee:	bf00      	nop
 80053f0:	08005663 	.word	0x08005663

080053f4 <initialise_semihosting_exts>:
 80053f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053f6:	4d0a      	ldr	r5, [pc, #40]	; (8005420 <initialise_semihosting_exts+0x2c>)
 80053f8:	4c0a      	ldr	r4, [pc, #40]	; (8005424 <initialise_semihosting_exts+0x30>)
 80053fa:	2100      	movs	r1, #0
 80053fc:	2201      	movs	r2, #1
 80053fe:	a801      	add	r0, sp, #4
 8005400:	6029      	str	r1, [r5, #0]
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	f7ff ff9a 	bl	800533c <_get_semihosting_exts>
 8005408:	2800      	cmp	r0, #0
 800540a:	dd07      	ble.n	800541c <initialise_semihosting_exts+0x28>
 800540c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005410:	f003 0201 	and.w	r2, r3, #1
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	b003      	add	sp, #12
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	200000a4 	.word	0x200000a4
 8005424:	200000a8 	.word	0x200000a8

08005428 <_has_ext_stdout_stderr>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4c04      	ldr	r4, [pc, #16]	; (800543c <_has_ext_stdout_stderr+0x14>)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	da01      	bge.n	8005436 <_has_ext_stdout_stderr+0xe>
 8005432:	f7ff ffdf 	bl	80053f4 <initialise_semihosting_exts>
 8005436:	6820      	ldr	r0, [r4, #0]
 8005438:	bd10      	pop	{r4, pc}
 800543a:	bf00      	nop
 800543c:	200000a8 	.word	0x200000a8

08005440 <initialise_monitor_handles>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	b085      	sub	sp, #20
 8005446:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80054f8 <initialise_monitor_handles+0xb8>
 800544a:	f8cd 9004 	str.w	r9, [sp, #4]
 800544e:	2303      	movs	r3, #3
 8005450:	2400      	movs	r4, #0
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	af01      	add	r7, sp, #4
 8005456:	9402      	str	r4, [sp, #8]
 8005458:	2501      	movs	r5, #1
 800545a:	4628      	mov	r0, r5
 800545c:	4639      	mov	r1, r7
 800545e:	beab      	bkpt	0x00ab
 8005460:	4605      	mov	r5, r0
 8005462:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80054fc <initialise_monitor_handles+0xbc>
 8005466:	4623      	mov	r3, r4
 8005468:	4c20      	ldr	r4, [pc, #128]	; (80054ec <initialise_monitor_handles+0xac>)
 800546a:	f8c8 5000 	str.w	r5, [r8]
 800546e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005472:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005476:	3301      	adds	r3, #1
 8005478:	2b14      	cmp	r3, #20
 800547a:	d1fa      	bne.n	8005472 <initialise_monitor_handles+0x32>
 800547c:	f7ff ffd4 	bl	8005428 <_has_ext_stdout_stderr>
 8005480:	4d1b      	ldr	r5, [pc, #108]	; (80054f0 <initialise_monitor_handles+0xb0>)
 8005482:	b1d0      	cbz	r0, 80054ba <initialise_monitor_handles+0x7a>
 8005484:	f04f 0a03 	mov.w	sl, #3
 8005488:	2304      	movs	r3, #4
 800548a:	f8cd 9004 	str.w	r9, [sp, #4]
 800548e:	2601      	movs	r6, #1
 8005490:	f8cd a00c 	str.w	sl, [sp, #12]
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	beab      	bkpt	0x00ab
 800549c:	4683      	mov	fp, r0
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <initialise_monitor_handles+0xb4>)
 80054a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80054a4:	f8c3 b000 	str.w	fp, [r3]
 80054a8:	2308      	movs	r3, #8
 80054aa:	f8cd a00c 	str.w	sl, [sp, #12]
 80054ae:	9302      	str	r3, [sp, #8]
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	beab      	bkpt	0x00ab
 80054b6:	4606      	mov	r6, r0
 80054b8:	602e      	str	r6, [r5, #0]
 80054ba:	682b      	ldr	r3, [r5, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	bf02      	ittt	eq
 80054c0:	4b0c      	ldreq	r3, [pc, #48]	; (80054f4 <initialise_monitor_handles+0xb4>)
 80054c2:	681b      	ldreq	r3, [r3, #0]
 80054c4:	602b      	streq	r3, [r5, #0]
 80054c6:	2600      	movs	r6, #0
 80054c8:	f8d8 3000 	ldr.w	r3, [r8]
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	6066      	str	r6, [r4, #4]
 80054d0:	f7ff ffaa 	bl	8005428 <_has_ext_stdout_stderr>
 80054d4:	b130      	cbz	r0, 80054e4 <initialise_monitor_handles+0xa4>
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <initialise_monitor_handles+0xb4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80054e4:	b005      	add	sp, #20
 80054e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ea:	bf00      	nop
 80054ec:	20000178 	.word	0x20000178
 80054f0:	2000016c 	.word	0x2000016c
 80054f4:	20000174 	.word	0x20000174
 80054f8:	08005679 	.word	0x08005679
 80054fc:	20000170 	.word	0x20000170

08005500 <_isatty>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	f7ff fd77 	bl	8004ff4 <findslot>
 8005506:	2509      	movs	r5, #9
 8005508:	4604      	mov	r4, r0
 800550a:	b920      	cbnz	r0, 8005516 <_isatty+0x16>
 800550c:	f7fe fd3c 	bl	8003f88 <__errno>
 8005510:	6005      	str	r5, [r0, #0]
 8005512:	4620      	mov	r0, r4
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	4628      	mov	r0, r5
 8005518:	4621      	mov	r1, r4
 800551a:	beab      	bkpt	0x00ab
 800551c:	4604      	mov	r4, r0
 800551e:	2c01      	cmp	r4, #1
 8005520:	d0f7      	beq.n	8005512 <_isatty+0x12>
 8005522:	f7fe fd31 	bl	8003f88 <__errno>
 8005526:	2400      	movs	r4, #0
 8005528:	4605      	mov	r5, r0
 800552a:	2613      	movs	r6, #19
 800552c:	4630      	mov	r0, r6
 800552e:	4621      	mov	r1, r4
 8005530:	beab      	bkpt	0x00ab
 8005532:	4606      	mov	r6, r0
 8005534:	602e      	str	r6, [r5, #0]
 8005536:	e7ec      	b.n	8005512 <_isatty+0x12>

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
