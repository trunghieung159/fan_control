
fan_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d4  080053d4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080053dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000007c  08005458  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08005458  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca98  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6f  00000000  00000000  0002cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262d6  00000000  00000000  0002fe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2cd  00000000  00000000  00056146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80db  00000000  00000000  00063413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b4ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  0014b540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005270 	.word	0x08005270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005270 	.word	0x08005270

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
  * @retval int
  */


int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000588:	f004 fdf6 	bl	8005178 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc07 	bl	8000d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f810 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f884 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f852 	bl	8000640 <MX_USART1_UART_Init>

  /* USER CODE END WHILE */
  
  /* USER CODE BEGIN 3 */

  test_message_handler(receiveBuffer, sendBuffer);
 800059c:	4903      	ldr	r1, [pc, #12]	; (80005ac <main+0x28>)
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x2c>)
 80005a0:	f000 fb82 	bl	8000ca8 <test_message_handler>
 80005a4:	2300      	movs	r3, #0
//  ctrl_mode(1);
//  handle_message(receiveBuffer, sendBuffer);
//  set_wind(0);
//  print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
  /* USER CODE END 3 */
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000124 	.word	0x20000124
 80005b0:	2000011c 	.word	0x2000011c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fb48 	bl	8003c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005da:	f000 ff9d 	bl	8001518 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f874 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005e8:	2310      	movs	r3, #16
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ffdf 	bl	80015c4 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800060c:	f000 f860 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fba7 	bl	8001d7c <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000634:	f000 f84c 	bl	80006d0 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3758      	adds	r7, #88	; 0x58
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART1_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000684:	f002 fa5a 	bl	8002b3c <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f81f 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000098 	.word	0x20000098
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x2c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x2c>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x2c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <handle_message>:
 */

#include "message_handler.h"


uint8_t handle_message(unsigned char* received_buf, unsigned char* sent_buf){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	 * @param write_buf sending message's buffer
	 * @return 0 if don't send the reply
	 * return the length of reply message buff otherwise
	 */
	uint8_t sent_buf_length;
	uint8_t* stx = received_buf;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	623b      	str	r3, [r7, #32]
	if(*stx != 0x02){
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d003      	beq.n	80006fa <handle_message+0x1e>
		sent_buf_length = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 80006f8:	e072      	b.n	80007e0 <handle_message+0x104>
	}

	uint8_t* received_frame_type  = received_buf + 1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buf + 1;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buf + 2;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	3302      	adds	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
	
	*sent_buf = 0x02;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2202      	movs	r2, #2
 8000710:	701a      	strb	r2, [r3, #0]
	switch(*received_frame_type){
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	2b03      	cmp	r3, #3
 800071a:	d837      	bhi.n	800078c <handle_message+0xb0>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <handle_message+0x48>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800074b 	.word	0x0800074b
 800072c:	08000761 	.word	0x08000761
 8000730:	08000777 	.word	0x08000777
		case 0x01:
			process_power_message(received_buf, sent_buf);
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f858 	bl	80007ec <process_power_message>
			sent_data_length = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000748:	e024      	b.n	8000794 <handle_message+0xb8>
		case 0x02:
			process_control_mode_message(received_buf, sent_buf);
 800074a:	6839      	ldr	r1, [r7, #0]
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f87f 	bl	8000850 <process_control_mode_message>
			sent_data_length = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 800075e:	e019      	b.n	8000794 <handle_message+0xb8>
		case 0x03:
			process_wind_mode_message(received_buf, sent_buf);
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f8a0 	bl	80008a8 <process_wind_mode_message>
			sent_data_length = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000774:	e00e      	b.n	8000794 <handle_message+0xb8>
		case 0x04:
			sent_data_length = process_states_request_message(received_buf, sent_buf);
 8000776:	6839      	ldr	r1, [r7, #0]
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f8c5 	bl	8000908 <process_states_request_message>
 800077e:	4603      	mov	r3, r0
 8000780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 0; 
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 800078a:	e003      	b.n	8000794 <handle_message+0xb8>
		default:
			sent_buf_length = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto terminate;
 8000792:	e025      	b.n	80007e0 <handle_message+0x104>
	}
	*sent_frame_type = *received_frame_type + 0x80;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b80      	subs	r3, #128	; 0x80
 800079a:	b2da      	uxtb	r2, r3
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007a6:	701a      	strb	r2, [r3, #0]

	uint8_t* received_ETX = received_buf + 3 + received_data_length;
 80007a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007ac:	3303      	adds	r3, #3
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d003      	beq.n	80007c4 <handle_message+0xe8>
		sent_buf_length = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 80007c2:	e00d      	b.n	80007e0 <handle_message+0x104>
	}


	uint8_t* sent_ETX = sent_buf + 3 + sent_data_length; 
 80007c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007c8:	3303      	adds	r3, #3
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2203      	movs	r2, #3
 80007d4:	701a      	strb	r2, [r3, #0]
	sent_buf_length = sent_data_length + 4;
 80007d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007da:	3304      	adds	r3, #4
 80007dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	terminate: return sent_buf_length;
 80007e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <process_power_message>:



void process_power_message(unsigned char* received_buf, unsigned char* sent_buf){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	 * @param received_buf power message's buffer
	 * @param sent_buf reply message's buffer 
	 * return message data length otherwise
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 80007f6:	2101      	movs	r1, #1
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f8a4 	bl	8000946 <check_message_data_length>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01f      	beq.n	8000844 <process_power_message+0x58>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3303      	adds	r3, #3
 8000808:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	3303      	adds	r3, #3
 800080e:	60bb      	str	r3, [r7, #8]
	if(*received_data == 0x00){
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d106      	bne.n	8000826 <process_power_message+0x3a>
		power = OFF;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <process_power_message+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e00f      	b.n	8000846 <process_power_message+0x5a>
	}
	else if(*received_data == 0x01){
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d106      	bne.n	800083c <process_power_message+0x50>
		power = ON;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <process_power_message+0x60>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e004      	b.n	8000846 <process_power_message+0x5a>
	}
	else{
		*sent_data = 0xFF;
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	22ff      	movs	r2, #255	; 0xff
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e000      	b.n	8000846 <process_power_message+0x5a>
		return;
 8000844:	bf00      	nop
	}
}
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000012d 	.word	0x2000012d

08000850 <process_control_mode_message>:

void process_control_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	 * @brief read mode control message from received_buf and replies in sent_buf 
	 * @param received_buf mode control message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 800085a:	2101      	movs	r1, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f872 	bl	8000946 <check_message_data_length>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d019      	beq.n	800089c <process_control_mode_message+0x4c>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3303      	adds	r3, #3
 800086c:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	3303      	adds	r3, #3
 8000872:	60bb      	str	r3, [r7, #8]
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <process_control_mode_message+0x34>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d107      	bne.n	8000894 <process_control_mode_message+0x44>
		control_mode = *received_data;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <process_control_mode_message+0x54>)
 800088a:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e004      	b.n	800089e <process_control_mode_message+0x4e>
	}
	else{
		*sent_data = 0xFF;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e000      	b.n	800089e <process_control_mode_message+0x4e>
		return;
 800089c:	bf00      	nop
	}
}
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000012e 	.word	0x2000012e

080008a8 <process_wind_mode_message>:

void process_wind_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	 * @brief read win mode message from received_buf and replies in sent_buf 
	 * @param received_buf win mode message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 80008b2:	2101      	movs	r1, #1
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f846 	bl	8000946 <check_message_data_length>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d01d      	beq.n	80008fc <process_wind_mode_message+0x54>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3303      	adds	r3, #3
 80008c4:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	3303      	adds	r3, #3
 80008ca:	60bb      	str	r3, [r7, #8]
	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d007      	beq.n	80008e4 <process_wind_mode_message+0x3c>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d003      	beq.n	80008e4 <process_wind_mode_message+0x3c>
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d107      	bne.n	80008f4 <process_wind_mode_message+0x4c>
		wind_mode = *received_data;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <process_wind_mode_message+0x5c>)
 80008ea:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e004      	b.n	80008fe <process_wind_mode_message+0x56>
	}
	else{
		*sent_data = 0xFF;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	22ff      	movs	r2, #255	; 0xff
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e000      	b.n	80008fe <process_wind_mode_message+0x56>
		return;
 80008fc:	bf00      	nop
	}
}
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000

08000908 <process_states_request_message>:

uint8_t process_states_request_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	 * @brief read states request message from received_buf and replies in sent_buf 
	 * @param received_buf sates request message's buffer
	 * @param sent_buf reply message's buffer 
	 * @return sent message's data length
	*/
	uint8_t* sent_data = sent_buf + 3;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	3303      	adds	r3, #3
 8000916:	60bb      	str	r3, [r7, #8]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buf, 0)){
 8000918:	2100      	movs	r1, #0
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f813 	bl	8000946 <check_message_data_length>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d105      	bne.n	8000932 <process_states_request_message+0x2a>
		sent_data_length = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
		*sent_data = 0x00;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e004      	b.n	800093c <process_states_request_message+0x34>
	}
	else{
		sent_data_length = 5;
 8000932:	2305      	movs	r3, #5
 8000934:	73fb      	strb	r3, [r7, #15]
		*sent_data = 0xFF;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	701a      	strb	r2, [r3, #0]
	}
	return sent_data_length;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buf, uint8_t expected_value){
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
	/**
	* @brief check whether the length message is correct or not 
	* @return 1 if it is correct 
	* return  0 other wise  
	*/
	uint8_t* length = received_buf + 2;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3302      	adds	r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
	if(*length == expected_value){
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	78fa      	ldrb	r2, [r7, #3]
 800095e:	429a      	cmp	r2, r3
 8000960:	d101      	bne.n	8000966 <check_message_data_length+0x20>
		return 1;
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <check_message_data_length+0x22>
	}
	else{
		return 0;
 8000966:	2300      	movs	r3, #0
	}
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0ac      	sub	sp, #176	; 0xb0
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2288      	movs	r2, #136	; 0x88
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 f93b 	bl	8003c58 <memset>
  if(huart->Instance==USART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <HAL_UART_MspInit+0xc0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d142      	bne.n	8000a72 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fbe3 	bl	80021c4 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff fe64 	bl	80006d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6613      	str	r3, [r2, #96]	; 0x60
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a38:	23c0      	movs	r3, #192	; 0xc0
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a50:	2307      	movs	r3, #7
 8000a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 8000a5e:	f000 fba3 	bl	80011a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2102      	movs	r1, #2
 8000a66:	2025      	movs	r0, #37	; 0x25
 8000a68:	f000 fae9 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a6c:	2025      	movs	r0, #37	; 0x25
 8000a6e:	f000 fb02 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	37b0      	adds	r7, #176	; 0xb0
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 f9b8 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART1_IRQHandler+0x10>)
 8000ae2:	f002 f879 	bl	8002bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000098 	.word	0x20000098

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f003 f870 	bl	8003c04 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20018000 	.word	0x20018000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	20000130 	.word	0x20000130
 8000b58:	200001f8 	.word	0x200001f8

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <turn>:
 *  Created on: Jul 24, 2023
 *      Author: nguyentrunghieu
 */

#include "message_handler.h"
void turn(unsigned char* receiveBuffer, uint8_t pow){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief write power message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x01;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3301      	adds	r3, #1
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x01;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
	if(pow == 0){
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d104      	bne.n	8000bb2 <turn+0x32>
		receiveBuffer[3] = 0x00;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3303      	adds	r3, #3
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e003      	b.n	8000bba <turn+0x3a>
	}
	else{
		receiveBuffer[3] = 0x01;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3303      	adds	r3, #3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	}
	receiveBuffer[4] = 0x03;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	701a      	strb	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <ctrl_mode>:

void ctrl_mode(unsigned char* receiveBuffer, uint8_t ctrl_mode){
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief write mode control message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x02;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	2202      	movs	r2, #2
 8000be6:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x01;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3302      	adds	r3, #2
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
	if(ctrl_mode == 0){
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d104      	bne.n	8000c00 <ctrl_mode+0x32>
		receiveBuffer[3] = 0x00;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3303      	adds	r3, #3
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e003      	b.n	8000c08 <ctrl_mode+0x3a>
	}
	else{
		receiveBuffer[3] = 0x01;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3303      	adds	r3, #3
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
	}
	receiveBuffer[4] = 0x03;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <set_wind>:

void set_wind(unsigned char* receiveBuffer, uint8_t wind_mode){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief write wind mode message to buffer
	*/
	receiveBuffer[0] = 0x02;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	701a      	strb	r2, [r3, #0]
	receiveBuffer[1] = 0x03;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3301      	adds	r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]
	receiveBuffer[2] = 0x01;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
	receiveBuffer[3] = wind_mode;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3303      	adds	r3, #3
 8000c42:	78fa      	ldrb	r2, [r7, #3]
 8000c44:	701a      	strb	r2, [r3, #0]
	receiveBuffer[4] = 0x03;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <print_mess>:
	receiveBuffer[1] = 0x04;
	receiveBuffer[2] = 0x00;
	receiveBuffer[3] = 0x03;
}

void print_mess(unsigned char* rep_mess_buff, uint8_t length){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	/**
	 * @brief print value of message's buffer
	*/
  printf("Actual: ");
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <print_mess+0x44>)
 8000c6a:	f002 fffd 	bl	8003c68 <iprintf>
  for (uint8_t i =0; i<length; i++ ){
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e00a      	b.n	8000c8a <print_mess+0x2e>
    printf("%x", *(rep_mess_buff+i));
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <print_mess+0x48>)
 8000c80:	f002 fff2 	bl	8003c68 <iprintf>
  for (uint8_t i =0; i<length; i++ ){
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	3301      	adds	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3f0      	bcc.n	8000c74 <print_mess+0x18>
  }
  printf("\n");
 8000c92:	200a      	movs	r0, #10
 8000c94:	f003 f800 	bl	8003c98 <putchar>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08005288 	.word	0x08005288
 8000ca4:	08005294 	.word	0x08005294

08000ca8 <test_message_handler>:

void test_message_handler(unsigned char* receiveBuffer, unsigned char* sendBuffer){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	 * @brief test message_handler() function
	 */


	// Test case 1:
	turn(receiveBuffer, 1);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff63 	bl	8000b80 <turn>
	handle_message(receiveBuffer, sendBuffer);
 8000cba:	6839      	ldr	r1, [r7, #0]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fd0d 	bl	80006dc <handle_message>
	ctrl_mode(receiveBuffer ,1);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff82 	bl	8000bce <ctrl_mode>
	handle_message(receiveBuffer, sendBuffer);
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fd05 	bl	80006dc <handle_message>
	set_wind(receiveBuffer, 2);
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffa1 	bl	8000c1c <set_wind>
	handle_message(receiveBuffer, sendBuffer);
 8000cda:	6839      	ldr	r1, [r7, #0]
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fcfd 	bl	80006dc <handle_message>
	printf("Expected: 02 83 01 02 03\n");
 8000ce2:	4818      	ldr	r0, [pc, #96]	; (8000d44 <test_message_handler+0x9c>)
 8000ce4:	f003 f85c 	bl	8003da0 <puts>
	print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
 8000ce8:	6839      	ldr	r1, [r7, #0]
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fcf6 	bl	80006dc <handle_message>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f7ff ffb1 	bl	8000c5c <print_mess>



	// Test case 2:
	turn(receiveBuffer, 1);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff3f 	bl	8000b80 <turn>
	handle_message(receiveBuffer, sendBuffer);
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fce9 	bl	80006dc <handle_message>
	ctrl_mode(receiveBuffer ,0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff5e 	bl	8000bce <ctrl_mode>
	handle_message(receiveBuffer, sendBuffer);
 8000d12:	6839      	ldr	r1, [r7, #0]
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fce1 	bl	80006dc <handle_message>
	set_wind(receiveBuffer, 1);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff7d 	bl	8000c1c <set_wind>
	printf("Expected: 02 83 01 01 03\n");
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <test_message_handler+0xa0>)
 8000d24:	f003 f83c 	bl	8003da0 <puts>
	print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fcd6 	bl	80006dc <handle_message>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4619      	mov	r1, r3
 8000d34:	6838      	ldr	r0, [r7, #0]
 8000d36:	f7ff ff91 	bl	8000c5c <print_mess>



}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08005298 	.word	0x08005298
 8000d48:	080052b4 	.word	0x080052b4

08000d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff ff04 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f002 ff49 	bl	8003c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7e:	f7ff fc01 	bl	8000584 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d90:	080053dc 	.word	0x080053dc
  ldr r2, =_sbss
 8000d94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d98:	200001f4 	.word	0x200001f4

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>

08000d9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f93d 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f80e 	bl	8000dd0 <HAL_InitTick>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	e001      	b.n	8000dc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc0:	f7ff fdd8 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_InitTick+0x6c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d023      	beq.n	8000e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_InitTick+0x70>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_InitTick+0x6c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f949 	bl	8001092 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10f      	bne.n	8000e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d809      	bhi.n	8000e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e14:	f000 f913 	bl	800103e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_InitTick+0x74>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e007      	b.n	8000e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e004      	b.n	8000e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	e001      	b.n	8000e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000000c 	.word	0x2000000c
 8000e40:	20000004 	.word	0x20000004
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000134 	.word	0x20000134

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000134 	.word	0x20000134

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d008      	beq.n	80010d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e022      	b.n	800111a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 020e 	bic.w	r2, r2, #14
 80010e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	f003 021c 	and.w	r2, r3, #28
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d005      	beq.n	800114a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2204      	movs	r2, #4
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e029      	b.n	800119e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 020e 	bic.w	r2, r2, #14
 8001158:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 021c 	and.w	r2, r3, #28
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return status;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	e17f      	b.n	80014b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8171 	beq.w	80014b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d005      	beq.n	80011e8 <HAL_GPIO_Init+0x40>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d130      	bne.n	800124a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121e:	2201      	movs	r2, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	f003 0201 	and.w	r2, r3, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b03      	cmp	r3, #3
 8001254:	d118      	bne.n	8001288 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	6939      	ldr	r1, [r7, #16]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80ac 	beq.w	80014b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HAL_GPIO_Init+0x330>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_GPIO_Init+0x330>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <HAL_GPIO_Init+0x330>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001372:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_GPIO_Init+0x334>)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x242>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x338>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x23e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4e      	ldr	r2, [pc, #312]	; (80014e4 <HAL_GPIO_Init+0x33c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x23a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4d      	ldr	r2, [pc, #308]	; (80014e8 <HAL_GPIO_Init+0x340>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x236>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_GPIO_Init+0x344>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x232>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <HAL_GPIO_Init+0x348>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x22e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <HAL_GPIO_Init+0x34c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x22a>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e00c      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x244>
 80013ea:	2300      	movs	r3, #0
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013fc:	4937      	ldr	r1, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x334>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800140a:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <HAL_GPIO_Init+0x350>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800142e:	4a32      	ldr	r2, [pc, #200]	; (80014f8 <HAL_GPIO_Init+0x350>)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_GPIO_Init+0x350>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <HAL_GPIO_Init+0x350>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_GPIO_Init+0x350>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001482:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <HAL_GPIO_Init+0x350>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_GPIO_Init+0x350>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <HAL_GPIO_Init+0x350>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f47f ae78 	bne.w	80011b8 <HAL_GPIO_Init+0x10>
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48000800 	.word	0x48000800
 80014e8:	48000c00 	.word	0x48000c00
 80014ec:	48001000 	.word	0x48001000
 80014f0:	48001400 	.word	0x48001400
 80014f4:	48001800 	.word	0x48001800
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_PWREx_GetVoltageRange+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000

08001518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001526:	d130      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	d038      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2232      	movs	r2, #50	; 0x32
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	e002      	b.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d102      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f2      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d110      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e00f      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d007      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40007000 	.word	0x40007000
 80015bc:	20000004 	.word	0x20000004
 80015c0:	431bde83 	.word	0x431bde83

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e3ca      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d6:	4b97      	ldr	r3, [pc, #604]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e0:	4b94      	ldr	r3, [pc, #592]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80e4 	beq.w	80017c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0x4a>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	f040 808b 	bne.w	800171c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 8087 	bne.w	800171c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160e:	4b89      	ldr	r3, [pc, #548]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x62>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e3a2      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1a      	ldr	r2, [r3, #32]
 800162a:	4b82      	ldr	r3, [pc, #520]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <HAL_RCC_OscConfig+0x7c>
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163e:	e005      	b.n	800164c <HAL_RCC_OscConfig+0x88>
 8001640:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164c:	4293      	cmp	r3, r2
 800164e:	d223      	bcs.n	8001698 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fd55 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e383      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001664:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	496d      	ldr	r1, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001682:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4968      	ldr	r1, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
 8001696:	e025      	b.n	80016e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001698:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4960      	ldr	r1, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	495b      	ldr	r1, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fd15 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e343      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e4:	f000 fc4a 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b52      	ldr	r3, [pc, #328]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	4950      	ldr	r1, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x278>)
 8001702:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb61 	bl	8000dd0 <HAL_InitTick>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d052      	beq.n	80017be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	e327      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d032      	beq.n	800178a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a42      	ldr	r2, [pc, #264]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001730:	f7ff fb9e 	bl	8000e70 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001738:	f7ff fb9a 	bl	8000e70 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e310      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a36      	ldr	r2, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4931      	ldr	r1, [pc, #196]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	492c      	ldr	r1, [pc, #176]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	e01a      	b.n	80017c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001796:	f7ff fb6b 	bl	8000e70 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179e:	f7ff fb67 	bl	8000e70 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e2dd      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x1da>
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d074      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x21a>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d10e      	bne.n	80017f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d10b      	bne.n	80017f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d064      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d160      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e2ba      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x24a>
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e026      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001816:	d115      	bne.n	8001844 <HAL_RCC_OscConfig+0x280>
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800181e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a02      	ldr	r2, [pc, #8]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	080052d0 	.word	0x080052d0
 800183c:	20000004 	.word	0x20000004
 8001840:	20000008 	.word	0x20000008
 8001844:	4ba0      	ldr	r3, [pc, #640]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9f      	ldr	r2, [pc, #636]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a9c      	ldr	r2, [pc, #624]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fb04 	bl	8000e70 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fb00 	bl	8000e70 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e276      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x2a8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff faf0 	bl	8000e70 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff faec 	bl	8000e70 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e262      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x2d0>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d060      	beq.n	8001984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_OscConfig+0x310>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d116      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x328>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e23f      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	4973      	ldr	r1, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	e040      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d023      	beq.n	8001952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff faab 	bl	8000e70 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff faa7 	bl	8000e70 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e21d      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	495f      	ldr	r1, [pc, #380]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5c      	ldr	r2, [pc, #368]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff fa87 	bl	8000e70 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fa83 	bl	8000e70 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1f9      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fa62 	bl	8000e70 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fa5e 	bl	8000e70 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1d4      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
 80019d0:	e01b      	b.n	8001a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fa45 	bl	8000e70 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fa41 	bl	8000e70 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1b7      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ef      	bne.n	80019ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80a6 	beq.w	8001b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d118      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa08 	bl	8000e70 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7ff fa04 	bl	8000e70 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e17a      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4d8>
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9a:	e029      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d115      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x50c>
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	4b9c      	ldr	r3, [pc, #624]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a9b      	ldr	r2, [pc, #620]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	4b98      	ldr	r3, [pc, #608]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a97      	ldr	r2, [pc, #604]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d016      	beq.n	8001b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f9ba 	bl	8000e70 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f9b6 	bl	8000e70 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e12a      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ed      	beq.n	8001b00 <HAL_RCC_OscConfig+0x53c>
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f9a3 	bl	8000e70 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f99f 	bl	8000e70 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e113      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b44:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ed      	bne.n	8001b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a79      	ldr	r2, [pc, #484]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80fe 	beq.w	8001d6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	f040 80d0 	bne.w	8001d18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b78:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d130      	bne.n	8001bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	3b01      	subs	r3, #1
 8001b98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d127      	bne.n	8001bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d11f      	bne.n	8001bee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb8:	2a07      	cmp	r2, #7
 8001bba:	bf14      	ite	ne
 8001bbc:	2201      	movne	r2, #1
 8001bbe:	2200      	moveq	r2, #0
 8001bc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d113      	bne.n	8001bee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d06e      	beq.n	8001ccc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d069      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0ad      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c1c:	f7ff f928 	bl	8000e70 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f924 	bl	8000e70 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e09a      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x784>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c52:	3a01      	subs	r2, #1
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c5c:	0212      	lsls	r2, r2, #8
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c64:	0852      	lsrs	r2, r2, #1
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0552      	lsls	r2, r2, #21
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c70:	0852      	lsrs	r2, r2, #1
 8001c72:	3a01      	subs	r2, #1
 8001c74:	0652      	lsls	r2, r2, #25
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c7c:	0912      	lsrs	r2, r2, #4
 8001c7e:	0452      	lsls	r2, r2, #17
 8001c80:	430a      	orrs	r2, r1
 8001c82:	4930      	ldr	r1, [pc, #192]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca0:	f7ff f8e6 	bl	8000e70 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f8e2 	bl	8000e70 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e058      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc6:	e050      	b.n	8001d6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e04f      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d148      	bne.n	8001d6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf0:	f7ff f8be 	bl	8000e70 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff f8ba 	bl	8000e70 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e030      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x734>
 8001d16:	e028      	b.n	8001d6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d023      	beq.n	8001d66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_RCC_OscConfig+0x780>)
 8001d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f8a1 	bl	8000e70 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	e00c      	b.n	8001d4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff f89d 	bl	8000e70 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d905      	bls.n	8001d4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e013      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_OscConfig+0x7b0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ec      	bne.n	8001d32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_OscConfig+0x7b0>)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	4905      	ldr	r1, [pc, #20]	; (8001d74 <HAL_RCC_OscConfig+0x7b0>)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x7b4>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e001      	b.n	8001d6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	feeefffc 	.word	0xfeeefffc

08001d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0e7      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4970      	ldr	r1, [pc, #448]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0cf      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d010      	beq.n	8001dee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d908      	bls.n	8001dee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4960      	ldr	r1, [pc, #384]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d04c      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0a6      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e09a      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e08e      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e086      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4943      	ldr	r1, [pc, #268]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e64:	f7ff f804 	bl	8000e70 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff f800 	bl	8000e70 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e06e      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d208      	bcs.n	8001ec2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	492b      	ldr	r1, [pc, #172]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d210      	bcs.n	8001ef2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 0207 	bic.w	r2, r3, #7
 8001ed8:	4923      	ldr	r1, [pc, #140]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e036      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4918      	ldr	r1, [pc, #96]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4910      	ldr	r1, [pc, #64]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f30:	f000 f824 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	490b      	ldr	r1, [pc, #44]	; (8001f70 <HAL_RCC_ClockConfig+0x1f4>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1fc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ff3b 	bl	8000dd0 <HAL_InitTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	080052d0 	.word	0x080052d0
 8001f74:	20000004 	.word	0x20000004
 8001f78:	20000008 	.word	0x20000008

08001f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d11e      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	e004      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCC_GetSysClockFreq+0x114>)
 8002002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d134      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0xa6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0xac>
 8002020:	e005      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCC_GetSysClockFreq+0x110>)
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	e005      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_GetSysClockFreq+0x114>)
 800202a:	617b      	str	r3, [r7, #20]
      break;
 800202c:	e002      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	617b      	str	r3, [r7, #20]
      break;
 8002032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	3301      	adds	r3, #1
 8002040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	0e5b      	lsrs	r3, r3, #25
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	3301      	adds	r3, #1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002074:	69bb      	ldr	r3, [r7, #24]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	080052e8 	.word	0x080052e8
 800208c:	00f42400 	.word	0x00f42400
 8002090:	007a1200 	.word	0x007a1200

08002094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000004 	.word	0x20000004

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b0:	f7ff fff0 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080052e0 	.word	0x080052e0

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020dc:	f7ff ffda 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	080052e0 	.word	0x080052e0

08002104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800211c:	f7ff f9ee 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002120:	6178      	str	r0, [r7, #20]
 8002122:	e014      	b.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a24      	ldr	r2, [pc, #144]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff f9de 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002154:	d10b      	bne.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d919      	bls.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2ba0      	cmp	r3, #160	; 0xa0
 8002160:	d902      	bls.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	e013      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e010      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d902      	bls.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002174:	2303      	movs	r3, #3
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e00a      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d102      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002180:	2302      	movs	r3, #2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e004      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b70      	cmp	r3, #112	; 0x70
 800218a:	d101      	bne.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 0207 	bic.w	r2, r3, #7
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40022000 	.word	0x40022000

080021c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021cc:	2300      	movs	r3, #0
 80021ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d0:	2300      	movs	r3, #0
 80021d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d041      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e8:	d02a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ee:	d824      	bhi.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f4:	d008      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021fa:	d81e      	bhi.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002204:	d010      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002206:	e018      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002208:	4b86      	ldr	r3, [pc, #536]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a85      	ldr	r2, [pc, #532]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002214:	e015      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fabb 	bl	8002798 <RCCEx_PLLSAI1_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002226:	e00c      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3320      	adds	r3, #32
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fba6 	bl	8002980 <RCCEx_PLLSAI2_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002238:	e003      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	74fb      	strb	r3, [r7, #19]
      break;
 800223e:	e000      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002248:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002256:	4973      	ldr	r1, [pc, #460]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800225e:	e001      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d041      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002274:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002278:	d02a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800227a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800227e:	d824      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002284:	d008      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800228a:	d81e      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d010      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002296:	e018      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a61      	ldr	r2, [pc, #388]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a4:	e015      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fa73 	bl	8002798 <RCCEx_PLLSAI1_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3320      	adds	r3, #32
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fb5e 	bl	8002980 <RCCEx_PLLSAI2_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c8:	e003      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	74fb      	strb	r3, [r7, #19]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022d8:	4b52      	ldr	r3, [pc, #328]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022e6:	494f      	ldr	r1, [pc, #316]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ee:	e001      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a0 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	4a40      	ldr	r2, [pc, #256]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	; 0x58
 8002328:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002334:	2301      	movs	r3, #1
 8002336:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002338:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3a      	ldr	r2, [pc, #232]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002344:	f7fe fd94 	bl	8000e70 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800234a:	e009      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7fe fd90 	bl	8000e70 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d902      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	74fb      	strb	r3, [r7, #19]
        break;
 800235e:	e005      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ef      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d15c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01f      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d019      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fd4f 	bl	8000e70 <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d4:	e00b      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fd4b 	bl	8000e70 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d902      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	74fb      	strb	r3, [r7, #19]
            break;
 80023ec:	e006      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ec      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002412:	4904      	ldr	r1, [pc, #16]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800241a:	e009      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	74bb      	strb	r3, [r7, #18]
 8002420:	e006      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002430:	7c7b      	ldrb	r3, [r7, #17]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a9d      	ldr	r2, [pc, #628]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244e:	4b98      	ldr	r3, [pc, #608]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f023 0203 	bic.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	4994      	ldr	r1, [pc, #592]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002470:	4b8f      	ldr	r3, [pc, #572]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 020c 	bic.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	498c      	ldr	r1, [pc, #560]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002492:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4983      	ldr	r1, [pc, #524]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	497b      	ldr	r1, [pc, #492]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e4:	4972      	ldr	r1, [pc, #456]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	496a      	ldr	r1, [pc, #424]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800251a:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	4961      	ldr	r1, [pc, #388]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800253c:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	4959      	ldr	r1, [pc, #356]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255e:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256c:	4950      	ldr	r1, [pc, #320]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	4948      	ldr	r1, [pc, #288]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a2:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	493f      	ldr	r1, [pc, #252]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d028      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	4937      	ldr	r1, [pc, #220]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]
 80025f0:	e011      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025fa:	d10c      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	2101      	movs	r1, #1
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f8c8 	bl	8002798 <RCCEx_PLLSAI1_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d028      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	491f      	ldr	r1, [pc, #124]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002640:	d106      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264c:	60d3      	str	r3, [r2, #12]
 800264e:	e011      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f899 	bl	8002798 <RCCEx_PLLSAI1_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d02b      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800269e:	d109      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a02      	ldr	r2, [pc, #8]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026aa:	60d3      	str	r3, [r2, #12]
 80026ac:	e014      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2101      	movs	r1, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f867 	bl	8002798 <RCCEx_PLLSAI1_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02f      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f2:	4928      	ldr	r1, [pc, #160]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002702:	d10d      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	2102      	movs	r1, #2
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f844 	bl	8002798 <RCCEx_PLLSAI1_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d014      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	74bb      	strb	r3, [r7, #18]
 800271e:	e011      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002728:	d10c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3320      	adds	r3, #32
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f925 	bl	8002980 <RCCEx_PLLSAI2_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002782:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800278a:	7cbb      	ldrb	r3, [r7, #18]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000

08002798 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027a6:	4b75      	ldr	r3, [pc, #468]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027b2:	4b72      	ldr	r3, [pc, #456]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d10d      	bne.n	80027de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
       ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027ca:	4b6c      	ldr	r3, [pc, #432]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
       ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d047      	beq.n	800286e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e044      	b.n	800286e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d018      	beq.n	800281e <RCCEx_PLLSAI1_Config+0x86>
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d825      	bhi.n	800283c <RCCEx_PLLSAI1_Config+0xa4>
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x62>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d009      	beq.n	800280c <RCCEx_PLLSAI1_Config+0x74>
 80027f8:	e020      	b.n	800283c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027fa:	4b60      	ldr	r3, [pc, #384]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11d      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e01a      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800280c:	4b5b      	ldr	r3, [pc, #364]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e013      	b.n	8002846 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282a:	4b54      	ldr	r3, [pc, #336]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800283a:	e006      	b.n	800284a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e004      	b.n	800284c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800284a:	bf00      	nop
    }

    if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	430b      	orrs	r3, r1
 8002868:	4944      	ldr	r1, [pc, #272]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d17d      	bne.n	8002970 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a40      	ldr	r2, [pc, #256]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800287e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe faf6 	bl	8000e70 <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002886:	e009      	b.n	800289c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002888:	f7fe faf2 	bl	8000e70 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	73fb      	strb	r3, [r7, #15]
        break;
 800289a:	e005      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800289c:	4b37      	ldr	r3, [pc, #220]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ef      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d160      	bne.n	8002970 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b4:	4b31      	ldr	r3, [pc, #196]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	0912      	lsrs	r2, r2, #4
 80028cc:	0452      	lsls	r2, r2, #17
 80028ce:	430a      	orrs	r2, r1
 80028d0:	492a      	ldr	r1, [pc, #168]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	610b      	str	r3, [r1, #16]
 80028d6:	e027      	b.n	8002928 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d112      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028de:	4b27      	ldr	r3, [pc, #156]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	0211      	lsls	r1, r2, #8
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6912      	ldr	r2, [r2, #16]
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0552      	lsls	r2, r2, #21
 80028fa:	430a      	orrs	r2, r1
 80028fc:	491f      	ldr	r1, [pc, #124]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	610b      	str	r3, [r1, #16]
 8002902:	e011      	b.n	8002928 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800290c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6892      	ldr	r2, [r2, #8]
 8002914:	0211      	lsls	r1, r2, #8
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6952      	ldr	r2, [r2, #20]
 800291a:	0852      	lsrs	r2, r2, #1
 800291c:	3a01      	subs	r2, #1
 800291e:	0652      	lsls	r2, r2, #25
 8002920:	430a      	orrs	r2, r1
 8002922:	4916      	ldr	r1, [pc, #88]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fa9c 	bl	8000e70 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800293a:	e009      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800293c:	f7fe fa98 	bl	8000e70 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
          break;
 800294e:	e005      	b.n	800295c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ef      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4904      	ldr	r1, [pc, #16]	; (800297c <RCCEx_PLLSAI1_Config+0x1e4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298e:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800299a:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0203 	and.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d10d      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
       ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029b2:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
       ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d047      	beq.n	8002a56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e044      	b.n	8002a56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d018      	beq.n	8002a06 <RCCEx_PLLSAI2_Config+0x86>
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d825      	bhi.n	8002a24 <RCCEx_PLLSAI2_Config+0xa4>
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <RCCEx_PLLSAI2_Config+0x62>
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d009      	beq.n	80029f4 <RCCEx_PLLSAI2_Config+0x74>
 80029e0:	e020      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029e2:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11d      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f2:	e01a      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f4:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d116      	bne.n	8002a2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a04:	e013      	b.n	8002a2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a06:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a22:	e006      	b.n	8002a32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e004      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	4939      	ldr	r1, [pc, #228]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d167      	bne.n	8002b2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a35      	ldr	r2, [pc, #212]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a68:	f7fe fa02 	bl	8000e70 <HAL_GetTick>
 8002a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a6e:	e009      	b.n	8002a84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a70:	f7fe f9fe 	bl	8000e70 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	73fb      	strb	r3, [r7, #15]
        break;
 8002a82:	e005      	b.n	8002a90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ef      	bne.n	8002a70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d14a      	bne.n	8002b2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	0211      	lsls	r1, r2, #8
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	0912      	lsrs	r2, r2, #4
 8002ab4:	0452      	lsls	r2, r2, #17
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	491f      	ldr	r1, [pc, #124]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	614b      	str	r3, [r1, #20]
 8002abe:	e011      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ac8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6892      	ldr	r2, [r2, #8]
 8002ad0:	0211      	lsls	r1, r2, #8
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6912      	ldr	r2, [r2, #16]
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0652      	lsls	r2, r2, #25
 8002adc:	430a      	orrs	r2, r1
 8002ade:	4916      	ldr	r1, [pc, #88]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe f9be 	bl	8000e70 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002af6:	e009      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af8:	f7fe f9ba 	bl	8000e70 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	73fb      	strb	r3, [r7, #15]
          break;
 8002b0a:	e005      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4904      	ldr	r1, [pc, #16]	; (8002b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e040      	b.n	8002bd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd ff2c 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fb2e 	bl	80031dc <UART_SetConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e022      	b.n	8002bd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fdda 	bl	800374c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fe61 	bl	8003890 <UART_CheckIdleState>
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0ba      	sub	sp, #232	; 0xe8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c02:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c06:	4013      	ands	r3, r2
 8002c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d115      	bne.n	8002c40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00f      	beq.n	8002c40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 82a6 	beq.w	8003182 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
      }
      return;
 8002c3e:	e2a0      	b.n	8003182 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8117 	beq.w	8002e78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <HAL_UART_IRQHandler+0x298>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 810a 	beq.w	8002e78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <HAL_UART_IRQHandler+0xbc>
 8002c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d011      	beq.n	8002cc4 <HAL_UART_IRQHandler+0xec>
 8002ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d011      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x11c>
 8002cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cea:	f043 0202 	orr.w	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d26:	f043 0208 	orr.w	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <HAL_UART_IRQHandler+0x18a>
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 820c 	beq.w	8003186 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d005      	beq.n	8002dba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04f      	beq.n	8002e5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fe75 	bl	8003aaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d141      	bne.n	8002e52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3308      	adds	r3, #8
 8002df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1d9      	bne.n	8002dce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d013      	beq.n	8002e4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_UART_IRQHandler+0x29c>)
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f979 	bl	8001126 <HAL_DMA_Abort_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e44:	4610      	mov	r0, r2
 8002e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e48:	e00f      	b.n	8002e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9b0 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	e00b      	b.n	8002e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9ac 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	e007      	b.n	8002e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9a8 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e68:	e18d      	b.n	8003186 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6a:	bf00      	nop
    return;
 8002e6c:	e18b      	b.n	8003186 <HAL_UART_IRQHandler+0x5ae>
 8002e6e:	bf00      	nop
 8002e70:	04000120 	.word	0x04000120
 8002e74:	08003b71 	.word	0x08003b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 8146 	bne.w	800310e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 813f 	beq.w	800310e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8138 	beq.w	800310e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	f040 80b4 	bne.w	800301e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ec2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 815f 	beq.w	800318a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f080 8157 	bcs.w	800318a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8085 	bne.w	8003002 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1da      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e1      	bne.n	8002f42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e3      	bne.n	8002f7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd2:	f023 0310 	bic.w	r3, r3, #16
 8002fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fe6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e4      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe f854 	bl	80010aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800300e:	b29b      	uxth	r3, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	b29b      	uxth	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8d4 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800301c:	e0b5      	b.n	800318a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800302a:	b29b      	uxth	r3, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80a7 	beq.w	800318e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a2 	beq.w	800318e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800305e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
 800306e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e4      	bne.n	800304a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3308      	adds	r3, #8
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	623b      	str	r3, [r7, #32]
   return(result);
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3308      	adds	r3, #8
 80030a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030a4:	633a      	str	r2, [r7, #48]	; 0x30
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e3      	bne.n	8003080 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0310 	bic.w	r3, r3, #16
 80030de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	617b      	str	r3, [r7, #20]
   return(result);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e4      	bne.n	80030ca <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f85c 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800310c:	e03f      	b.n	800318e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00e      	beq.n	8003138 <HAL_UART_IRQHandler+0x560>
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800312e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fd5d 	bl	8003bf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003136:	e02d      	b.n	8003194 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01c      	beq.n	8003192 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
    }
    return;
 8003160:	e017      	b.n	8003192 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <HAL_UART_IRQHandler+0x5bc>
 800316e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fd0e 	bl	8003b9c <UART_EndTransmit_IT>
    return;
 8003180:	e008      	b.n	8003194 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003182:	bf00      	nop
 8003184:	e006      	b.n	8003194 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <HAL_UART_IRQHandler+0x5bc>
      return;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_UART_IRQHandler+0x5bc>
      return;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003192:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003194:	37e8      	adds	r7, #232	; 0xe8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop

0800319c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e0:	b08a      	sub	sp, #40	; 0x28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4313      	orrs	r3, r2
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4ba4      	ldr	r3, [pc, #656]	; (800349c <UART_SetConfig+0x2c0>)
 800320c:	4013      	ands	r3, r2
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003214:	430b      	orrs	r3, r1
 8003216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a99      	ldr	r2, [pc, #612]	; (80034a0 <UART_SetConfig+0x2c4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	4313      	orrs	r3, r2
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a90      	ldr	r2, [pc, #576]	; (80034a4 <UART_SetConfig+0x2c8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d126      	bne.n	80032b4 <UART_SetConfig+0xd8>
 8003266:	4b90      	ldr	r3, [pc, #576]	; (80034a8 <UART_SetConfig+0x2cc>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b03      	cmp	r3, #3
 8003272:	d81b      	bhi.n	80032ac <UART_SetConfig+0xd0>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <UART_SetConfig+0xa0>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	0800328d 	.word	0x0800328d
 8003280:	0800329d 	.word	0x0800329d
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a5 	.word	0x080032a5
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e116      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003294:	2302      	movs	r3, #2
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e112      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800329c:	2304      	movs	r3, #4
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e10e      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80032a4:	2308      	movs	r3, #8
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e10a      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e106      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a7c      	ldr	r2, [pc, #496]	; (80034ac <UART_SetConfig+0x2d0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d138      	bne.n	8003330 <UART_SetConfig+0x154>
 80032be:	4b7a      	ldr	r3, [pc, #488]	; (80034a8 <UART_SetConfig+0x2cc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d82d      	bhi.n	8003328 <UART_SetConfig+0x14c>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0xf8>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	08003309 	.word	0x08003309
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003329 	.word	0x08003329
 80032e0:	08003329 	.word	0x08003329
 80032e4:	08003319 	.word	0x08003319
 80032e8:	08003329 	.word	0x08003329
 80032ec:	08003329 	.word	0x08003329
 80032f0:	08003329 	.word	0x08003329
 80032f4:	08003311 	.word	0x08003311
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003329 	.word	0x08003329
 8003300:	08003329 	.word	0x08003329
 8003304:	08003321 	.word	0x08003321
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e0d8      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003310:	2302      	movs	r3, #2
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e0d4      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e0d0      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e0cc      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e0c8      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <UART_SetConfig+0x2d4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d125      	bne.n	8003386 <UART_SetConfig+0x1aa>
 800333a:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <UART_SetConfig+0x2cc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d016      	beq.n	8003376 <UART_SetConfig+0x19a>
 8003348:	2b30      	cmp	r3, #48	; 0x30
 800334a:	d818      	bhi.n	800337e <UART_SetConfig+0x1a2>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d00a      	beq.n	8003366 <UART_SetConfig+0x18a>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d814      	bhi.n	800337e <UART_SetConfig+0x1a2>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <UART_SetConfig+0x182>
 8003358:	2b10      	cmp	r3, #16
 800335a:	d008      	beq.n	800336e <UART_SetConfig+0x192>
 800335c:	e00f      	b.n	800337e <UART_SetConfig+0x1a2>
 800335e:	2300      	movs	r3, #0
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003364:	e0ad      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003366:	2302      	movs	r3, #2
 8003368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336c:	e0a9      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800336e:	2304      	movs	r3, #4
 8003370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003374:	e0a5      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003376:	2308      	movs	r3, #8
 8003378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337c:	e0a1      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800337e:	2310      	movs	r3, #16
 8003380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003384:	e09d      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <UART_SetConfig+0x2d8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d125      	bne.n	80033dc <UART_SetConfig+0x200>
 8003390:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <UART_SetConfig+0x2cc>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800339a:	2bc0      	cmp	r3, #192	; 0xc0
 800339c:	d016      	beq.n	80033cc <UART_SetConfig+0x1f0>
 800339e:	2bc0      	cmp	r3, #192	; 0xc0
 80033a0:	d818      	bhi.n	80033d4 <UART_SetConfig+0x1f8>
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d00a      	beq.n	80033bc <UART_SetConfig+0x1e0>
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d814      	bhi.n	80033d4 <UART_SetConfig+0x1f8>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <UART_SetConfig+0x1d8>
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d008      	beq.n	80033c4 <UART_SetConfig+0x1e8>
 80033b2:	e00f      	b.n	80033d4 <UART_SetConfig+0x1f8>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e082      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80033bc:	2302      	movs	r3, #2
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e07e      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80033c4:	2304      	movs	r3, #4
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e07a      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80033cc:	2308      	movs	r3, #8
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	e076      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80033d4:	2310      	movs	r3, #16
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033da:	e072      	b.n	80034c2 <UART_SetConfig+0x2e6>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a35      	ldr	r2, [pc, #212]	; (80034b8 <UART_SetConfig+0x2dc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d12a      	bne.n	800343c <UART_SetConfig+0x260>
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <UART_SetConfig+0x2cc>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f4:	d01a      	beq.n	800342c <UART_SetConfig+0x250>
 80033f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fa:	d81b      	bhi.n	8003434 <UART_SetConfig+0x258>
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d00c      	beq.n	800341c <UART_SetConfig+0x240>
 8003402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003406:	d815      	bhi.n	8003434 <UART_SetConfig+0x258>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <UART_SetConfig+0x238>
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d008      	beq.n	8003424 <UART_SetConfig+0x248>
 8003412:	e00f      	b.n	8003434 <UART_SetConfig+0x258>
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e052      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800341c:	2302      	movs	r3, #2
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e04e      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003424:	2304      	movs	r3, #4
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342a:	e04a      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800342c:	2308      	movs	r3, #8
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003432:	e046      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003434:	2310      	movs	r3, #16
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343a:	e042      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <UART_SetConfig+0x2c4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d13a      	bne.n	80034bc <UART_SetConfig+0x2e0>
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <UART_SetConfig+0x2cc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003454:	d01a      	beq.n	800348c <UART_SetConfig+0x2b0>
 8003456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800345a:	d81b      	bhi.n	8003494 <UART_SetConfig+0x2b8>
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	d00c      	beq.n	800347c <UART_SetConfig+0x2a0>
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d815      	bhi.n	8003494 <UART_SetConfig+0x2b8>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <UART_SetConfig+0x298>
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003470:	d008      	beq.n	8003484 <UART_SetConfig+0x2a8>
 8003472:	e00f      	b.n	8003494 <UART_SetConfig+0x2b8>
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e022      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800347c:	2302      	movs	r3, #2
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e01e      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003484:	2304      	movs	r3, #4
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e01a      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800348c:	2308      	movs	r3, #8
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003492:	e016      	b.n	80034c2 <UART_SetConfig+0x2e6>
 8003494:	2310      	movs	r3, #16
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349a:	e012      	b.n	80034c2 <UART_SetConfig+0x2e6>
 800349c:	efff69f3 	.word	0xefff69f3
 80034a0:	40008000 	.word	0x40008000
 80034a4:	40013800 	.word	0x40013800
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40004400 	.word	0x40004400
 80034b0:	40004800 	.word	0x40004800
 80034b4:	40004c00 	.word	0x40004c00
 80034b8:	40005000 	.word	0x40005000
 80034bc:	2310      	movs	r3, #16
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a9f      	ldr	r2, [pc, #636]	; (8003744 <UART_SetConfig+0x568>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d17a      	bne.n	80035c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d824      	bhi.n	800351e <UART_SetConfig+0x342>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x300>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003501 	.word	0x08003501
 80034e0:	0800351f 	.word	0x0800351f
 80034e4:	08003509 	.word	0x08003509
 80034e8:	0800351f 	.word	0x0800351f
 80034ec:	0800350f 	.word	0x0800350f
 80034f0:	0800351f 	.word	0x0800351f
 80034f4:	0800351f 	.word	0x0800351f
 80034f8:	0800351f 	.word	0x0800351f
 80034fc:	08003517 	.word	0x08003517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7fe fdd4 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003504:	61f8      	str	r0, [r7, #28]
        break;
 8003506:	e010      	b.n	800352a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <UART_SetConfig+0x56c>)
 800350a:	61fb      	str	r3, [r7, #28]
        break;
 800350c:	e00d      	b.n	800352a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350e:	f7fe fd35 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8003512:	61f8      	str	r0, [r7, #28]
        break;
 8003514:	e009      	b.n	800352a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351a:	61fb      	str	r3, [r7, #28]
        break;
 800351c:	e005      	b.n	800352a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80fb 	beq.w	8003728 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	429a      	cmp	r2, r3
 8003540:	d305      	bcc.n	800354e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	429a      	cmp	r2, r3
 800354c:	d903      	bls.n	8003556 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003554:	e0e8      	b.n	8003728 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2200      	movs	r2, #0
 800355a:	461c      	mov	r4, r3
 800355c:	4615      	mov	r5, r2
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	022b      	lsls	r3, r5, #8
 8003568:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800356c:	0222      	lsls	r2, r4, #8
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	6849      	ldr	r1, [r1, #4]
 8003572:	0849      	lsrs	r1, r1, #1
 8003574:	2000      	movs	r0, #0
 8003576:	4688      	mov	r8, r1
 8003578:	4681      	mov	r9, r0
 800357a:	eb12 0a08 	adds.w	sl, r2, r8
 800357e:	eb43 0b09 	adc.w	fp, r3, r9
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003590:	4650      	mov	r0, sl
 8003592:	4659      	mov	r1, fp
 8003594:	f7fc fe74 	bl	8000280 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a6:	d308      	bcc.n	80035ba <UART_SetConfig+0x3de>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ae:	d204      	bcs.n	80035ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	e0b6      	b.n	8003728 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035c0:	e0b2      	b.n	8003728 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ca:	d15e      	bne.n	800368a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d828      	bhi.n	8003626 <UART_SetConfig+0x44a>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x400>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003601 	.word	0x08003601
 80035e0:	08003609 	.word	0x08003609
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003627 	.word	0x08003627
 80035ec:	08003617 	.word	0x08003617
 80035f0:	08003627 	.word	0x08003627
 80035f4:	08003627 	.word	0x08003627
 80035f8:	08003627 	.word	0x08003627
 80035fc:	0800361f 	.word	0x0800361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe fd54 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003604:	61f8      	str	r0, [r7, #28]
        break;
 8003606:	e014      	b.n	8003632 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7fe fd66 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 800360c:	61f8      	str	r0, [r7, #28]
        break;
 800360e:	e010      	b.n	8003632 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <UART_SetConfig+0x56c>)
 8003612:	61fb      	str	r3, [r7, #28]
        break;
 8003614:	e00d      	b.n	8003632 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003616:	f7fe fcb1 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 800361a:	61f8      	str	r0, [r7, #28]
        break;
 800361c:	e009      	b.n	8003632 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003622:	61fb      	str	r3, [r7, #28]
        break;
 8003624:	e005      	b.n	8003632 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d077      	beq.n	8003728 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005a      	lsls	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	441a      	add	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d916      	bls.n	8003682 <UART_SetConfig+0x4a6>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d212      	bcs.n	8003682 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	b29a      	uxth	r2, r3
 8003672:	8afb      	ldrh	r3, [r7, #22]
 8003674:	4313      	orrs	r3, r2
 8003676:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	8afa      	ldrh	r2, [r7, #22]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	e052      	b.n	8003728 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003688:	e04e      	b.n	8003728 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800368a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800368e:	2b08      	cmp	r3, #8
 8003690:	d827      	bhi.n	80036e2 <UART_SetConfig+0x506>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0x4bc>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036e3 	.word	0x080036e3
 80036b0:	080036e3 	.word	0x080036e3
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fcf6 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 80036c0:	61f8      	str	r0, [r7, #28]
        break;
 80036c2:	e014      	b.n	80036ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fd08 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 80036c8:	61f8      	str	r0, [r7, #28]
        break;
 80036ca:	e010      	b.n	80036ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <UART_SetConfig+0x56c>)
 80036ce:	61fb      	str	r3, [r7, #28]
        break;
 80036d0:	e00d      	b.n	80036ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7fe fc53 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80036d6:	61f8      	str	r0, [r7, #28]
        break;
 80036d8:	e009      	b.n	80036ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036de:	61fb      	str	r3, [r7, #28]
        break;
 80036e0:	e005      	b.n	80036ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036ec:	bf00      	nop
    }

    if (pclk != 0U)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d019      	beq.n	8003728 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	085a      	lsrs	r2, r3, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	441a      	add	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	d909      	bls.n	8003722 <UART_SetConfig+0x546>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d205      	bcs.n	8003722 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e002      	b.n	8003728 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003734:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003738:	4618      	mov	r0, r3
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	40008000 	.word	0x40008000
 8003748:	00f42400 	.word	0x00f42400

0800374c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01a      	beq.n	8003862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384a:	d10a      	bne.n	8003862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038a0:	f7fd fae6 	bl	8000e70 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d10e      	bne.n	80038d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f82d 	bl	8003922 <UART_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e023      	b.n	800391a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d10e      	bne.n	80038fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f817 	bl	8003922 <UART_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e00d      	b.n	800391a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b09c      	sub	sp, #112	; 0x70
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003932:	e0a5      	b.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393a:	f000 80a1 	beq.w	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fd fa97 	bl	8000e70 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <UART_WaitOnFlagUntilTimeout+0x32>
 800394e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13e      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003968:	667b      	str	r3, [r7, #100]	; 0x64
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003974:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e6      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	663b      	str	r3, [r7, #96]	; 0x60
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e067      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d04f      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d147      	bne.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a4c:	623a      	str	r2, [r7, #32]
 8003a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	69f9      	ldr	r1, [r7, #28]
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e010      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	f43f af4a 	beq.w	8003934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3770      	adds	r7, #112	; 0x70
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b095      	sub	sp, #84	; 0x54
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e6      	bne.n	8003ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d118      	bne.n	8003b52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f023 0310 	bic.w	r3, r3, #16
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e6      	bne.n	8003b20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b64:	bf00      	nop
 8003b66:	3754      	adds	r7, #84	; 0x54
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff fb0e 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e6      	bne.n	8003ba4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fada 	bl	800319c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <__errno>:
 8003c04:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <__errno+0x8>)
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000010 	.word	0x20000010

08003c10 <__libc_init_array>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	4d0d      	ldr	r5, [pc, #52]	; (8003c48 <__libc_init_array+0x38>)
 8003c14:	4c0d      	ldr	r4, [pc, #52]	; (8003c4c <__libc_init_array+0x3c>)
 8003c16:	1b64      	subs	r4, r4, r5
 8003c18:	10a4      	asrs	r4, r4, #2
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	42a6      	cmp	r6, r4
 8003c1e:	d109      	bne.n	8003c34 <__libc_init_array+0x24>
 8003c20:	4d0b      	ldr	r5, [pc, #44]	; (8003c50 <__libc_init_array+0x40>)
 8003c22:	4c0c      	ldr	r4, [pc, #48]	; (8003c54 <__libc_init_array+0x44>)
 8003c24:	f001 fb24 	bl	8005270 <_init>
 8003c28:	1b64      	subs	r4, r4, r5
 8003c2a:	10a4      	asrs	r4, r4, #2
 8003c2c:	2600      	movs	r6, #0
 8003c2e:	42a6      	cmp	r6, r4
 8003c30:	d105      	bne.n	8003c3e <__libc_init_array+0x2e>
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c38:	4798      	blx	r3
 8003c3a:	3601      	adds	r6, #1
 8003c3c:	e7ee      	b.n	8003c1c <__libc_init_array+0xc>
 8003c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c42:	4798      	blx	r3
 8003c44:	3601      	adds	r6, #1
 8003c46:	e7f2      	b.n	8003c2e <__libc_init_array+0x1e>
 8003c48:	080053d4 	.word	0x080053d4
 8003c4c:	080053d4 	.word	0x080053d4
 8003c50:	080053d4 	.word	0x080053d4
 8003c54:	080053d8 	.word	0x080053d8

08003c58 <memset>:
 8003c58:	4402      	add	r2, r0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <memset+0xa>
 8003c60:	4770      	bx	lr
 8003c62:	f803 1b01 	strb.w	r1, [r3], #1
 8003c66:	e7f9      	b.n	8003c5c <memset+0x4>

08003c68 <iprintf>:
 8003c68:	b40f      	push	{r0, r1, r2, r3}
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <iprintf+0x2c>)
 8003c6c:	b513      	push	{r0, r1, r4, lr}
 8003c6e:	681c      	ldr	r4, [r3, #0]
 8003c70:	b124      	cbz	r4, 8003c7c <iprintf+0x14>
 8003c72:	69a3      	ldr	r3, [r4, #24]
 8003c74:	b913      	cbnz	r3, 8003c7c <iprintf+0x14>
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 fa74 	bl	8004164 <__sinit>
 8003c7c:	ab05      	add	r3, sp, #20
 8003c7e:	9a04      	ldr	r2, [sp, #16]
 8003c80:	68a1      	ldr	r1, [r4, #8]
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 fc7d 	bl	8004584 <_vfiprintf_r>
 8003c8a:	b002      	add	sp, #8
 8003c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c90:	b004      	add	sp, #16
 8003c92:	4770      	bx	lr
 8003c94:	20000010 	.word	0x20000010

08003c98 <putchar>:
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <putchar+0x28>)
 8003c9a:	b513      	push	{r0, r1, r4, lr}
 8003c9c:	681c      	ldr	r4, [r3, #0]
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	b134      	cbz	r4, 8003cb0 <putchar+0x18>
 8003ca2:	69a3      	ldr	r3, [r4, #24]
 8003ca4:	b923      	cbnz	r3, 8003cb0 <putchar+0x18>
 8003ca6:	9001      	str	r0, [sp, #4]
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fa5b 	bl	8004164 <__sinit>
 8003cae:	9901      	ldr	r1, [sp, #4]
 8003cb0:	68a2      	ldr	r2, [r4, #8]
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	b002      	add	sp, #8
 8003cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cba:	f000 bf27 	b.w	8004b0c <_putc_r>
 8003cbe:	bf00      	nop
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <_puts_r>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	460e      	mov	r6, r1
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b118      	cbz	r0, 8003cd4 <_puts_r+0x10>
 8003ccc:	6983      	ldr	r3, [r0, #24]
 8003cce:	b90b      	cbnz	r3, 8003cd4 <_puts_r+0x10>
 8003cd0:	f000 fa48 	bl	8004164 <__sinit>
 8003cd4:	69ab      	ldr	r3, [r5, #24]
 8003cd6:	68ac      	ldr	r4, [r5, #8]
 8003cd8:	b913      	cbnz	r3, 8003ce0 <_puts_r+0x1c>
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 fa42 	bl	8004164 <__sinit>
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <_puts_r+0xd0>)
 8003ce2:	429c      	cmp	r4, r3
 8003ce4:	d120      	bne.n	8003d28 <_puts_r+0x64>
 8003ce6:	686c      	ldr	r4, [r5, #4]
 8003ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cea:	07db      	lsls	r3, r3, #31
 8003cec:	d405      	bmi.n	8003cfa <_puts_r+0x36>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	0598      	lsls	r0, r3, #22
 8003cf2:	d402      	bmi.n	8003cfa <_puts_r+0x36>
 8003cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cf6:	f000 fad3 	bl	80042a0 <__retarget_lock_acquire_recursive>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	0719      	lsls	r1, r3, #28
 8003cfe:	d51d      	bpl.n	8003d3c <_puts_r+0x78>
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	b1db      	cbz	r3, 8003d3c <_puts_r+0x78>
 8003d04:	3e01      	subs	r6, #1
 8003d06:	68a3      	ldr	r3, [r4, #8]
 8003d08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	60a3      	str	r3, [r4, #8]
 8003d10:	bb39      	cbnz	r1, 8003d62 <_puts_r+0x9e>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da38      	bge.n	8003d88 <_puts_r+0xc4>
 8003d16:	4622      	mov	r2, r4
 8003d18:	210a      	movs	r1, #10
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f000 f848 	bl	8003db0 <__swbuf_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d011      	beq.n	8003d48 <_puts_r+0x84>
 8003d24:	250a      	movs	r5, #10
 8003d26:	e011      	b.n	8003d4c <_puts_r+0x88>
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <_puts_r+0xd4>)
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	d101      	bne.n	8003d32 <_puts_r+0x6e>
 8003d2e:	68ac      	ldr	r4, [r5, #8]
 8003d30:	e7da      	b.n	8003ce8 <_puts_r+0x24>
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <_puts_r+0xd8>)
 8003d34:	429c      	cmp	r4, r3
 8003d36:	bf08      	it	eq
 8003d38:	68ec      	ldreq	r4, [r5, #12]
 8003d3a:	e7d5      	b.n	8003ce8 <_puts_r+0x24>
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 f888 	bl	8003e54 <__swsetup_r>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d0dd      	beq.n	8003d04 <_puts_r+0x40>
 8003d48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d4e:	07da      	lsls	r2, r3, #31
 8003d50:	d405      	bmi.n	8003d5e <_puts_r+0x9a>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	d402      	bmi.n	8003d5e <_puts_r+0x9a>
 8003d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d5a:	f000 faa2 	bl	80042a2 <__retarget_lock_release_recursive>
 8003d5e:	4628      	mov	r0, r5
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da04      	bge.n	8003d70 <_puts_r+0xac>
 8003d66:	69a2      	ldr	r2, [r4, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	dc06      	bgt.n	8003d7a <_puts_r+0xb6>
 8003d6c:	290a      	cmp	r1, #10
 8003d6e:	d004      	beq.n	8003d7a <_puts_r+0xb6>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	6022      	str	r2, [r4, #0]
 8003d76:	7019      	strb	r1, [r3, #0]
 8003d78:	e7c5      	b.n	8003d06 <_puts_r+0x42>
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f000 f817 	bl	8003db0 <__swbuf_r>
 8003d82:	3001      	adds	r0, #1
 8003d84:	d1bf      	bne.n	8003d06 <_puts_r+0x42>
 8003d86:	e7df      	b.n	8003d48 <_puts_r+0x84>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	250a      	movs	r5, #10
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	701d      	strb	r5, [r3, #0]
 8003d92:	e7db      	b.n	8003d4c <_puts_r+0x88>
 8003d94:	0800533c 	.word	0x0800533c
 8003d98:	0800535c 	.word	0x0800535c
 8003d9c:	0800531c 	.word	0x0800531c

08003da0 <puts>:
 8003da0:	4b02      	ldr	r3, [pc, #8]	; (8003dac <puts+0xc>)
 8003da2:	4601      	mov	r1, r0
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7ff bf8d 	b.w	8003cc4 <_puts_r>
 8003daa:	bf00      	nop
 8003dac:	20000010 	.word	0x20000010

08003db0 <__swbuf_r>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	460e      	mov	r6, r1
 8003db4:	4614      	mov	r4, r2
 8003db6:	4605      	mov	r5, r0
 8003db8:	b118      	cbz	r0, 8003dc2 <__swbuf_r+0x12>
 8003dba:	6983      	ldr	r3, [r0, #24]
 8003dbc:	b90b      	cbnz	r3, 8003dc2 <__swbuf_r+0x12>
 8003dbe:	f000 f9d1 	bl	8004164 <__sinit>
 8003dc2:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <__swbuf_r+0x98>)
 8003dc4:	429c      	cmp	r4, r3
 8003dc6:	d12b      	bne.n	8003e20 <__swbuf_r+0x70>
 8003dc8:	686c      	ldr	r4, [r5, #4]
 8003dca:	69a3      	ldr	r3, [r4, #24]
 8003dcc:	60a3      	str	r3, [r4, #8]
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	071a      	lsls	r2, r3, #28
 8003dd2:	d52f      	bpl.n	8003e34 <__swbuf_r+0x84>
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	b36b      	cbz	r3, 8003e34 <__swbuf_r+0x84>
 8003dd8:	6923      	ldr	r3, [r4, #16]
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1ac0      	subs	r0, r0, r3
 8003dde:	6963      	ldr	r3, [r4, #20]
 8003de0:	b2f6      	uxtb	r6, r6
 8003de2:	4283      	cmp	r3, r0
 8003de4:	4637      	mov	r7, r6
 8003de6:	dc04      	bgt.n	8003df2 <__swbuf_r+0x42>
 8003de8:	4621      	mov	r1, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	f000 f926 	bl	800403c <_fflush_r>
 8003df0:	bb30      	cbnz	r0, 8003e40 <__swbuf_r+0x90>
 8003df2:	68a3      	ldr	r3, [r4, #8]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60a3      	str	r3, [r4, #8]
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	6022      	str	r2, [r4, #0]
 8003dfe:	701e      	strb	r6, [r3, #0]
 8003e00:	6963      	ldr	r3, [r4, #20]
 8003e02:	3001      	adds	r0, #1
 8003e04:	4283      	cmp	r3, r0
 8003e06:	d004      	beq.n	8003e12 <__swbuf_r+0x62>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	07db      	lsls	r3, r3, #31
 8003e0c:	d506      	bpl.n	8003e1c <__swbuf_r+0x6c>
 8003e0e:	2e0a      	cmp	r6, #10
 8003e10:	d104      	bne.n	8003e1c <__swbuf_r+0x6c>
 8003e12:	4621      	mov	r1, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 f911 	bl	800403c <_fflush_r>
 8003e1a:	b988      	cbnz	r0, 8003e40 <__swbuf_r+0x90>
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <__swbuf_r+0x9c>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	d101      	bne.n	8003e2a <__swbuf_r+0x7a>
 8003e26:	68ac      	ldr	r4, [r5, #8]
 8003e28:	e7cf      	b.n	8003dca <__swbuf_r+0x1a>
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <__swbuf_r+0xa0>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	bf08      	it	eq
 8003e30:	68ec      	ldreq	r4, [r5, #12]
 8003e32:	e7ca      	b.n	8003dca <__swbuf_r+0x1a>
 8003e34:	4621      	mov	r1, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 f80c 	bl	8003e54 <__swsetup_r>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d0cb      	beq.n	8003dd8 <__swbuf_r+0x28>
 8003e40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e44:	e7ea      	b.n	8003e1c <__swbuf_r+0x6c>
 8003e46:	bf00      	nop
 8003e48:	0800533c 	.word	0x0800533c
 8003e4c:	0800535c 	.word	0x0800535c
 8003e50:	0800531c 	.word	0x0800531c

08003e54 <__swsetup_r>:
 8003e54:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <__swsetup_r+0xcc>)
 8003e56:	b570      	push	{r4, r5, r6, lr}
 8003e58:	681d      	ldr	r5, [r3, #0]
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	b125      	cbz	r5, 8003e6a <__swsetup_r+0x16>
 8003e60:	69ab      	ldr	r3, [r5, #24]
 8003e62:	b913      	cbnz	r3, 8003e6a <__swsetup_r+0x16>
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 f97d 	bl	8004164 <__sinit>
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <__swsetup_r+0xd0>)
 8003e6c:	429c      	cmp	r4, r3
 8003e6e:	d10f      	bne.n	8003e90 <__swsetup_r+0x3c>
 8003e70:	686c      	ldr	r4, [r5, #4]
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e78:	0719      	lsls	r1, r3, #28
 8003e7a:	d42c      	bmi.n	8003ed6 <__swsetup_r+0x82>
 8003e7c:	06dd      	lsls	r5, r3, #27
 8003e7e:	d411      	bmi.n	8003ea4 <__swsetup_r+0x50>
 8003e80:	2309      	movs	r3, #9
 8003e82:	6033      	str	r3, [r6, #0]
 8003e84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e8e:	e03e      	b.n	8003f0e <__swsetup_r+0xba>
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <__swsetup_r+0xd4>)
 8003e92:	429c      	cmp	r4, r3
 8003e94:	d101      	bne.n	8003e9a <__swsetup_r+0x46>
 8003e96:	68ac      	ldr	r4, [r5, #8]
 8003e98:	e7eb      	b.n	8003e72 <__swsetup_r+0x1e>
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <__swsetup_r+0xd8>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	bf08      	it	eq
 8003ea0:	68ec      	ldreq	r4, [r5, #12]
 8003ea2:	e7e6      	b.n	8003e72 <__swsetup_r+0x1e>
 8003ea4:	0758      	lsls	r0, r3, #29
 8003ea6:	d512      	bpl.n	8003ece <__swsetup_r+0x7a>
 8003ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eaa:	b141      	cbz	r1, 8003ebe <__swsetup_r+0x6a>
 8003eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	d002      	beq.n	8003eba <__swsetup_r+0x66>
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	f000 fa5b 	bl	8004370 <_free_r>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6063      	str	r3, [r4, #4]
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f043 0308 	orr.w	r3, r3, #8
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	b94b      	cbnz	r3, 8003eee <__swsetup_r+0x9a>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d003      	beq.n	8003eee <__swsetup_r+0x9a>
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 fa01 	bl	80042f0 <__smakebuf_r>
 8003eee:	89a0      	ldrh	r0, [r4, #12]
 8003ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ef4:	f010 0301 	ands.w	r3, r0, #1
 8003ef8:	d00a      	beq.n	8003f10 <__swsetup_r+0xbc>
 8003efa:	2300      	movs	r3, #0
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	6963      	ldr	r3, [r4, #20]
 8003f00:	425b      	negs	r3, r3
 8003f02:	61a3      	str	r3, [r4, #24]
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	b943      	cbnz	r3, 8003f1a <__swsetup_r+0xc6>
 8003f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f0c:	d1ba      	bne.n	8003e84 <__swsetup_r+0x30>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	0781      	lsls	r1, r0, #30
 8003f12:	bf58      	it	pl
 8003f14:	6963      	ldrpl	r3, [r4, #20]
 8003f16:	60a3      	str	r3, [r4, #8]
 8003f18:	e7f4      	b.n	8003f04 <__swsetup_r+0xb0>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e7f7      	b.n	8003f0e <__swsetup_r+0xba>
 8003f1e:	bf00      	nop
 8003f20:	20000010 	.word	0x20000010
 8003f24:	0800533c 	.word	0x0800533c
 8003f28:	0800535c 	.word	0x0800535c
 8003f2c:	0800531c 	.word	0x0800531c

08003f30 <__sflush_r>:
 8003f30:	898a      	ldrh	r2, [r1, #12]
 8003f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f36:	4605      	mov	r5, r0
 8003f38:	0710      	lsls	r0, r2, #28
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	d458      	bmi.n	8003ff0 <__sflush_r+0xc0>
 8003f3e:	684b      	ldr	r3, [r1, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	dc05      	bgt.n	8003f50 <__sflush_r+0x20>
 8003f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dc02      	bgt.n	8003f50 <__sflush_r+0x20>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f52:	2e00      	cmp	r6, #0
 8003f54:	d0f9      	beq.n	8003f4a <__sflush_r+0x1a>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f5c:	682f      	ldr	r7, [r5, #0]
 8003f5e:	602b      	str	r3, [r5, #0]
 8003f60:	d032      	beq.n	8003fc8 <__sflush_r+0x98>
 8003f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	075a      	lsls	r2, r3, #29
 8003f68:	d505      	bpl.n	8003f76 <__sflush_r+0x46>
 8003f6a:	6863      	ldr	r3, [r4, #4]
 8003f6c:	1ac0      	subs	r0, r0, r3
 8003f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f70:	b10b      	cbz	r3, 8003f76 <__sflush_r+0x46>
 8003f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f74:	1ac0      	subs	r0, r0, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f7c:	6a21      	ldr	r1, [r4, #32]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b0      	blx	r6
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	d106      	bne.n	8003f96 <__sflush_r+0x66>
 8003f88:	6829      	ldr	r1, [r5, #0]
 8003f8a:	291d      	cmp	r1, #29
 8003f8c:	d82c      	bhi.n	8003fe8 <__sflush_r+0xb8>
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <__sflush_r+0x108>)
 8003f90:	40ca      	lsrs	r2, r1
 8003f92:	07d6      	lsls	r6, r2, #31
 8003f94:	d528      	bpl.n	8003fe8 <__sflush_r+0xb8>
 8003f96:	2200      	movs	r2, #0
 8003f98:	6062      	str	r2, [r4, #4]
 8003f9a:	04d9      	lsls	r1, r3, #19
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	d504      	bpl.n	8003fac <__sflush_r+0x7c>
 8003fa2:	1c42      	adds	r2, r0, #1
 8003fa4:	d101      	bne.n	8003faa <__sflush_r+0x7a>
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	b903      	cbnz	r3, 8003fac <__sflush_r+0x7c>
 8003faa:	6560      	str	r0, [r4, #84]	; 0x54
 8003fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fae:	602f      	str	r7, [r5, #0]
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d0ca      	beq.n	8003f4a <__sflush_r+0x1a>
 8003fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d002      	beq.n	8003fc2 <__sflush_r+0x92>
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f9d7 	bl	8004370 <_free_r>
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8003fc6:	e7c1      	b.n	8003f4c <__sflush_r+0x1c>
 8003fc8:	6a21      	ldr	r1, [r4, #32]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4628      	mov	r0, r5
 8003fce:	47b0      	blx	r6
 8003fd0:	1c41      	adds	r1, r0, #1
 8003fd2:	d1c7      	bne.n	8003f64 <__sflush_r+0x34>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0c4      	beq.n	8003f64 <__sflush_r+0x34>
 8003fda:	2b1d      	cmp	r3, #29
 8003fdc:	d001      	beq.n	8003fe2 <__sflush_r+0xb2>
 8003fde:	2b16      	cmp	r3, #22
 8003fe0:	d101      	bne.n	8003fe6 <__sflush_r+0xb6>
 8003fe2:	602f      	str	r7, [r5, #0]
 8003fe4:	e7b1      	b.n	8003f4a <__sflush_r+0x1a>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	e7ad      	b.n	8003f4c <__sflush_r+0x1c>
 8003ff0:	690f      	ldr	r7, [r1, #16]
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	d0a9      	beq.n	8003f4a <__sflush_r+0x1a>
 8003ff6:	0793      	lsls	r3, r2, #30
 8003ff8:	680e      	ldr	r6, [r1, #0]
 8003ffa:	bf08      	it	eq
 8003ffc:	694b      	ldreq	r3, [r1, #20]
 8003ffe:	600f      	str	r7, [r1, #0]
 8004000:	bf18      	it	ne
 8004002:	2300      	movne	r3, #0
 8004004:	eba6 0807 	sub.w	r8, r6, r7
 8004008:	608b      	str	r3, [r1, #8]
 800400a:	f1b8 0f00 	cmp.w	r8, #0
 800400e:	dd9c      	ble.n	8003f4a <__sflush_r+0x1a>
 8004010:	6a21      	ldr	r1, [r4, #32]
 8004012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004014:	4643      	mov	r3, r8
 8004016:	463a      	mov	r2, r7
 8004018:	4628      	mov	r0, r5
 800401a:	47b0      	blx	r6
 800401c:	2800      	cmp	r0, #0
 800401e:	dc06      	bgt.n	800402e <__sflush_r+0xfe>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402c:	e78e      	b.n	8003f4c <__sflush_r+0x1c>
 800402e:	4407      	add	r7, r0
 8004030:	eba8 0800 	sub.w	r8, r8, r0
 8004034:	e7e9      	b.n	800400a <__sflush_r+0xda>
 8004036:	bf00      	nop
 8004038:	20400001 	.word	0x20400001

0800403c <_fflush_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	4605      	mov	r5, r0
 8004042:	460c      	mov	r4, r1
 8004044:	b913      	cbnz	r3, 800404c <_fflush_r+0x10>
 8004046:	2500      	movs	r5, #0
 8004048:	4628      	mov	r0, r5
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	b118      	cbz	r0, 8004056 <_fflush_r+0x1a>
 800404e:	6983      	ldr	r3, [r0, #24]
 8004050:	b90b      	cbnz	r3, 8004056 <_fflush_r+0x1a>
 8004052:	f000 f887 	bl	8004164 <__sinit>
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <_fflush_r+0x6c>)
 8004058:	429c      	cmp	r4, r3
 800405a:	d11b      	bne.n	8004094 <_fflush_r+0x58>
 800405c:	686c      	ldr	r4, [r5, #4]
 800405e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ef      	beq.n	8004046 <_fflush_r+0xa>
 8004066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004068:	07d0      	lsls	r0, r2, #31
 800406a:	d404      	bmi.n	8004076 <_fflush_r+0x3a>
 800406c:	0599      	lsls	r1, r3, #22
 800406e:	d402      	bmi.n	8004076 <_fflush_r+0x3a>
 8004070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004072:	f000 f915 	bl	80042a0 <__retarget_lock_acquire_recursive>
 8004076:	4628      	mov	r0, r5
 8004078:	4621      	mov	r1, r4
 800407a:	f7ff ff59 	bl	8003f30 <__sflush_r>
 800407e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004080:	07da      	lsls	r2, r3, #31
 8004082:	4605      	mov	r5, r0
 8004084:	d4e0      	bmi.n	8004048 <_fflush_r+0xc>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	059b      	lsls	r3, r3, #22
 800408a:	d4dd      	bmi.n	8004048 <_fflush_r+0xc>
 800408c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800408e:	f000 f908 	bl	80042a2 <__retarget_lock_release_recursive>
 8004092:	e7d9      	b.n	8004048 <_fflush_r+0xc>
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <_fflush_r+0x70>)
 8004096:	429c      	cmp	r4, r3
 8004098:	d101      	bne.n	800409e <_fflush_r+0x62>
 800409a:	68ac      	ldr	r4, [r5, #8]
 800409c:	e7df      	b.n	800405e <_fflush_r+0x22>
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <_fflush_r+0x74>)
 80040a0:	429c      	cmp	r4, r3
 80040a2:	bf08      	it	eq
 80040a4:	68ec      	ldreq	r4, [r5, #12]
 80040a6:	e7da      	b.n	800405e <_fflush_r+0x22>
 80040a8:	0800533c 	.word	0x0800533c
 80040ac:	0800535c 	.word	0x0800535c
 80040b0:	0800531c 	.word	0x0800531c

080040b4 <std>:
 80040b4:	2300      	movs	r3, #0
 80040b6:	b510      	push	{r4, lr}
 80040b8:	4604      	mov	r4, r0
 80040ba:	e9c0 3300 	strd	r3, r3, [r0]
 80040be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040c2:	6083      	str	r3, [r0, #8]
 80040c4:	8181      	strh	r1, [r0, #12]
 80040c6:	6643      	str	r3, [r0, #100]	; 0x64
 80040c8:	81c2      	strh	r2, [r0, #14]
 80040ca:	6183      	str	r3, [r0, #24]
 80040cc:	4619      	mov	r1, r3
 80040ce:	2208      	movs	r2, #8
 80040d0:	305c      	adds	r0, #92	; 0x5c
 80040d2:	f7ff fdc1 	bl	8003c58 <memset>
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <std+0x38>)
 80040d8:	6263      	str	r3, [r4, #36]	; 0x24
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <std+0x3c>)
 80040dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <std+0x40>)
 80040e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <std+0x44>)
 80040e4:	6224      	str	r4, [r4, #32]
 80040e6:	6323      	str	r3, [r4, #48]	; 0x30
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	bf00      	nop
 80040ec:	08004bbd 	.word	0x08004bbd
 80040f0:	08004bdf 	.word	0x08004bdf
 80040f4:	08004c17 	.word	0x08004c17
 80040f8:	08004c3b 	.word	0x08004c3b

080040fc <_cleanup_r>:
 80040fc:	4901      	ldr	r1, [pc, #4]	; (8004104 <_cleanup_r+0x8>)
 80040fe:	f000 b8af 	b.w	8004260 <_fwalk_reent>
 8004102:	bf00      	nop
 8004104:	0800403d 	.word	0x0800403d

08004108 <__sfmoreglue>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2268      	movs	r2, #104	; 0x68
 800410c:	1e4d      	subs	r5, r1, #1
 800410e:	4355      	muls	r5, r2
 8004110:	460e      	mov	r6, r1
 8004112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004116:	f000 f997 	bl	8004448 <_malloc_r>
 800411a:	4604      	mov	r4, r0
 800411c:	b140      	cbz	r0, 8004130 <__sfmoreglue+0x28>
 800411e:	2100      	movs	r1, #0
 8004120:	e9c0 1600 	strd	r1, r6, [r0]
 8004124:	300c      	adds	r0, #12
 8004126:	60a0      	str	r0, [r4, #8]
 8004128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800412c:	f7ff fd94 	bl	8003c58 <memset>
 8004130:	4620      	mov	r0, r4
 8004132:	bd70      	pop	{r4, r5, r6, pc}

08004134 <__sfp_lock_acquire>:
 8004134:	4801      	ldr	r0, [pc, #4]	; (800413c <__sfp_lock_acquire+0x8>)
 8004136:	f000 b8b3 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 800413a:	bf00      	nop
 800413c:	20000139 	.word	0x20000139

08004140 <__sfp_lock_release>:
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <__sfp_lock_release+0x8>)
 8004142:	f000 b8ae 	b.w	80042a2 <__retarget_lock_release_recursive>
 8004146:	bf00      	nop
 8004148:	20000139 	.word	0x20000139

0800414c <__sinit_lock_acquire>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__sinit_lock_acquire+0x8>)
 800414e:	f000 b8a7 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 8004152:	bf00      	nop
 8004154:	2000013a 	.word	0x2000013a

08004158 <__sinit_lock_release>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__sinit_lock_release+0x8>)
 800415a:	f000 b8a2 	b.w	80042a2 <__retarget_lock_release_recursive>
 800415e:	bf00      	nop
 8004160:	2000013a 	.word	0x2000013a

08004164 <__sinit>:
 8004164:	b510      	push	{r4, lr}
 8004166:	4604      	mov	r4, r0
 8004168:	f7ff fff0 	bl	800414c <__sinit_lock_acquire>
 800416c:	69a3      	ldr	r3, [r4, #24]
 800416e:	b11b      	cbz	r3, 8004178 <__sinit+0x14>
 8004170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004174:	f7ff bff0 	b.w	8004158 <__sinit_lock_release>
 8004178:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800417c:	6523      	str	r3, [r4, #80]	; 0x50
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <__sinit+0x68>)
 8004180:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <__sinit+0x6c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62a2      	str	r2, [r4, #40]	; 0x28
 8004186:	42a3      	cmp	r3, r4
 8004188:	bf04      	itt	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	61a3      	streq	r3, [r4, #24]
 800418e:	4620      	mov	r0, r4
 8004190:	f000 f820 	bl	80041d4 <__sfp>
 8004194:	6060      	str	r0, [r4, #4]
 8004196:	4620      	mov	r0, r4
 8004198:	f000 f81c 	bl	80041d4 <__sfp>
 800419c:	60a0      	str	r0, [r4, #8]
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 f818 	bl	80041d4 <__sfp>
 80041a4:	2200      	movs	r2, #0
 80041a6:	60e0      	str	r0, [r4, #12]
 80041a8:	2104      	movs	r1, #4
 80041aa:	6860      	ldr	r0, [r4, #4]
 80041ac:	f7ff ff82 	bl	80040b4 <std>
 80041b0:	68a0      	ldr	r0, [r4, #8]
 80041b2:	2201      	movs	r2, #1
 80041b4:	2109      	movs	r1, #9
 80041b6:	f7ff ff7d 	bl	80040b4 <std>
 80041ba:	68e0      	ldr	r0, [r4, #12]
 80041bc:	2202      	movs	r2, #2
 80041be:	2112      	movs	r1, #18
 80041c0:	f7ff ff78 	bl	80040b4 <std>
 80041c4:	2301      	movs	r3, #1
 80041c6:	61a3      	str	r3, [r4, #24]
 80041c8:	e7d2      	b.n	8004170 <__sinit+0xc>
 80041ca:	bf00      	nop
 80041cc:	08005318 	.word	0x08005318
 80041d0:	080040fd 	.word	0x080040fd

080041d4 <__sfp>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	4607      	mov	r7, r0
 80041d8:	f7ff ffac 	bl	8004134 <__sfp_lock_acquire>
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <__sfp+0x84>)
 80041de:	681e      	ldr	r6, [r3, #0]
 80041e0:	69b3      	ldr	r3, [r6, #24]
 80041e2:	b913      	cbnz	r3, 80041ea <__sfp+0x16>
 80041e4:	4630      	mov	r0, r6
 80041e6:	f7ff ffbd 	bl	8004164 <__sinit>
 80041ea:	3648      	adds	r6, #72	; 0x48
 80041ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	d503      	bpl.n	80041fc <__sfp+0x28>
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	b30b      	cbz	r3, 800423c <__sfp+0x68>
 80041f8:	6836      	ldr	r6, [r6, #0]
 80041fa:	e7f7      	b.n	80041ec <__sfp+0x18>
 80041fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004200:	b9d5      	cbnz	r5, 8004238 <__sfp+0x64>
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <__sfp+0x88>)
 8004204:	60e3      	str	r3, [r4, #12]
 8004206:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800420a:	6665      	str	r5, [r4, #100]	; 0x64
 800420c:	f000 f847 	bl	800429e <__retarget_lock_init_recursive>
 8004210:	f7ff ff96 	bl	8004140 <__sfp_lock_release>
 8004214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800421c:	6025      	str	r5, [r4, #0]
 800421e:	61a5      	str	r5, [r4, #24]
 8004220:	2208      	movs	r2, #8
 8004222:	4629      	mov	r1, r5
 8004224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004228:	f7ff fd16 	bl	8003c58 <memset>
 800422c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004234:	4620      	mov	r0, r4
 8004236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004238:	3468      	adds	r4, #104	; 0x68
 800423a:	e7d9      	b.n	80041f0 <__sfp+0x1c>
 800423c:	2104      	movs	r1, #4
 800423e:	4638      	mov	r0, r7
 8004240:	f7ff ff62 	bl	8004108 <__sfmoreglue>
 8004244:	4604      	mov	r4, r0
 8004246:	6030      	str	r0, [r6, #0]
 8004248:	2800      	cmp	r0, #0
 800424a:	d1d5      	bne.n	80041f8 <__sfp+0x24>
 800424c:	f7ff ff78 	bl	8004140 <__sfp_lock_release>
 8004250:	230c      	movs	r3, #12
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	e7ee      	b.n	8004234 <__sfp+0x60>
 8004256:	bf00      	nop
 8004258:	08005318 	.word	0x08005318
 800425c:	ffff0001 	.word	0xffff0001

08004260 <_fwalk_reent>:
 8004260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004264:	4606      	mov	r6, r0
 8004266:	4688      	mov	r8, r1
 8004268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800426c:	2700      	movs	r7, #0
 800426e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004272:	f1b9 0901 	subs.w	r9, r9, #1
 8004276:	d505      	bpl.n	8004284 <_fwalk_reent+0x24>
 8004278:	6824      	ldr	r4, [r4, #0]
 800427a:	2c00      	cmp	r4, #0
 800427c:	d1f7      	bne.n	800426e <_fwalk_reent+0xe>
 800427e:	4638      	mov	r0, r7
 8004280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004284:	89ab      	ldrh	r3, [r5, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d907      	bls.n	800429a <_fwalk_reent+0x3a>
 800428a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800428e:	3301      	adds	r3, #1
 8004290:	d003      	beq.n	800429a <_fwalk_reent+0x3a>
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	47c0      	blx	r8
 8004298:	4307      	orrs	r7, r0
 800429a:	3568      	adds	r5, #104	; 0x68
 800429c:	e7e9      	b.n	8004272 <_fwalk_reent+0x12>

0800429e <__retarget_lock_init_recursive>:
 800429e:	4770      	bx	lr

080042a0 <__retarget_lock_acquire_recursive>:
 80042a0:	4770      	bx	lr

080042a2 <__retarget_lock_release_recursive>:
 80042a2:	4770      	bx	lr

080042a4 <__swhatbuf_r>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	460e      	mov	r6, r1
 80042a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ac:	2900      	cmp	r1, #0
 80042ae:	b096      	sub	sp, #88	; 0x58
 80042b0:	4614      	mov	r4, r2
 80042b2:	461d      	mov	r5, r3
 80042b4:	da08      	bge.n	80042c8 <__swhatbuf_r+0x24>
 80042b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	602a      	str	r2, [r5, #0]
 80042be:	061a      	lsls	r2, r3, #24
 80042c0:	d410      	bmi.n	80042e4 <__swhatbuf_r+0x40>
 80042c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c6:	e00e      	b.n	80042e6 <__swhatbuf_r+0x42>
 80042c8:	466a      	mov	r2, sp
 80042ca:	f000 fcdd 	bl	8004c88 <_fstat_r>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	dbf1      	blt.n	80042b6 <__swhatbuf_r+0x12>
 80042d2:	9a01      	ldr	r2, [sp, #4]
 80042d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042dc:	425a      	negs	r2, r3
 80042de:	415a      	adcs	r2, r3
 80042e0:	602a      	str	r2, [r5, #0]
 80042e2:	e7ee      	b.n	80042c2 <__swhatbuf_r+0x1e>
 80042e4:	2340      	movs	r3, #64	; 0x40
 80042e6:	2000      	movs	r0, #0
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	b016      	add	sp, #88	; 0x58
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080042f0 <__smakebuf_r>:
 80042f0:	898b      	ldrh	r3, [r1, #12]
 80042f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042f4:	079d      	lsls	r5, r3, #30
 80042f6:	4606      	mov	r6, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	d507      	bpl.n	800430c <__smakebuf_r+0x1c>
 80042fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	2301      	movs	r3, #1
 8004306:	6163      	str	r3, [r4, #20]
 8004308:	b002      	add	sp, #8
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	ab01      	add	r3, sp, #4
 800430e:	466a      	mov	r2, sp
 8004310:	f7ff ffc8 	bl	80042a4 <__swhatbuf_r>
 8004314:	9900      	ldr	r1, [sp, #0]
 8004316:	4605      	mov	r5, r0
 8004318:	4630      	mov	r0, r6
 800431a:	f000 f895 	bl	8004448 <_malloc_r>
 800431e:	b948      	cbnz	r0, 8004334 <__smakebuf_r+0x44>
 8004320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004324:	059a      	lsls	r2, r3, #22
 8004326:	d4ef      	bmi.n	8004308 <__smakebuf_r+0x18>
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	e7e3      	b.n	80042fc <__smakebuf_r+0xc>
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <__smakebuf_r+0x7c>)
 8004336:	62b3      	str	r3, [r6, #40]	; 0x28
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	6020      	str	r0, [r4, #0]
 800433c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	9b00      	ldr	r3, [sp, #0]
 8004344:	6163      	str	r3, [r4, #20]
 8004346:	9b01      	ldr	r3, [sp, #4]
 8004348:	6120      	str	r0, [r4, #16]
 800434a:	b15b      	cbz	r3, 8004364 <__smakebuf_r+0x74>
 800434c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004350:	4630      	mov	r0, r6
 8004352:	f000 fcab 	bl	8004cac <_isatty_r>
 8004356:	b128      	cbz	r0, 8004364 <__smakebuf_r+0x74>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	89a0      	ldrh	r0, [r4, #12]
 8004366:	4305      	orrs	r5, r0
 8004368:	81a5      	strh	r5, [r4, #12]
 800436a:	e7cd      	b.n	8004308 <__smakebuf_r+0x18>
 800436c:	080040fd 	.word	0x080040fd

08004370 <_free_r>:
 8004370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004372:	2900      	cmp	r1, #0
 8004374:	d044      	beq.n	8004400 <_free_r+0x90>
 8004376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800437a:	9001      	str	r0, [sp, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f1a1 0404 	sub.w	r4, r1, #4
 8004382:	bfb8      	it	lt
 8004384:	18e4      	addlt	r4, r4, r3
 8004386:	f000 fcb3 	bl	8004cf0 <__malloc_lock>
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <_free_r+0x94>)
 800438c:	9801      	ldr	r0, [sp, #4]
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	b933      	cbnz	r3, 80043a0 <_free_r+0x30>
 8004392:	6063      	str	r3, [r4, #4]
 8004394:	6014      	str	r4, [r2, #0]
 8004396:	b003      	add	sp, #12
 8004398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800439c:	f000 bcae 	b.w	8004cfc <__malloc_unlock>
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	d908      	bls.n	80043b6 <_free_r+0x46>
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	1961      	adds	r1, r4, r5
 80043a8:	428b      	cmp	r3, r1
 80043aa:	bf01      	itttt	eq
 80043ac:	6819      	ldreq	r1, [r3, #0]
 80043ae:	685b      	ldreq	r3, [r3, #4]
 80043b0:	1949      	addeq	r1, r1, r5
 80043b2:	6021      	streq	r1, [r4, #0]
 80043b4:	e7ed      	b.n	8004392 <_free_r+0x22>
 80043b6:	461a      	mov	r2, r3
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	b10b      	cbz	r3, 80043c0 <_free_r+0x50>
 80043bc:	42a3      	cmp	r3, r4
 80043be:	d9fa      	bls.n	80043b6 <_free_r+0x46>
 80043c0:	6811      	ldr	r1, [r2, #0]
 80043c2:	1855      	adds	r5, r2, r1
 80043c4:	42a5      	cmp	r5, r4
 80043c6:	d10b      	bne.n	80043e0 <_free_r+0x70>
 80043c8:	6824      	ldr	r4, [r4, #0]
 80043ca:	4421      	add	r1, r4
 80043cc:	1854      	adds	r4, r2, r1
 80043ce:	42a3      	cmp	r3, r4
 80043d0:	6011      	str	r1, [r2, #0]
 80043d2:	d1e0      	bne.n	8004396 <_free_r+0x26>
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	4421      	add	r1, r4
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	e7da      	b.n	8004396 <_free_r+0x26>
 80043e0:	d902      	bls.n	80043e8 <_free_r+0x78>
 80043e2:	230c      	movs	r3, #12
 80043e4:	6003      	str	r3, [r0, #0]
 80043e6:	e7d6      	b.n	8004396 <_free_r+0x26>
 80043e8:	6825      	ldr	r5, [r4, #0]
 80043ea:	1961      	adds	r1, r4, r5
 80043ec:	428b      	cmp	r3, r1
 80043ee:	bf04      	itt	eq
 80043f0:	6819      	ldreq	r1, [r3, #0]
 80043f2:	685b      	ldreq	r3, [r3, #4]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	bf04      	itt	eq
 80043f8:	1949      	addeq	r1, r1, r5
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	6054      	str	r4, [r2, #4]
 80043fe:	e7ca      	b.n	8004396 <_free_r+0x26>
 8004400:	b003      	add	sp, #12
 8004402:	bd30      	pop	{r4, r5, pc}
 8004404:	2000013c 	.word	0x2000013c

08004408 <sbrk_aligned>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4e0e      	ldr	r6, [pc, #56]	; (8004444 <sbrk_aligned+0x3c>)
 800440c:	460c      	mov	r4, r1
 800440e:	6831      	ldr	r1, [r6, #0]
 8004410:	4605      	mov	r5, r0
 8004412:	b911      	cbnz	r1, 800441a <sbrk_aligned+0x12>
 8004414:	f000 fbc2 	bl	8004b9c <_sbrk_r>
 8004418:	6030      	str	r0, [r6, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fbbd 	bl	8004b9c <_sbrk_r>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d00a      	beq.n	800443c <sbrk_aligned+0x34>
 8004426:	1cc4      	adds	r4, r0, #3
 8004428:	f024 0403 	bic.w	r4, r4, #3
 800442c:	42a0      	cmp	r0, r4
 800442e:	d007      	beq.n	8004440 <sbrk_aligned+0x38>
 8004430:	1a21      	subs	r1, r4, r0
 8004432:	4628      	mov	r0, r5
 8004434:	f000 fbb2 	bl	8004b9c <_sbrk_r>
 8004438:	3001      	adds	r0, #1
 800443a:	d101      	bne.n	8004440 <sbrk_aligned+0x38>
 800443c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004440:	4620      	mov	r0, r4
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	20000140 	.word	0x20000140

08004448 <_malloc_r>:
 8004448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444c:	1ccd      	adds	r5, r1, #3
 800444e:	f025 0503 	bic.w	r5, r5, #3
 8004452:	3508      	adds	r5, #8
 8004454:	2d0c      	cmp	r5, #12
 8004456:	bf38      	it	cc
 8004458:	250c      	movcc	r5, #12
 800445a:	2d00      	cmp	r5, #0
 800445c:	4607      	mov	r7, r0
 800445e:	db01      	blt.n	8004464 <_malloc_r+0x1c>
 8004460:	42a9      	cmp	r1, r5
 8004462:	d905      	bls.n	8004470 <_malloc_r+0x28>
 8004464:	230c      	movs	r3, #12
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	2600      	movs	r6, #0
 800446a:	4630      	mov	r0, r6
 800446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004470:	4e2e      	ldr	r6, [pc, #184]	; (800452c <_malloc_r+0xe4>)
 8004472:	f000 fc3d 	bl	8004cf0 <__malloc_lock>
 8004476:	6833      	ldr	r3, [r6, #0]
 8004478:	461c      	mov	r4, r3
 800447a:	bb34      	cbnz	r4, 80044ca <_malloc_r+0x82>
 800447c:	4629      	mov	r1, r5
 800447e:	4638      	mov	r0, r7
 8004480:	f7ff ffc2 	bl	8004408 <sbrk_aligned>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	4604      	mov	r4, r0
 8004488:	d14d      	bne.n	8004526 <_malloc_r+0xde>
 800448a:	6834      	ldr	r4, [r6, #0]
 800448c:	4626      	mov	r6, r4
 800448e:	2e00      	cmp	r6, #0
 8004490:	d140      	bne.n	8004514 <_malloc_r+0xcc>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	4631      	mov	r1, r6
 8004496:	4638      	mov	r0, r7
 8004498:	eb04 0803 	add.w	r8, r4, r3
 800449c:	f000 fb7e 	bl	8004b9c <_sbrk_r>
 80044a0:	4580      	cmp	r8, r0
 80044a2:	d13a      	bne.n	800451a <_malloc_r+0xd2>
 80044a4:	6821      	ldr	r1, [r4, #0]
 80044a6:	3503      	adds	r5, #3
 80044a8:	1a6d      	subs	r5, r5, r1
 80044aa:	f025 0503 	bic.w	r5, r5, #3
 80044ae:	3508      	adds	r5, #8
 80044b0:	2d0c      	cmp	r5, #12
 80044b2:	bf38      	it	cc
 80044b4:	250c      	movcc	r5, #12
 80044b6:	4629      	mov	r1, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ffa5 	bl	8004408 <sbrk_aligned>
 80044be:	3001      	adds	r0, #1
 80044c0:	d02b      	beq.n	800451a <_malloc_r+0xd2>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	442b      	add	r3, r5
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	e00e      	b.n	80044e8 <_malloc_r+0xa0>
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	1b52      	subs	r2, r2, r5
 80044ce:	d41e      	bmi.n	800450e <_malloc_r+0xc6>
 80044d0:	2a0b      	cmp	r2, #11
 80044d2:	d916      	bls.n	8004502 <_malloc_r+0xba>
 80044d4:	1961      	adds	r1, r4, r5
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	bf18      	it	ne
 80044dc:	6059      	strne	r1, [r3, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	bf08      	it	eq
 80044e2:	6031      	streq	r1, [r6, #0]
 80044e4:	5162      	str	r2, [r4, r5]
 80044e6:	604b      	str	r3, [r1, #4]
 80044e8:	4638      	mov	r0, r7
 80044ea:	f104 060b 	add.w	r6, r4, #11
 80044ee:	f000 fc05 	bl	8004cfc <__malloc_unlock>
 80044f2:	f026 0607 	bic.w	r6, r6, #7
 80044f6:	1d23      	adds	r3, r4, #4
 80044f8:	1af2      	subs	r2, r6, r3
 80044fa:	d0b6      	beq.n	800446a <_malloc_r+0x22>
 80044fc:	1b9b      	subs	r3, r3, r6
 80044fe:	50a3      	str	r3, [r4, r2]
 8004500:	e7b3      	b.n	800446a <_malloc_r+0x22>
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	42a3      	cmp	r3, r4
 8004506:	bf0c      	ite	eq
 8004508:	6032      	streq	r2, [r6, #0]
 800450a:	605a      	strne	r2, [r3, #4]
 800450c:	e7ec      	b.n	80044e8 <_malloc_r+0xa0>
 800450e:	4623      	mov	r3, r4
 8004510:	6864      	ldr	r4, [r4, #4]
 8004512:	e7b2      	b.n	800447a <_malloc_r+0x32>
 8004514:	4634      	mov	r4, r6
 8004516:	6876      	ldr	r6, [r6, #4]
 8004518:	e7b9      	b.n	800448e <_malloc_r+0x46>
 800451a:	230c      	movs	r3, #12
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4638      	mov	r0, r7
 8004520:	f000 fbec 	bl	8004cfc <__malloc_unlock>
 8004524:	e7a1      	b.n	800446a <_malloc_r+0x22>
 8004526:	6025      	str	r5, [r4, #0]
 8004528:	e7de      	b.n	80044e8 <_malloc_r+0xa0>
 800452a:	bf00      	nop
 800452c:	2000013c 	.word	0x2000013c

08004530 <__sfputc_r>:
 8004530:	6893      	ldr	r3, [r2, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	b410      	push	{r4}
 8004538:	6093      	str	r3, [r2, #8]
 800453a:	da08      	bge.n	800454e <__sfputc_r+0x1e>
 800453c:	6994      	ldr	r4, [r2, #24]
 800453e:	42a3      	cmp	r3, r4
 8004540:	db01      	blt.n	8004546 <__sfputc_r+0x16>
 8004542:	290a      	cmp	r1, #10
 8004544:	d103      	bne.n	800454e <__sfputc_r+0x1e>
 8004546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800454a:	f7ff bc31 	b.w	8003db0 <__swbuf_r>
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	1c58      	adds	r0, r3, #1
 8004552:	6010      	str	r0, [r2, #0]
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	4608      	mov	r0, r1
 8004558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455c:	4770      	bx	lr

0800455e <__sfputs_r>:
 800455e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004560:	4606      	mov	r6, r0
 8004562:	460f      	mov	r7, r1
 8004564:	4614      	mov	r4, r2
 8004566:	18d5      	adds	r5, r2, r3
 8004568:	42ac      	cmp	r4, r5
 800456a:	d101      	bne.n	8004570 <__sfputs_r+0x12>
 800456c:	2000      	movs	r0, #0
 800456e:	e007      	b.n	8004580 <__sfputs_r+0x22>
 8004570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004574:	463a      	mov	r2, r7
 8004576:	4630      	mov	r0, r6
 8004578:	f7ff ffda 	bl	8004530 <__sfputc_r>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d1f3      	bne.n	8004568 <__sfputs_r+0xa>
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004584 <_vfiprintf_r>:
 8004584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004588:	460d      	mov	r5, r1
 800458a:	b09d      	sub	sp, #116	; 0x74
 800458c:	4614      	mov	r4, r2
 800458e:	4698      	mov	r8, r3
 8004590:	4606      	mov	r6, r0
 8004592:	b118      	cbz	r0, 800459c <_vfiprintf_r+0x18>
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b90b      	cbnz	r3, 800459c <_vfiprintf_r+0x18>
 8004598:	f7ff fde4 	bl	8004164 <__sinit>
 800459c:	4b89      	ldr	r3, [pc, #548]	; (80047c4 <_vfiprintf_r+0x240>)
 800459e:	429d      	cmp	r5, r3
 80045a0:	d11b      	bne.n	80045da <_vfiprintf_r+0x56>
 80045a2:	6875      	ldr	r5, [r6, #4]
 80045a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045a6:	07d9      	lsls	r1, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_vfiprintf_r+0x32>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_vfiprintf_r+0x32>
 80045b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045b2:	f7ff fe75 	bl	80042a0 <__retarget_lock_acquire_recursive>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	071b      	lsls	r3, r3, #28
 80045ba:	d501      	bpl.n	80045c0 <_vfiprintf_r+0x3c>
 80045bc:	692b      	ldr	r3, [r5, #16]
 80045be:	b9eb      	cbnz	r3, 80045fc <_vfiprintf_r+0x78>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7ff fc46 	bl	8003e54 <__swsetup_r>
 80045c8:	b1c0      	cbz	r0, 80045fc <_vfiprintf_r+0x78>
 80045ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045cc:	07dc      	lsls	r4, r3, #31
 80045ce:	d50e      	bpl.n	80045ee <_vfiprintf_r+0x6a>
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045d4:	b01d      	add	sp, #116	; 0x74
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	4b7b      	ldr	r3, [pc, #492]	; (80047c8 <_vfiprintf_r+0x244>)
 80045dc:	429d      	cmp	r5, r3
 80045de:	d101      	bne.n	80045e4 <_vfiprintf_r+0x60>
 80045e0:	68b5      	ldr	r5, [r6, #8]
 80045e2:	e7df      	b.n	80045a4 <_vfiprintf_r+0x20>
 80045e4:	4b79      	ldr	r3, [pc, #484]	; (80047cc <_vfiprintf_r+0x248>)
 80045e6:	429d      	cmp	r5, r3
 80045e8:	bf08      	it	eq
 80045ea:	68f5      	ldreq	r5, [r6, #12]
 80045ec:	e7da      	b.n	80045a4 <_vfiprintf_r+0x20>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	0598      	lsls	r0, r3, #22
 80045f2:	d4ed      	bmi.n	80045d0 <_vfiprintf_r+0x4c>
 80045f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f6:	f7ff fe54 	bl	80042a2 <__retarget_lock_release_recursive>
 80045fa:	e7e9      	b.n	80045d0 <_vfiprintf_r+0x4c>
 80045fc:	2300      	movs	r3, #0
 80045fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004600:	2320      	movs	r3, #32
 8004602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004606:	f8cd 800c 	str.w	r8, [sp, #12]
 800460a:	2330      	movs	r3, #48	; 0x30
 800460c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047d0 <_vfiprintf_r+0x24c>
 8004610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004614:	f04f 0901 	mov.w	r9, #1
 8004618:	4623      	mov	r3, r4
 800461a:	469a      	mov	sl, r3
 800461c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004620:	b10a      	cbz	r2, 8004626 <_vfiprintf_r+0xa2>
 8004622:	2a25      	cmp	r2, #37	; 0x25
 8004624:	d1f9      	bne.n	800461a <_vfiprintf_r+0x96>
 8004626:	ebba 0b04 	subs.w	fp, sl, r4
 800462a:	d00b      	beq.n	8004644 <_vfiprintf_r+0xc0>
 800462c:	465b      	mov	r3, fp
 800462e:	4622      	mov	r2, r4
 8004630:	4629      	mov	r1, r5
 8004632:	4630      	mov	r0, r6
 8004634:	f7ff ff93 	bl	800455e <__sfputs_r>
 8004638:	3001      	adds	r0, #1
 800463a:	f000 80aa 	beq.w	8004792 <_vfiprintf_r+0x20e>
 800463e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004640:	445a      	add	r2, fp
 8004642:	9209      	str	r2, [sp, #36]	; 0x24
 8004644:	f89a 3000 	ldrb.w	r3, [sl]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a2 	beq.w	8004792 <_vfiprintf_r+0x20e>
 800464e:	2300      	movs	r3, #0
 8004650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004658:	f10a 0a01 	add.w	sl, sl, #1
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	9307      	str	r3, [sp, #28]
 8004660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004664:	931a      	str	r3, [sp, #104]	; 0x68
 8004666:	4654      	mov	r4, sl
 8004668:	2205      	movs	r2, #5
 800466a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466e:	4858      	ldr	r0, [pc, #352]	; (80047d0 <_vfiprintf_r+0x24c>)
 8004670:	f7fb fdae 	bl	80001d0 <memchr>
 8004674:	9a04      	ldr	r2, [sp, #16]
 8004676:	b9d8      	cbnz	r0, 80046b0 <_vfiprintf_r+0x12c>
 8004678:	06d1      	lsls	r1, r2, #27
 800467a:	bf44      	itt	mi
 800467c:	2320      	movmi	r3, #32
 800467e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004682:	0713      	lsls	r3, r2, #28
 8004684:	bf44      	itt	mi
 8004686:	232b      	movmi	r3, #43	; 0x2b
 8004688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468c:	f89a 3000 	ldrb.w	r3, [sl]
 8004690:	2b2a      	cmp	r3, #42	; 0x2a
 8004692:	d015      	beq.n	80046c0 <_vfiprintf_r+0x13c>
 8004694:	9a07      	ldr	r2, [sp, #28]
 8004696:	4654      	mov	r4, sl
 8004698:	2000      	movs	r0, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a4:	3b30      	subs	r3, #48	; 0x30
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d94e      	bls.n	8004748 <_vfiprintf_r+0x1c4>
 80046aa:	b1b0      	cbz	r0, 80046da <_vfiprintf_r+0x156>
 80046ac:	9207      	str	r2, [sp, #28]
 80046ae:	e014      	b.n	80046da <_vfiprintf_r+0x156>
 80046b0:	eba0 0308 	sub.w	r3, r0, r8
 80046b4:	fa09 f303 	lsl.w	r3, r9, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	46a2      	mov	sl, r4
 80046be:	e7d2      	b.n	8004666 <_vfiprintf_r+0xe2>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	1d19      	adds	r1, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	9103      	str	r1, [sp, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfbb      	ittet	lt
 80046cc:	425b      	neglt	r3, r3
 80046ce:	f042 0202 	orrlt.w	r2, r2, #2
 80046d2:	9307      	strge	r3, [sp, #28]
 80046d4:	9307      	strlt	r3, [sp, #28]
 80046d6:	bfb8      	it	lt
 80046d8:	9204      	strlt	r2, [sp, #16]
 80046da:	7823      	ldrb	r3, [r4, #0]
 80046dc:	2b2e      	cmp	r3, #46	; 0x2e
 80046de:	d10c      	bne.n	80046fa <_vfiprintf_r+0x176>
 80046e0:	7863      	ldrb	r3, [r4, #1]
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d135      	bne.n	8004752 <_vfiprintf_r+0x1ce>
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9203      	str	r2, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046f6:	3402      	adds	r4, #2
 80046f8:	9305      	str	r3, [sp, #20]
 80046fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047e0 <_vfiprintf_r+0x25c>
 80046fe:	7821      	ldrb	r1, [r4, #0]
 8004700:	2203      	movs	r2, #3
 8004702:	4650      	mov	r0, sl
 8004704:	f7fb fd64 	bl	80001d0 <memchr>
 8004708:	b140      	cbz	r0, 800471c <_vfiprintf_r+0x198>
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	eba0 000a 	sub.w	r0, r0, sl
 8004710:	fa03 f000 	lsl.w	r0, r3, r0
 8004714:	9b04      	ldr	r3, [sp, #16]
 8004716:	4303      	orrs	r3, r0
 8004718:	3401      	adds	r4, #1
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	482c      	ldr	r0, [pc, #176]	; (80047d4 <_vfiprintf_r+0x250>)
 8004722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004726:	2206      	movs	r2, #6
 8004728:	f7fb fd52 	bl	80001d0 <memchr>
 800472c:	2800      	cmp	r0, #0
 800472e:	d03f      	beq.n	80047b0 <_vfiprintf_r+0x22c>
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <_vfiprintf_r+0x254>)
 8004732:	bb1b      	cbnz	r3, 800477c <_vfiprintf_r+0x1f8>
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	3307      	adds	r3, #7
 8004738:	f023 0307 	bic.w	r3, r3, #7
 800473c:	3308      	adds	r3, #8
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	443b      	add	r3, r7
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	e767      	b.n	8004618 <_vfiprintf_r+0x94>
 8004748:	fb0c 3202 	mla	r2, ip, r2, r3
 800474c:	460c      	mov	r4, r1
 800474e:	2001      	movs	r0, #1
 8004750:	e7a5      	b.n	800469e <_vfiprintf_r+0x11a>
 8004752:	2300      	movs	r3, #0
 8004754:	3401      	adds	r4, #1
 8004756:	9305      	str	r3, [sp, #20]
 8004758:	4619      	mov	r1, r3
 800475a:	f04f 0c0a 	mov.w	ip, #10
 800475e:	4620      	mov	r0, r4
 8004760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004764:	3a30      	subs	r2, #48	; 0x30
 8004766:	2a09      	cmp	r2, #9
 8004768:	d903      	bls.n	8004772 <_vfiprintf_r+0x1ee>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0c5      	beq.n	80046fa <_vfiprintf_r+0x176>
 800476e:	9105      	str	r1, [sp, #20]
 8004770:	e7c3      	b.n	80046fa <_vfiprintf_r+0x176>
 8004772:	fb0c 2101 	mla	r1, ip, r1, r2
 8004776:	4604      	mov	r4, r0
 8004778:	2301      	movs	r3, #1
 800477a:	e7f0      	b.n	800475e <_vfiprintf_r+0x1da>
 800477c:	ab03      	add	r3, sp, #12
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	462a      	mov	r2, r5
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <_vfiprintf_r+0x258>)
 8004784:	a904      	add	r1, sp, #16
 8004786:	4630      	mov	r0, r6
 8004788:	f3af 8000 	nop.w
 800478c:	4607      	mov	r7, r0
 800478e:	1c78      	adds	r0, r7, #1
 8004790:	d1d6      	bne.n	8004740 <_vfiprintf_r+0x1bc>
 8004792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	d405      	bmi.n	80047a4 <_vfiprintf_r+0x220>
 8004798:	89ab      	ldrh	r3, [r5, #12]
 800479a:	059a      	lsls	r2, r3, #22
 800479c:	d402      	bmi.n	80047a4 <_vfiprintf_r+0x220>
 800479e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047a0:	f7ff fd7f 	bl	80042a2 <__retarget_lock_release_recursive>
 80047a4:	89ab      	ldrh	r3, [r5, #12]
 80047a6:	065b      	lsls	r3, r3, #25
 80047a8:	f53f af12 	bmi.w	80045d0 <_vfiprintf_r+0x4c>
 80047ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ae:	e711      	b.n	80045d4 <_vfiprintf_r+0x50>
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <_vfiprintf_r+0x258>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f880 	bl	80048c0 <_printf_i>
 80047c0:	e7e4      	b.n	800478c <_vfiprintf_r+0x208>
 80047c2:	bf00      	nop
 80047c4:	0800533c 	.word	0x0800533c
 80047c8:	0800535c 	.word	0x0800535c
 80047cc:	0800531c 	.word	0x0800531c
 80047d0:	0800537c 	.word	0x0800537c
 80047d4:	08005386 	.word	0x08005386
 80047d8:	00000000 	.word	0x00000000
 80047dc:	0800455f 	.word	0x0800455f
 80047e0:	08005382 	.word	0x08005382

080047e4 <_printf_common>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	4616      	mov	r6, r2
 80047ea:	4699      	mov	r9, r3
 80047ec:	688a      	ldr	r2, [r1, #8]
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bfb8      	it	lt
 80047f8:	4613      	movlt	r3, r2
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004800:	4607      	mov	r7, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b10a      	cbz	r2, 800480a <_printf_common+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	6833      	ldrmi	r3, [r6, #0]
 8004812:	3302      	addmi	r3, #2
 8004814:	6033      	strmi	r3, [r6, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	f015 0506 	ands.w	r5, r5, #6
 800481c:	d106      	bne.n	800482c <_printf_common+0x48>
 800481e:	f104 0a19 	add.w	sl, r4, #25
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	6832      	ldr	r2, [r6, #0]
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	42ab      	cmp	r3, r5
 800482a:	dc26      	bgt.n	800487a <_printf_common+0x96>
 800482c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004830:	1e13      	subs	r3, r2, #0
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	bf18      	it	ne
 8004836:	2301      	movne	r3, #1
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d42b      	bmi.n	8004894 <_printf_common+0xb0>
 800483c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d01e      	beq.n	8004888 <_printf_common+0xa4>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	68e5      	ldr	r5, [r4, #12]
 800484e:	6832      	ldr	r2, [r6, #0]
 8004850:	f003 0306 	and.w	r3, r3, #6
 8004854:	2b04      	cmp	r3, #4
 8004856:	bf08      	it	eq
 8004858:	1aad      	subeq	r5, r5, r2
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	6922      	ldr	r2, [r4, #16]
 800485e:	bf0c      	ite	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	2500      	movne	r5, #0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfc4      	itt	gt
 800486a:	1a9b      	subgt	r3, r3, r2
 800486c:	18ed      	addgt	r5, r5, r3
 800486e:	2600      	movs	r6, #0
 8004870:	341a      	adds	r4, #26
 8004872:	42b5      	cmp	r5, r6
 8004874:	d11a      	bne.n	80048ac <_printf_common+0xc8>
 8004876:	2000      	movs	r0, #0
 8004878:	e008      	b.n	800488c <_printf_common+0xa8>
 800487a:	2301      	movs	r3, #1
 800487c:	4652      	mov	r2, sl
 800487e:	4649      	mov	r1, r9
 8004880:	4638      	mov	r0, r7
 8004882:	47c0      	blx	r8
 8004884:	3001      	adds	r0, #1
 8004886:	d103      	bne.n	8004890 <_printf_common+0xac>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	3501      	adds	r5, #1
 8004892:	e7c6      	b.n	8004822 <_printf_common+0x3e>
 8004894:	18e1      	adds	r1, r4, r3
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	2030      	movs	r0, #48	; 0x30
 800489a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800489e:	4422      	add	r2, r4
 80048a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a8:	3302      	adds	r3, #2
 80048aa:	e7c7      	b.n	800483c <_printf_common+0x58>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4622      	mov	r2, r4
 80048b0:	4649      	mov	r1, r9
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c0      	blx	r8
 80048b6:	3001      	adds	r0, #1
 80048b8:	d0e6      	beq.n	8004888 <_printf_common+0xa4>
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7d9      	b.n	8004872 <_printf_common+0x8e>
	...

080048c0 <_printf_i>:
 80048c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	7e0f      	ldrb	r7, [r1, #24]
 80048c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048c8:	2f78      	cmp	r7, #120	; 0x78
 80048ca:	4691      	mov	r9, r2
 80048cc:	4680      	mov	r8, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	469a      	mov	sl, r3
 80048d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048d6:	d807      	bhi.n	80048e8 <_printf_i+0x28>
 80048d8:	2f62      	cmp	r7, #98	; 0x62
 80048da:	d80a      	bhi.n	80048f2 <_printf_i+0x32>
 80048dc:	2f00      	cmp	r7, #0
 80048de:	f000 80d8 	beq.w	8004a92 <_printf_i+0x1d2>
 80048e2:	2f58      	cmp	r7, #88	; 0x58
 80048e4:	f000 80a3 	beq.w	8004a2e <_printf_i+0x16e>
 80048e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f0:	e03a      	b.n	8004968 <_printf_i+0xa8>
 80048f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048f6:	2b15      	cmp	r3, #21
 80048f8:	d8f6      	bhi.n	80048e8 <_printf_i+0x28>
 80048fa:	a101      	add	r1, pc, #4	; (adr r1, 8004900 <_printf_i+0x40>)
 80048fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004900:	08004959 	.word	0x08004959
 8004904:	0800496d 	.word	0x0800496d
 8004908:	080048e9 	.word	0x080048e9
 800490c:	080048e9 	.word	0x080048e9
 8004910:	080048e9 	.word	0x080048e9
 8004914:	080048e9 	.word	0x080048e9
 8004918:	0800496d 	.word	0x0800496d
 800491c:	080048e9 	.word	0x080048e9
 8004920:	080048e9 	.word	0x080048e9
 8004924:	080048e9 	.word	0x080048e9
 8004928:	080048e9 	.word	0x080048e9
 800492c:	08004a79 	.word	0x08004a79
 8004930:	0800499d 	.word	0x0800499d
 8004934:	08004a5b 	.word	0x08004a5b
 8004938:	080048e9 	.word	0x080048e9
 800493c:	080048e9 	.word	0x080048e9
 8004940:	08004a9b 	.word	0x08004a9b
 8004944:	080048e9 	.word	0x080048e9
 8004948:	0800499d 	.word	0x0800499d
 800494c:	080048e9 	.word	0x080048e9
 8004950:	080048e9 	.word	0x080048e9
 8004954:	08004a63 	.word	0x08004a63
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	602a      	str	r2, [r5, #0]
 8004960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004968:	2301      	movs	r3, #1
 800496a:	e0a3      	b.n	8004ab4 <_printf_i+0x1f4>
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	6829      	ldr	r1, [r5, #0]
 8004970:	0606      	lsls	r6, r0, #24
 8004972:	f101 0304 	add.w	r3, r1, #4
 8004976:	d50a      	bpl.n	800498e <_printf_i+0xce>
 8004978:	680e      	ldr	r6, [r1, #0]
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	2e00      	cmp	r6, #0
 800497e:	da03      	bge.n	8004988 <_printf_i+0xc8>
 8004980:	232d      	movs	r3, #45	; 0x2d
 8004982:	4276      	negs	r6, r6
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004988:	485e      	ldr	r0, [pc, #376]	; (8004b04 <_printf_i+0x244>)
 800498a:	230a      	movs	r3, #10
 800498c:	e019      	b.n	80049c2 <_printf_i+0x102>
 800498e:	680e      	ldr	r6, [r1, #0]
 8004990:	602b      	str	r3, [r5, #0]
 8004992:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004996:	bf18      	it	ne
 8004998:	b236      	sxthne	r6, r6
 800499a:	e7ef      	b.n	800497c <_printf_i+0xbc>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	1d19      	adds	r1, r3, #4
 80049a2:	6029      	str	r1, [r5, #0]
 80049a4:	0601      	lsls	r1, r0, #24
 80049a6:	d501      	bpl.n	80049ac <_printf_i+0xec>
 80049a8:	681e      	ldr	r6, [r3, #0]
 80049aa:	e002      	b.n	80049b2 <_printf_i+0xf2>
 80049ac:	0646      	lsls	r6, r0, #25
 80049ae:	d5fb      	bpl.n	80049a8 <_printf_i+0xe8>
 80049b0:	881e      	ldrh	r6, [r3, #0]
 80049b2:	4854      	ldr	r0, [pc, #336]	; (8004b04 <_printf_i+0x244>)
 80049b4:	2f6f      	cmp	r7, #111	; 0x6f
 80049b6:	bf0c      	ite	eq
 80049b8:	2308      	moveq	r3, #8
 80049ba:	230a      	movne	r3, #10
 80049bc:	2100      	movs	r1, #0
 80049be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049c2:	6865      	ldr	r5, [r4, #4]
 80049c4:	60a5      	str	r5, [r4, #8]
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	bfa2      	ittt	ge
 80049ca:	6821      	ldrge	r1, [r4, #0]
 80049cc:	f021 0104 	bicge.w	r1, r1, #4
 80049d0:	6021      	strge	r1, [r4, #0]
 80049d2:	b90e      	cbnz	r6, 80049d8 <_printf_i+0x118>
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	d04d      	beq.n	8004a74 <_printf_i+0x1b4>
 80049d8:	4615      	mov	r5, r2
 80049da:	fbb6 f1f3 	udiv	r1, r6, r3
 80049de:	fb03 6711 	mls	r7, r3, r1, r6
 80049e2:	5dc7      	ldrb	r7, [r0, r7]
 80049e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049e8:	4637      	mov	r7, r6
 80049ea:	42bb      	cmp	r3, r7
 80049ec:	460e      	mov	r6, r1
 80049ee:	d9f4      	bls.n	80049da <_printf_i+0x11a>
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d10b      	bne.n	8004a0c <_printf_i+0x14c>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	07de      	lsls	r6, r3, #31
 80049f8:	d508      	bpl.n	8004a0c <_printf_i+0x14c>
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	6861      	ldr	r1, [r4, #4]
 80049fe:	4299      	cmp	r1, r3
 8004a00:	bfde      	ittt	le
 8004a02:	2330      	movle	r3, #48	; 0x30
 8004a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a0c:	1b52      	subs	r2, r2, r5
 8004a0e:	6122      	str	r2, [r4, #16]
 8004a10:	f8cd a000 	str.w	sl, [sp]
 8004a14:	464b      	mov	r3, r9
 8004a16:	aa03      	add	r2, sp, #12
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f7ff fee2 	bl	80047e4 <_printf_common>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d14c      	bne.n	8004abe <_printf_i+0x1fe>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a28:	b004      	add	sp, #16
 8004a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2e:	4835      	ldr	r0, [pc, #212]	; (8004b04 <_printf_i+0x244>)
 8004a30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a34:	6829      	ldr	r1, [r5, #0]
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a3c:	6029      	str	r1, [r5, #0]
 8004a3e:	061d      	lsls	r5, r3, #24
 8004a40:	d514      	bpl.n	8004a6c <_printf_i+0x1ac>
 8004a42:	07df      	lsls	r7, r3, #31
 8004a44:	bf44      	itt	mi
 8004a46:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4a:	6023      	strmi	r3, [r4, #0]
 8004a4c:	b91e      	cbnz	r6, 8004a56 <_printf_i+0x196>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f023 0320 	bic.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	2310      	movs	r3, #16
 8004a58:	e7b0      	b.n	80049bc <_printf_i+0xfc>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f043 0320 	orr.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2378      	movs	r3, #120	; 0x78
 8004a64:	4828      	ldr	r0, [pc, #160]	; (8004b08 <_printf_i+0x248>)
 8004a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a6a:	e7e3      	b.n	8004a34 <_printf_i+0x174>
 8004a6c:	0659      	lsls	r1, r3, #25
 8004a6e:	bf48      	it	mi
 8004a70:	b2b6      	uxthmi	r6, r6
 8004a72:	e7e6      	b.n	8004a42 <_printf_i+0x182>
 8004a74:	4615      	mov	r5, r2
 8004a76:	e7bb      	b.n	80049f0 <_printf_i+0x130>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	6826      	ldr	r6, [r4, #0]
 8004a7c:	6961      	ldr	r1, [r4, #20]
 8004a7e:	1d18      	adds	r0, r3, #4
 8004a80:	6028      	str	r0, [r5, #0]
 8004a82:	0635      	lsls	r5, r6, #24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0x1cc>
 8004a88:	6019      	str	r1, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0x1d2>
 8004a8c:	0670      	lsls	r0, r6, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0x1c8>
 8004a90:	8019      	strh	r1, [r3, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	4615      	mov	r5, r2
 8004a98:	e7ba      	b.n	8004a10 <_printf_i+0x150>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	1d1a      	adds	r2, r3, #4
 8004a9e:	602a      	str	r2, [r5, #0]
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7fb fb92 	bl	80001d0 <memchr>
 8004aac:	b108      	cbz	r0, 8004ab2 <_printf_i+0x1f2>
 8004aae:	1b40      	subs	r0, r0, r5
 8004ab0:	6060      	str	r0, [r4, #4]
 8004ab2:	6863      	ldr	r3, [r4, #4]
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004abc:	e7a8      	b.n	8004a10 <_printf_i+0x150>
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	47d0      	blx	sl
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d0ab      	beq.n	8004a24 <_printf_i+0x164>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	079b      	lsls	r3, r3, #30
 8004ad0:	d413      	bmi.n	8004afa <_printf_i+0x23a>
 8004ad2:	68e0      	ldr	r0, [r4, #12]
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	4298      	cmp	r0, r3
 8004ad8:	bfb8      	it	lt
 8004ada:	4618      	movlt	r0, r3
 8004adc:	e7a4      	b.n	8004a28 <_printf_i+0x168>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d09b      	beq.n	8004a24 <_printf_i+0x164>
 8004aec:	3501      	adds	r5, #1
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	9903      	ldr	r1, [sp, #12]
 8004af2:	1a5b      	subs	r3, r3, r1
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dcf2      	bgt.n	8004ade <_printf_i+0x21e>
 8004af8:	e7eb      	b.n	8004ad2 <_printf_i+0x212>
 8004afa:	2500      	movs	r5, #0
 8004afc:	f104 0619 	add.w	r6, r4, #25
 8004b00:	e7f5      	b.n	8004aee <_printf_i+0x22e>
 8004b02:	bf00      	nop
 8004b04:	0800538d 	.word	0x0800538d
 8004b08:	0800539e 	.word	0x0800539e

08004b0c <_putc_r>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	460d      	mov	r5, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	4606      	mov	r6, r0
 8004b14:	b118      	cbz	r0, 8004b1e <_putc_r+0x12>
 8004b16:	6983      	ldr	r3, [r0, #24]
 8004b18:	b90b      	cbnz	r3, 8004b1e <_putc_r+0x12>
 8004b1a:	f7ff fb23 	bl	8004164 <__sinit>
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <_putc_r+0x84>)
 8004b20:	429c      	cmp	r4, r3
 8004b22:	d124      	bne.n	8004b6e <_putc_r+0x62>
 8004b24:	6874      	ldr	r4, [r6, #4]
 8004b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b28:	07d8      	lsls	r0, r3, #31
 8004b2a:	d405      	bmi.n	8004b38 <_putc_r+0x2c>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	0599      	lsls	r1, r3, #22
 8004b30:	d402      	bmi.n	8004b38 <_putc_r+0x2c>
 8004b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b34:	f7ff fbb4 	bl	80042a0 <__retarget_lock_acquire_recursive>
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	da05      	bge.n	8004b4e <_putc_r+0x42>
 8004b42:	69a2      	ldr	r2, [r4, #24]
 8004b44:	4293      	cmp	r3, r2
 8004b46:	db1c      	blt.n	8004b82 <_putc_r+0x76>
 8004b48:	b2eb      	uxtb	r3, r5
 8004b4a:	2b0a      	cmp	r3, #10
 8004b4c:	d019      	beq.n	8004b82 <_putc_r+0x76>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	701d      	strb	r5, [r3, #0]
 8004b56:	b2ed      	uxtb	r5, r5
 8004b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b5a:	07da      	lsls	r2, r3, #31
 8004b5c:	d405      	bmi.n	8004b6a <_putc_r+0x5e>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <_putc_r+0x5e>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f7ff fb9c 	bl	80042a2 <__retarget_lock_release_recursive>
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <_putc_r+0x88>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	d101      	bne.n	8004b78 <_putc_r+0x6c>
 8004b74:	68b4      	ldr	r4, [r6, #8]
 8004b76:	e7d6      	b.n	8004b26 <_putc_r+0x1a>
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <_putc_r+0x8c>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	bf08      	it	eq
 8004b7e:	68f4      	ldreq	r4, [r6, #12]
 8004b80:	e7d1      	b.n	8004b26 <_putc_r+0x1a>
 8004b82:	4629      	mov	r1, r5
 8004b84:	4622      	mov	r2, r4
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff f912 	bl	8003db0 <__swbuf_r>
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	e7e3      	b.n	8004b58 <_putc_r+0x4c>
 8004b90:	0800533c 	.word	0x0800533c
 8004b94:	0800535c 	.word	0x0800535c
 8004b98:	0800531c 	.word	0x0800531c

08004b9c <_sbrk_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d06      	ldr	r5, [pc, #24]	; (8004bb8 <_sbrk_r+0x1c>)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	f7fb ffa2 	bl	8000af0 <_sbrk>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_sbrk_r+0x1a>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_sbrk_r+0x1a>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	20000144 	.word	0x20000144

08004bbc <__sread>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc4:	f000 f8a0 	bl	8004d08 <_read_r>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	bfab      	itete	ge
 8004bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bce:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd0:	181b      	addge	r3, r3, r0
 8004bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bd6:	bfac      	ite	ge
 8004bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bda:	81a3      	strhlt	r3, [r4, #12]
 8004bdc:	bd10      	pop	{r4, pc}

08004bde <__swrite>:
 8004bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be2:	461f      	mov	r7, r3
 8004be4:	898b      	ldrh	r3, [r1, #12]
 8004be6:	05db      	lsls	r3, r3, #23
 8004be8:	4605      	mov	r5, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	4616      	mov	r6, r2
 8004bee:	d505      	bpl.n	8004bfc <__swrite+0x1e>
 8004bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f000 f868 	bl	8004ccc <_lseek_r>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c06:	81a3      	strh	r3, [r4, #12]
 8004c08:	4632      	mov	r2, r6
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c12:	f000 b817 	b.w	8004c44 <_write_r>

08004c16 <__sseek>:
 8004c16:	b510      	push	{r4, lr}
 8004c18:	460c      	mov	r4, r1
 8004c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1e:	f000 f855 	bl	8004ccc <_lseek_r>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	bf15      	itete	ne
 8004c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c32:	81a3      	strheq	r3, [r4, #12]
 8004c34:	bf18      	it	ne
 8004c36:	81a3      	strhne	r3, [r4, #12]
 8004c38:	bd10      	pop	{r4, pc}

08004c3a <__sclose>:
 8004c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3e:	f000 b813 	b.w	8004c68 <_close_r>
	...

08004c44 <_write_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d07      	ldr	r5, [pc, #28]	; (8004c64 <_write_r+0x20>)
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 f911 	bl	8004e7a <_write>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_write_r+0x1e>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_write_r+0x1e>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000144 	.word	0x20000144

08004c68 <_close_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d06      	ldr	r5, [pc, #24]	; (8004c84 <_close_r+0x1c>)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f000 f932 	bl	8004edc <_close>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_close_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_close_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20000144 	.word	0x20000144

08004c88 <_fstat_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d07      	ldr	r5, [pc, #28]	; (8004ca8 <_fstat_r+0x20>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	f000 f968 	bl	8004f6a <_fstat>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	d102      	bne.n	8004ca4 <_fstat_r+0x1c>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	b103      	cbz	r3, 8004ca4 <_fstat_r+0x1c>
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000144 	.word	0x20000144

08004cac <_isatty_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d06      	ldr	r5, [pc, #24]	; (8004cc8 <_isatty_r+0x1c>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	f000 fabe 	bl	8005238 <_isatty>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_isatty_r+0x1a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_isatty_r+0x1a>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20000144 	.word	0x20000144

08004ccc <_lseek_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	; (8004cec <_lseek_r+0x20>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f000 f8bb 	bl	8004e56 <_lseek>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_lseek_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_lseek_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000144 	.word	0x20000144

08004cf0 <__malloc_lock>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	; (8004cf8 <__malloc_lock+0x8>)
 8004cf2:	f7ff bad5 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	20000138 	.word	0x20000138

08004cfc <__malloc_unlock>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__malloc_unlock+0x8>)
 8004cfe:	f7ff bad0 	b.w	80042a2 <__retarget_lock_release_recursive>
 8004d02:	bf00      	nop
 8004d04:	20000138 	.word	0x20000138

08004d08 <_read_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d07      	ldr	r5, [pc, #28]	; (8004d28 <_read_r+0x20>)
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	2200      	movs	r2, #0
 8004d14:	602a      	str	r2, [r5, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 f845 	bl	8004da6 <_read>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_read_r+0x1e>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_read_r+0x1e>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	20000144 	.word	0x20000144

08004d2c <findslot>:
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <findslot+0x2c>)
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	4604      	mov	r4, r0
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	b118      	cbz	r0, 8004d3e <findslot+0x12>
 8004d36:	6983      	ldr	r3, [r0, #24]
 8004d38:	b90b      	cbnz	r3, 8004d3e <findslot+0x12>
 8004d3a:	f7ff fa13 	bl	8004164 <__sinit>
 8004d3e:	2c13      	cmp	r4, #19
 8004d40:	d807      	bhi.n	8004d52 <findslot+0x26>
 8004d42:	4806      	ldr	r0, [pc, #24]	; (8004d5c <findslot+0x30>)
 8004d44:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004d48:	3201      	adds	r2, #1
 8004d4a:	d002      	beq.n	8004d52 <findslot+0x26>
 8004d4c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	2000      	movs	r0, #0
 8004d54:	e7fc      	b.n	8004d50 <findslot+0x24>
 8004d56:	bf00      	nop
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	20000154 	.word	0x20000154

08004d60 <error>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	4604      	mov	r4, r0
 8004d64:	f7fe ff4e 	bl	8003c04 <__errno>
 8004d68:	2613      	movs	r6, #19
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	2700      	movs	r7, #0
 8004d6e:	4630      	mov	r0, r6
 8004d70:	4639      	mov	r1, r7
 8004d72:	beab      	bkpt	0x00ab
 8004d74:	4606      	mov	r6, r0
 8004d76:	602e      	str	r6, [r5, #0]
 8004d78:	4620      	mov	r0, r4
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d7c <checkerror>:
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d101      	bne.n	8004d84 <checkerror+0x8>
 8004d80:	f7ff bfee 	b.w	8004d60 <error>
 8004d84:	4770      	bx	lr

08004d86 <_swiread>:
 8004d86:	b530      	push	{r4, r5, lr}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004d8e:	9203      	str	r2, [sp, #12]
 8004d90:	2406      	movs	r4, #6
 8004d92:	ad01      	add	r5, sp, #4
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	beab      	bkpt	0x00ab
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff ffed 	bl	8004d7c <checkerror>
 8004da2:	b005      	add	sp, #20
 8004da4:	bd30      	pop	{r4, r5, pc}

08004da6 <_read>:
 8004da6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004da8:	4615      	mov	r5, r2
 8004daa:	9101      	str	r1, [sp, #4]
 8004dac:	f7ff ffbe 	bl	8004d2c <findslot>
 8004db0:	9901      	ldr	r1, [sp, #4]
 8004db2:	4604      	mov	r4, r0
 8004db4:	b938      	cbnz	r0, 8004dc6 <_read+0x20>
 8004db6:	f7fe ff25 	bl	8003c04 <__errno>
 8004dba:	2309      	movs	r3, #9
 8004dbc:	6003      	str	r3, [r0, #0]
 8004dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc2:	b003      	add	sp, #12
 8004dc4:	bd30      	pop	{r4, r5, pc}
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	f7ff ffdc 	bl	8004d86 <_swiread>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	d0f7      	beq.n	8004dc2 <_read+0x1c>
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	1a2a      	subs	r2, r5, r0
 8004dd6:	4413      	add	r3, r2
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	4610      	mov	r0, r2
 8004ddc:	e7f1      	b.n	8004dc2 <_read+0x1c>

08004dde <_swilseek>:
 8004dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de0:	460c      	mov	r4, r1
 8004de2:	4616      	mov	r6, r2
 8004de4:	f7ff ffa2 	bl	8004d2c <findslot>
 8004de8:	4605      	mov	r5, r0
 8004dea:	b940      	cbnz	r0, 8004dfe <_swilseek+0x20>
 8004dec:	f7fe ff0a 	bl	8003c04 <__errno>
 8004df0:	2309      	movs	r3, #9
 8004df2:	6003      	str	r3, [r0, #0]
 8004df4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004df8:	4620      	mov	r0, r4
 8004dfa:	b003      	add	sp, #12
 8004dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfe:	2e02      	cmp	r6, #2
 8004e00:	d903      	bls.n	8004e0a <_swilseek+0x2c>
 8004e02:	f7fe feff 	bl	8003c04 <__errno>
 8004e06:	2316      	movs	r3, #22
 8004e08:	e7f3      	b.n	8004df2 <_swilseek+0x14>
 8004e0a:	2e01      	cmp	r6, #1
 8004e0c:	d112      	bne.n	8004e34 <_swilseek+0x56>
 8004e0e:	6843      	ldr	r3, [r0, #4]
 8004e10:	18e4      	adds	r4, r4, r3
 8004e12:	d4f6      	bmi.n	8004e02 <_swilseek+0x24>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	260a      	movs	r6, #10
 8004e18:	e9cd 3400 	strd	r3, r4, [sp]
 8004e1c:	466f      	mov	r7, sp
 8004e1e:	4630      	mov	r0, r6
 8004e20:	4639      	mov	r1, r7
 8004e22:	beab      	bkpt	0x00ab
 8004e24:	4606      	mov	r6, r0
 8004e26:	4630      	mov	r0, r6
 8004e28:	f7ff ffa8 	bl	8004d7c <checkerror>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	dbe1      	blt.n	8004df4 <_swilseek+0x16>
 8004e30:	606c      	str	r4, [r5, #4]
 8004e32:	e7e1      	b.n	8004df8 <_swilseek+0x1a>
 8004e34:	2e02      	cmp	r6, #2
 8004e36:	d1ed      	bne.n	8004e14 <_swilseek+0x36>
 8004e38:	6803      	ldr	r3, [r0, #0]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	260c      	movs	r6, #12
 8004e3e:	466f      	mov	r7, sp
 8004e40:	4630      	mov	r0, r6
 8004e42:	4639      	mov	r1, r7
 8004e44:	beab      	bkpt	0x00ab
 8004e46:	4606      	mov	r6, r0
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7ff ff97 	bl	8004d7c <checkerror>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d0d0      	beq.n	8004df4 <_swilseek+0x16>
 8004e52:	4404      	add	r4, r0
 8004e54:	e7de      	b.n	8004e14 <_swilseek+0x36>

08004e56 <_lseek>:
 8004e56:	f7ff bfc2 	b.w	8004dde <_swilseek>

08004e5a <_swiwrite>:
 8004e5a:	b530      	push	{r4, r5, lr}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	2405      	movs	r4, #5
 8004e66:	ad01      	add	r5, sp, #4
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	beab      	bkpt	0x00ab
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7ff ff83 	bl	8004d7c <checkerror>
 8004e76:	b005      	add	sp, #20
 8004e78:	bd30      	pop	{r4, r5, pc}

08004e7a <_write>:
 8004e7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e7c:	4615      	mov	r5, r2
 8004e7e:	9101      	str	r1, [sp, #4]
 8004e80:	f7ff ff54 	bl	8004d2c <findslot>
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	4604      	mov	r4, r0
 8004e88:	b930      	cbnz	r0, 8004e98 <_write+0x1e>
 8004e8a:	f7fe febb 	bl	8003c04 <__errno>
 8004e8e:	2309      	movs	r3, #9
 8004e90:	6003      	str	r3, [r0, #0]
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e96:	e012      	b.n	8004ebe <_write+0x44>
 8004e98:	6800      	ldr	r0, [r0, #0]
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	f7ff ffdd 	bl	8004e5a <_swiwrite>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	dbf6      	blt.n	8004e92 <_write+0x18>
 8004ea4:	6862      	ldr	r2, [r4, #4]
 8004ea6:	1a2b      	subs	r3, r5, r0
 8004ea8:	441a      	add	r2, r3
 8004eaa:	42a8      	cmp	r0, r5
 8004eac:	6062      	str	r2, [r4, #4]
 8004eae:	d105      	bne.n	8004ebc <_write+0x42>
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	b003      	add	sp, #12
 8004eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eb8:	f7ff bf52 	b.w	8004d60 <error>
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	b003      	add	sp, #12
 8004ec0:	bd30      	pop	{r4, r5, pc}

08004ec2 <_swiclose>:
 8004ec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ec4:	2402      	movs	r4, #2
 8004ec6:	9001      	str	r0, [sp, #4]
 8004ec8:	ad01      	add	r5, sp, #4
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	beab      	bkpt	0x00ab
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7ff ff52 	bl	8004d7c <checkerror>
 8004ed8:	b003      	add	sp, #12
 8004eda:	bd30      	pop	{r4, r5, pc}

08004edc <_close>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4605      	mov	r5, r0
 8004ee0:	f7ff ff24 	bl	8004d2c <findslot>
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	b930      	cbnz	r0, 8004ef6 <_close+0x1a>
 8004ee8:	f7fe fe8c 	bl	8003c04 <__errno>
 8004eec:	2309      	movs	r3, #9
 8004eee:	6003      	str	r3, [r0, #0]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	3d01      	subs	r5, #1
 8004ef8:	2d01      	cmp	r5, #1
 8004efa:	d809      	bhi.n	8004f10 <_close+0x34>
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <_close+0x48>)
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d104      	bne.n	8004f10 <_close+0x34>
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f0a:	6003      	str	r3, [r0, #0]
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e7f1      	b.n	8004ef4 <_close+0x18>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	f7ff ffd6 	bl	8004ec2 <_swiclose>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d1ec      	bne.n	8004ef4 <_close+0x18>
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	e7e8      	b.n	8004ef4 <_close+0x18>
 8004f22:	bf00      	nop
 8004f24:	20000154 	.word	0x20000154

08004f28 <_swistat>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	f7ff fefe 	bl	8004d2c <findslot>
 8004f30:	4605      	mov	r5, r0
 8004f32:	b930      	cbnz	r0, 8004f42 <_swistat+0x1a>
 8004f34:	f7fe fe66 	bl	8003c04 <__errno>
 8004f38:	2309      	movs	r3, #9
 8004f3a:	6003      	str	r3, [r0, #0]
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
 8004f42:	6863      	ldr	r3, [r4, #4]
 8004f44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f48:	6063      	str	r3, [r4, #4]
 8004f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f50:	260c      	movs	r6, #12
 8004f52:	4630      	mov	r0, r6
 8004f54:	4629      	mov	r1, r5
 8004f56:	beab      	bkpt	0x00ab
 8004f58:	4605      	mov	r5, r0
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7ff ff0e 	bl	8004d7c <checkerror>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	bf1c      	itt	ne
 8004f64:	6120      	strne	r0, [r4, #16]
 8004f66:	2000      	movne	r0, #0
 8004f68:	e7ea      	b.n	8004f40 <_swistat+0x18>

08004f6a <_fstat>:
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4604      	mov	r4, r0
 8004f72:	2258      	movs	r2, #88	; 0x58
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe fe6f 	bl	8003c58 <memset>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f82:	f7ff bfd1 	b.w	8004f28 <_swistat>

08004f86 <_stat>:
 8004f86:	b538      	push	{r3, r4, r5, lr}
 8004f88:	460d      	mov	r5, r1
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	2258      	movs	r2, #88	; 0x58
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7fe fe61 	bl	8003c58 <memset>
 8004f96:	4620      	mov	r0, r4
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f000 f811 	bl	8004fc0 <_swiopen>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	d00b      	beq.n	8004fbc <_stat+0x36>
 8004fa4:	686b      	ldr	r3, [r5, #4]
 8004fa6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004faa:	606b      	str	r3, [r5, #4]
 8004fac:	4629      	mov	r1, r5
 8004fae:	f7ff ffbb 	bl	8004f28 <_swistat>
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7ff ff91 	bl	8004edc <_close>
 8004fba:	462c      	mov	r4, r5
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}

08004fc0 <_swiopen>:
 8004fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005070 <_swiopen+0xb0>
 8004fc8:	b097      	sub	sp, #92	; 0x5c
 8004fca:	4607      	mov	r7, r0
 8004fcc:	460e      	mov	r6, r1
 8004fce:	2500      	movs	r5, #0
 8004fd0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004fd4:	1c61      	adds	r1, r4, #1
 8004fd6:	d037      	beq.n	8005048 <_swiopen+0x88>
 8004fd8:	3501      	adds	r5, #1
 8004fda:	2d14      	cmp	r5, #20
 8004fdc:	d1f8      	bne.n	8004fd0 <_swiopen+0x10>
 8004fde:	f7fe fe11 	bl	8003c04 <__errno>
 8004fe2:	2318      	movs	r3, #24
 8004fe4:	6003      	str	r3, [r0, #0]
 8004fe6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004fea:	e03d      	b.n	8005068 <_swiopen+0xa8>
 8004fec:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004ff0:	f240 6301 	movw	r3, #1537	; 0x601
 8004ff4:	07b2      	lsls	r2, r6, #30
 8004ff6:	bf48      	it	mi
 8004ff8:	f044 0402 	orrmi.w	r4, r4, #2
 8004ffc:	421e      	tst	r6, r3
 8004ffe:	bf18      	it	ne
 8005000:	f044 0404 	orrne.w	r4, r4, #4
 8005004:	0733      	lsls	r3, r6, #28
 8005006:	bf48      	it	mi
 8005008:	f024 0404 	bicmi.w	r4, r4, #4
 800500c:	4638      	mov	r0, r7
 800500e:	bf48      	it	mi
 8005010:	f044 0408 	orrmi.w	r4, r4, #8
 8005014:	9700      	str	r7, [sp, #0]
 8005016:	f7fb f92b 	bl	8000270 <strlen>
 800501a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800501e:	2401      	movs	r4, #1
 8005020:	4620      	mov	r0, r4
 8005022:	4649      	mov	r1, r9
 8005024:	beab      	bkpt	0x00ab
 8005026:	4604      	mov	r4, r0
 8005028:	2c00      	cmp	r4, #0
 800502a:	db08      	blt.n	800503e <_swiopen+0x7e>
 800502c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005030:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8005034:	2300      	movs	r3, #0
 8005036:	f8c8 3004 	str.w	r3, [r8, #4]
 800503a:	462c      	mov	r4, r5
 800503c:	e014      	b.n	8005068 <_swiopen+0xa8>
 800503e:	4620      	mov	r0, r4
 8005040:	f7ff fe8e 	bl	8004d60 <error>
 8005044:	4604      	mov	r4, r0
 8005046:	e00f      	b.n	8005068 <_swiopen+0xa8>
 8005048:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800504c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005050:	46e9      	mov	r9, sp
 8005052:	d1cb      	bne.n	8004fec <_swiopen+0x2c>
 8005054:	4649      	mov	r1, r9
 8005056:	4638      	mov	r0, r7
 8005058:	f7ff ff95 	bl	8004f86 <_stat>
 800505c:	3001      	adds	r0, #1
 800505e:	d0c5      	beq.n	8004fec <_swiopen+0x2c>
 8005060:	f7fe fdd0 	bl	8003c04 <__errno>
 8005064:	2311      	movs	r3, #17
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	4620      	mov	r0, r4
 800506a:	b017      	add	sp, #92	; 0x5c
 800506c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005070:	20000154 	.word	0x20000154

08005074 <_get_semihosting_exts>:
 8005074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005078:	4606      	mov	r6, r0
 800507a:	460f      	mov	r7, r1
 800507c:	482a      	ldr	r0, [pc, #168]	; (8005128 <_get_semihosting_exts+0xb4>)
 800507e:	2100      	movs	r1, #0
 8005080:	4615      	mov	r5, r2
 8005082:	f7ff ff9d 	bl	8004fc0 <_swiopen>
 8005086:	462a      	mov	r2, r5
 8005088:	4604      	mov	r4, r0
 800508a:	2100      	movs	r1, #0
 800508c:	4630      	mov	r0, r6
 800508e:	f7fe fde3 	bl	8003c58 <memset>
 8005092:	1c63      	adds	r3, r4, #1
 8005094:	d016      	beq.n	80050c4 <_get_semihosting_exts+0x50>
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff fe48 	bl	8004d2c <findslot>
 800509c:	f04f 090c 	mov.w	r9, #12
 80050a0:	4680      	mov	r8, r0
 80050a2:	4648      	mov	r0, r9
 80050a4:	4641      	mov	r1, r8
 80050a6:	beab      	bkpt	0x00ab
 80050a8:	4680      	mov	r8, r0
 80050aa:	4640      	mov	r0, r8
 80050ac:	f7ff fe66 	bl	8004d7c <checkerror>
 80050b0:	2803      	cmp	r0, #3
 80050b2:	dd02      	ble.n	80050ba <_get_semihosting_exts+0x46>
 80050b4:	1ec3      	subs	r3, r0, #3
 80050b6:	42ab      	cmp	r3, r5
 80050b8:	dc08      	bgt.n	80050cc <_get_semihosting_exts+0x58>
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff ff0e 	bl	8004edc <_close>
 80050c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050c4:	4620      	mov	r0, r4
 80050c6:	b003      	add	sp, #12
 80050c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050cc:	2204      	movs	r2, #4
 80050ce:	eb0d 0102 	add.w	r1, sp, r2
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff fe67 	bl	8004da6 <_read>
 80050d8:	2803      	cmp	r0, #3
 80050da:	ddee      	ble.n	80050ba <_get_semihosting_exts+0x46>
 80050dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050e0:	2b53      	cmp	r3, #83	; 0x53
 80050e2:	d1ea      	bne.n	80050ba <_get_semihosting_exts+0x46>
 80050e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80050e8:	2b48      	cmp	r3, #72	; 0x48
 80050ea:	d1e6      	bne.n	80050ba <_get_semihosting_exts+0x46>
 80050ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050f0:	2b46      	cmp	r3, #70	; 0x46
 80050f2:	d1e2      	bne.n	80050ba <_get_semihosting_exts+0x46>
 80050f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050f8:	2b42      	cmp	r3, #66	; 0x42
 80050fa:	d1de      	bne.n	80050ba <_get_semihosting_exts+0x46>
 80050fc:	2201      	movs	r2, #1
 80050fe:	4639      	mov	r1, r7
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fe6c 	bl	8004dde <_swilseek>
 8005106:	2800      	cmp	r0, #0
 8005108:	dbd7      	blt.n	80050ba <_get_semihosting_exts+0x46>
 800510a:	462a      	mov	r2, r5
 800510c:	4631      	mov	r1, r6
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff fe49 	bl	8004da6 <_read>
 8005114:	4605      	mov	r5, r0
 8005116:	4620      	mov	r0, r4
 8005118:	f7ff fee0 	bl	8004edc <_close>
 800511c:	4628      	mov	r0, r5
 800511e:	f7ff fe2d 	bl	8004d7c <checkerror>
 8005122:	4604      	mov	r4, r0
 8005124:	e7ce      	b.n	80050c4 <_get_semihosting_exts+0x50>
 8005126:	bf00      	nop
 8005128:	080053af 	.word	0x080053af

0800512c <initialise_semihosting_exts>:
 800512c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800512e:	4d0a      	ldr	r5, [pc, #40]	; (8005158 <initialise_semihosting_exts+0x2c>)
 8005130:	4c0a      	ldr	r4, [pc, #40]	; (800515c <initialise_semihosting_exts+0x30>)
 8005132:	2100      	movs	r1, #0
 8005134:	2201      	movs	r2, #1
 8005136:	a801      	add	r0, sp, #4
 8005138:	6029      	str	r1, [r5, #0]
 800513a:	6022      	str	r2, [r4, #0]
 800513c:	f7ff ff9a 	bl	8005074 <_get_semihosting_exts>
 8005140:	2800      	cmp	r0, #0
 8005142:	dd07      	ble.n	8005154 <initialise_semihosting_exts+0x28>
 8005144:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005148:	f003 0201 	and.w	r2, r3, #1
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	602a      	str	r2, [r5, #0]
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	b003      	add	sp, #12
 8005156:	bd30      	pop	{r4, r5, pc}
 8005158:	20000074 	.word	0x20000074
 800515c:	20000078 	.word	0x20000078

08005160 <_has_ext_stdout_stderr>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4c04      	ldr	r4, [pc, #16]	; (8005174 <_has_ext_stdout_stderr+0x14>)
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	da01      	bge.n	800516e <_has_ext_stdout_stderr+0xe>
 800516a:	f7ff ffdf 	bl	800512c <initialise_semihosting_exts>
 800516e:	6820      	ldr	r0, [r4, #0]
 8005170:	bd10      	pop	{r4, pc}
 8005172:	bf00      	nop
 8005174:	20000078 	.word	0x20000078

08005178 <initialise_monitor_handles>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	b085      	sub	sp, #20
 800517e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005230 <initialise_monitor_handles+0xb8>
 8005182:	f8cd 9004 	str.w	r9, [sp, #4]
 8005186:	2303      	movs	r3, #3
 8005188:	2400      	movs	r4, #0
 800518a:	9303      	str	r3, [sp, #12]
 800518c:	af01      	add	r7, sp, #4
 800518e:	9402      	str	r4, [sp, #8]
 8005190:	2501      	movs	r5, #1
 8005192:	4628      	mov	r0, r5
 8005194:	4639      	mov	r1, r7
 8005196:	beab      	bkpt	0x00ab
 8005198:	4605      	mov	r5, r0
 800519a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005234 <initialise_monitor_handles+0xbc>
 800519e:	4623      	mov	r3, r4
 80051a0:	4c20      	ldr	r4, [pc, #128]	; (8005224 <initialise_monitor_handles+0xac>)
 80051a2:	f8c8 5000 	str.w	r5, [r8]
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051aa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80051ae:	3301      	adds	r3, #1
 80051b0:	2b14      	cmp	r3, #20
 80051b2:	d1fa      	bne.n	80051aa <initialise_monitor_handles+0x32>
 80051b4:	f7ff ffd4 	bl	8005160 <_has_ext_stdout_stderr>
 80051b8:	4d1b      	ldr	r5, [pc, #108]	; (8005228 <initialise_monitor_handles+0xb0>)
 80051ba:	b1d0      	cbz	r0, 80051f2 <initialise_monitor_handles+0x7a>
 80051bc:	f04f 0a03 	mov.w	sl, #3
 80051c0:	2304      	movs	r3, #4
 80051c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80051c6:	2601      	movs	r6, #1
 80051c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	beab      	bkpt	0x00ab
 80051d4:	4683      	mov	fp, r0
 80051d6:	4b15      	ldr	r3, [pc, #84]	; (800522c <initialise_monitor_handles+0xb4>)
 80051d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051dc:	f8c3 b000 	str.w	fp, [r3]
 80051e0:	2308      	movs	r3, #8
 80051e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	beab      	bkpt	0x00ab
 80051ee:	4606      	mov	r6, r0
 80051f0:	602e      	str	r6, [r5, #0]
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	bf02      	ittt	eq
 80051f8:	4b0c      	ldreq	r3, [pc, #48]	; (800522c <initialise_monitor_handles+0xb4>)
 80051fa:	681b      	ldreq	r3, [r3, #0]
 80051fc:	602b      	streq	r3, [r5, #0]
 80051fe:	2600      	movs	r6, #0
 8005200:	f8d8 3000 	ldr.w	r3, [r8]
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	6066      	str	r6, [r4, #4]
 8005208:	f7ff ffaa 	bl	8005160 <_has_ext_stdout_stderr>
 800520c:	b130      	cbz	r0, 800521c <initialise_monitor_handles+0xa4>
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <initialise_monitor_handles+0xb4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800521c:	b005      	add	sp, #20
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	bf00      	nop
 8005224:	20000154 	.word	0x20000154
 8005228:	20000148 	.word	0x20000148
 800522c:	20000150 	.word	0x20000150
 8005230:	080053c5 	.word	0x080053c5
 8005234:	2000014c 	.word	0x2000014c

08005238 <_isatty>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	f7ff fd77 	bl	8004d2c <findslot>
 800523e:	2509      	movs	r5, #9
 8005240:	4604      	mov	r4, r0
 8005242:	b920      	cbnz	r0, 800524e <_isatty+0x16>
 8005244:	f7fe fcde 	bl	8003c04 <__errno>
 8005248:	6005      	str	r5, [r0, #0]
 800524a:	4620      	mov	r0, r4
 800524c:	bd70      	pop	{r4, r5, r6, pc}
 800524e:	4628      	mov	r0, r5
 8005250:	4621      	mov	r1, r4
 8005252:	beab      	bkpt	0x00ab
 8005254:	4604      	mov	r4, r0
 8005256:	2c01      	cmp	r4, #1
 8005258:	d0f7      	beq.n	800524a <_isatty+0x12>
 800525a:	f7fe fcd3 	bl	8003c04 <__errno>
 800525e:	2400      	movs	r4, #0
 8005260:	4605      	mov	r5, r0
 8005262:	2613      	movs	r6, #19
 8005264:	4630      	mov	r0, r6
 8005266:	4621      	mov	r1, r4
 8005268:	beab      	bkpt	0x00ab
 800526a:	4606      	mov	r6, r0
 800526c:	602e      	str	r6, [r5, #0]
 800526e:	e7ec      	b.n	800524a <_isatty+0x12>

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
