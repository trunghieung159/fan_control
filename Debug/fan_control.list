
fan_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dec  08007dec  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df4  08007df4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000040  08007e3c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08007e3c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e0  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002928f  00000000  00000000  0003da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018217  00000000  00000000  00066c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106280  00000000  00000000  0007eeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  00185188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d8c 	.word	0x08007d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08007d8c 	.word	0x08007d8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <flash_erase_init>:

FLASH_EraseInitTypeDef flash_erase_power_init ;
FLASH_EraseInitTypeDef flash_erase_control_mode_init;
FLASH_EraseInitTypeDef flash_erase_wind_mode_init;

void flash_erase_init(){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	/*
	 * @brief init flash erase variables
	 */
	flash_erase_power_init.TypeErase =  0x00;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <flash_erase_init+0x5c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
	flash_erase_power_init.Banks = FLASH_BANK_2;
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <flash_erase_init+0x5c>)
 80004d8:	2202      	movs	r2, #2
 80004da:	605a      	str	r2, [r3, #4]
	flash_erase_power_init.NbPages = 1;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <flash_erase_init+0x5c>)
 80004de:	2201      	movs	r2, #1
 80004e0:	60da      	str	r2, [r3, #12]
	flash_erase_power_init.Page = power_page;
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <flash_erase_init+0x60>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <flash_erase_init+0x5c>)
 80004e8:	6093      	str	r3, [r2, #8]

	flash_erase_control_mode_init.TypeErase =  0x00;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <flash_erase_init+0x64>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	flash_erase_control_mode_init.Banks = FLASH_BANK_2;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <flash_erase_init+0x64>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	605a      	str	r2, [r3, #4]
	flash_erase_control_mode_init.NbPages = 1;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <flash_erase_init+0x64>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	60da      	str	r2, [r3, #12]
	flash_erase_control_mode_init.Page = control_mode_page;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <flash_erase_init+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <flash_erase_init+0x64>)
 8000502:	6093      	str	r3, [r2, #8]

	flash_erase_wind_mode_init.TypeErase = 0x00;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <flash_erase_init+0x6c>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
	flash_erase_wind_mode_init.Banks = FLASH_BANK_2;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <flash_erase_init+0x6c>)
 800050c:	2202      	movs	r2, #2
 800050e:	605a      	str	r2, [r3, #4]
	flash_erase_wind_mode_init.NbPages = 1;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <flash_erase_init+0x6c>)
 8000512:	2201      	movs	r2, #1
 8000514:	60da      	str	r2, [r3, #12]
	flash_erase_wind_mode_init.Page = wind_mode_page;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <flash_erase_init+0x70>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <flash_erase_init+0x6c>)
 800051c:	6093      	str	r3, [r2, #8]

}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	20000064 	.word	0x20000064
 800052c:	2000005c 	.word	0x2000005c
 8000530:	20000074 	.word	0x20000074
 8000534:	20000000 	.word	0x20000000
 8000538:	20000084 	.word	0x20000084
 800053c:	20000004 	.word	0x20000004

08000540 <mutate_power>:

void mutate_power(POWER power){
 8000540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000544:	b097      	sub	sp, #92	; 0x5c
 8000546:	af10      	add	r7, sp, #64	; 0x40
 8000548:	4603      	mov	r3, r0
 800054a:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Mutate power variable
	 * @param power set value
	 */
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <mutate_power+0xbc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	617b      	str	r3, [r7, #20]
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <mutate_power+0xc0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) power_page_address;
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <mutate_power+0xc4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60fb      	str	r3, [r7, #12]
	if(*p_power != power){
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	429a      	cmp	r2, r3
 8000566:	d044      	beq.n	80005f2 <mutate_power+0xb2>
		if(power == OFF){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d114      	bne.n	8000598 <mutate_power+0x58>
			wind_control(htim2, LEVEL_0);
 800056e:	4e26      	ldr	r6, [pc, #152]	; (8000608 <mutate_power+0xc8>)
 8000570:	2300      	movs	r3, #0
 8000572:	930f      	str	r3, [sp, #60]	; 0x3c
 8000574:	466d      	mov	r5, sp
 8000576:	f106 0410 	add.w	r4, r6, #16
 800057a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800057c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800057e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000586:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800058a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800058e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000592:	f000 f8ff 	bl	8000794 <wind_control>
 8000596:	e019      	b.n	80005cc <mutate_power+0x8c>
		}
		else{
			if(*p_control_mode == MANUAL){
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d115      	bne.n	80005cc <mutate_power+0x8c>
				wind_control(htim2, *p_wind_mode);
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4e18      	ldr	r6, [pc, #96]	; (8000608 <mutate_power+0xc8>)
 80005a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80005aa:	466d      	mov	r5, sp
 80005ac:	f106 0410 	add.w	r4, r6, #16
 80005b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80005c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005c8:	f000 f8e4 	bl	8000794 <wind_control>
			}
		}
		HAL_FLASH_Unlock();
 80005cc:	f002 fd9a 	bl	8003104 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 80005d0:	490e      	ldr	r1, [pc, #56]	; (800060c <mutate_power+0xcc>)
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <mutate_power+0xd0>)
 80005d4:	f002 fe7a 	bl	80032cc <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, power_page_address, power);
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <mutate_power+0xc4>)
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2200      	movs	r2, #0
 80005e0:	4698      	mov	r8, r3
 80005e2:	4691      	mov	r9, r2
 80005e4:	4642      	mov	r2, r8
 80005e6:	464b      	mov	r3, r9
 80005e8:	2000      	movs	r0, #0
 80005ea:	f002 fd1f 	bl	800302c <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80005ee:	f002 fdab 	bl	8003148 <HAL_FLASH_Lock>
	}
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	20000010 	.word	0x20000010
 8000604:	20000008 	.word	0x20000008
 8000608:	200000f8 	.word	0x200000f8
 800060c:	20000060 	.word	0x20000060
 8000610:	20000064 	.word	0x20000064

08000614 <mutate_control_mode>:


void mutate_control_mode(CONTROL_MODE control_mode){
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000616:	b095      	sub	sp, #84	; 0x54
 8000618:	af10      	add	r7, sp, #64	; 0x40
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate control mode variable
	 * @control_mode set value
	 */
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <mutate_control_mode+0x80>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode != control_mode){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	429a      	cmp	r2, r3
 800062c:	d02e      	beq.n	800068c <mutate_control_mode+0x78>
		HAL_FLASH_Unlock();
 800062e:	f002 fd69 	bl	8003104 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 8000632:	4919      	ldr	r1, [pc, #100]	; (8000698 <mutate_control_mode+0x84>)
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <mutate_control_mode+0x88>)
 8000636:	f002 fe49 	bl	80032cc <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, control_mode_page_address, control_mode);
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <mutate_control_mode+0x80>)
 800063c:	6819      	ldr	r1, [r3, #0]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2200      	movs	r2, #0
 8000642:	461c      	mov	r4, r3
 8000644:	4615      	mov	r5, r2
 8000646:	4622      	mov	r2, r4
 8000648:	462b      	mov	r3, r5
 800064a:	2000      	movs	r0, #0
 800064c:	f002 fcee 	bl	800302c <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000650:	f002 fd7a 	bl	8003148 <HAL_FLASH_Lock>
		if(control_mode == MANUAL){
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d118      	bne.n	800068c <mutate_control_mode+0x78>
			uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <mutate_control_mode+0x8c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	60bb      	str	r3, [r7, #8]
			wind_control(htim2, *p_wind_mode);
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4e0f      	ldr	r6, [pc, #60]	; (80006a4 <mutate_control_mode+0x90>)
 8000668:	930f      	str	r3, [sp, #60]	; 0x3c
 800066a:	466d      	mov	r5, sp
 800066c:	f106 0410 	add.w	r4, r6, #16
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000680:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000684:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000688:	f000 f884 	bl	8000794 <wind_control>
		}
	}
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	2000000c 	.word	0x2000000c
 8000698:	20000060 	.word	0x20000060
 800069c:	20000074 	.word	0x20000074
 80006a0:	20000010 	.word	0x20000010
 80006a4:	200000f8 	.word	0x200000f8

080006a8 <mutate_wind_mode>:


void mutate_wind_mode(WIND_MODE wind_mode){
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	b095      	sub	sp, #84	; 0x54
 80006ac:	af10      	add	r7, sp, #64	; 0x40
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate wind mode variable
	 * @wind_mode set value
	 */

	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <mutate_wind_mode+0x70>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	60fb      	str	r3, [r7, #12]
	if(*p_wind_mode != wind_mode){
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d026      	beq.n	8000710 <mutate_wind_mode+0x68>
		HAL_FLASH_Unlock();
 80006c2:	f002 fd1f 	bl	8003104 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 80006c6:	4915      	ldr	r1, [pc, #84]	; (800071c <mutate_wind_mode+0x74>)
 80006c8:	4815      	ldr	r0, [pc, #84]	; (8000720 <mutate_wind_mode+0x78>)
 80006ca:	f002 fdff 	bl	80032cc <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, wind_mode_page_address, wind_mode);
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <mutate_wind_mode+0x70>)
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2200      	movs	r2, #0
 80006d6:	461c      	mov	r4, r3
 80006d8:	4615      	mov	r5, r2
 80006da:	4622      	mov	r2, r4
 80006dc:	462b      	mov	r3, r5
 80006de:	2000      	movs	r0, #0
 80006e0:	f002 fca4 	bl	800302c <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80006e4:	f002 fd30 	bl	8003148 <HAL_FLASH_Lock>
		wind_control(htim2, wind_mode);
 80006e8:	4e0e      	ldr	r6, [pc, #56]	; (8000724 <mutate_wind_mode+0x7c>)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80006ee:	466d      	mov	r5, sp
 80006f0:	f106 0410 	add.w	r4, r6, #16
 80006f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000700:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000704:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000708:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800070c:	f000 f842 	bl	8000794 <wind_control>
	}
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	20000010 	.word	0x20000010
 800071c:	20000060 	.word	0x20000060
 8000720:	20000084 	.word	0x20000084
 8000724:	200000f8 	.word	0x200000f8

08000728 <get_power>:

uint8_t get_power(){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	/*
	 * @return power
	 */
	uint32_t* p_power = (uint32_t*) power_page_address;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <get_power+0x20>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	607b      	str	r3, [r7, #4]
	return *p_power;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000008 	.word	0x20000008

0800074c <get_control_mode>:

uint8_t get_control_mode(){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
	/*
	 * @return control mode
	 */
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <get_control_mode+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	607b      	str	r3, [r7, #4]
	return *p_control_mode;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2000000c 	.word	0x2000000c

08000770 <get_wind_mode>:

uint8_t get_wind_mode(){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
	/*
	 * @return wind mode
	 */
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <get_wind_mode+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	607b      	str	r3, [r7, #4]
	return *p_wind_mode;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000010 	.word	0x20000010

08000794 <wind_control>:

void wind_control(TIM_HandleTypeDef tim_handler, WIND_MODE wind_mode){
 8000794:	b084      	sub	sp, #16
 8000796:	b490      	push	{r4, r7}
 8000798:	af00      	add	r7, sp, #0
 800079a:	f107 0408 	add.w	r4, r7, #8
 800079e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * @brief Control PWM
	 * @param tim_handler timer handler
	 * @param wind_mode wind level to be controlled
	 */
	switch(wind_mode){
 80007a2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d00f      	beq.n	80007ca <wind_control+0x36>
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	dc12      	bgt.n	80007d4 <wind_control+0x40>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <wind_control+0x24>
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d004      	beq.n	80007c0 <wind_control+0x2c>
		break;
	case LEVEL_2:
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 799);
		break;
	}
}
 80007b6:	e00d      	b.n	80007d4 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 0);
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2200      	movs	r2, #0
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80007be:	e009      	b.n	80007d4 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 599);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	f240 2257 	movw	r2, #599	; 0x257
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80007c8:	e004      	b.n	80007d4 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handler, TIM_CHANNEL_1, 799);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	f240 321f 	movw	r2, #799	; 0x31f
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80007d2:	bf00      	nop
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc90      	pop	{r4, r7}
 80007da:	b004      	add	sp, #16
 80007dc:	4770      	bx	lr
	...

080007e0 <check_and_fix_variables>:

void check_and_fix_variables(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
	/*
	 *@brief check correctness of the flash memory storing state variables and fix
	 */
	uint32_t* p_power = (uint32_t*) power_page_address;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <check_and_fix_variables+0x6c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <check_and_fix_variables+0x70>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) wind_mode_page_address;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <check_and_fix_variables+0x74>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	607b      	str	r3, [r7, #4]
	if(*p_power != ON && *p_power != OFF){
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d006      	beq.n	800080e <check_and_fix_variables+0x2e>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <check_and_fix_variables+0x2e>
		mutate_power(OFF);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff fe99 	bl	8000540 <mutate_power>
	}
	if(*p_control_mode != AUTOMATIC && *p_control_mode != MANUAL){
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <check_and_fix_variables+0x44>
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d002      	beq.n	8000824 <check_and_fix_variables+0x44>
		mutate_control_mode(AUTOMATIC);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fef8 	bl	8000614 <mutate_control_mode>
	}
	if(*p_wind_mode != LEVEL_0 && *p_wind_mode != LEVEL_1 && *p_wind_mode != LEVEL_2){
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00a      	beq.n	8000842 <check_and_fix_variables+0x62>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d006      	beq.n	8000842 <check_and_fix_variables+0x62>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d002      	beq.n	8000842 <check_and_fix_variables+0x62>
		mutate_wind_mode(LEVEL_0);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff33 	bl	80006a8 <mutate_wind_mode>
	}
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	2000000c 	.word	0x2000000c
 8000854:	20000010 	.word	0x20000010

08000858 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000862:	f001 fa17 	bl	8001c94 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000866:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800086c:	f001 fb00 	bl	8001e70 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000872:	f001 fbd5 	bl	8002020 <HAL_ADC_GetValue>
 8000876:	6178      	str	r0, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8000878:	4819      	ldr	r0, [pc, #100]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800087a:	f001 fac5 	bl	8001e08 <HAL_ADC_Stop>
	//TO DO: temperature formula
	uint32_t* p_control_mode = (uint32_t*) control_mode_page_address;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) power_page_address;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode == AUTOMATIC && *p_power == ON){
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d122      	bne.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d11e      	bne.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>
		if(temperature < 15){
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 800089c:	edd3 7a00 	vldr	s15, [r3]
 80008a0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80008a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ac:	d503      	bpl.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x5e>
			mutate_wind_mode(LEVEL_0);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fefa 	bl	80006a8 <mutate_wind_mode>
		}
		else{
			mutate_wind_mode(LEVEL_2);
		}
	}
}
 80008b4:	e010      	b.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>
		else if(temperature <= 30){
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 80008b8:	edd3 7a00 	vldr	s15, [r3]
 80008bc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80008c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c8:	d803      	bhi.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x7a>
			mutate_wind_mode(LEVEL_1);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff feec 	bl	80006a8 <mutate_wind_mode>
}
 80008d0:	e002      	b.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>
			mutate_wind_mode(LEVEL_2);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fee8 	bl	80006a8 <mutate_wind_mode>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000094 	.word	0x20000094
 80008e4:	2000000c 	.word	0x2000000c
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000228 	.word	0x20000228

080008f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	uint8_t length = handle_message(receiveBuffer, sendBuffer);
 80008f8:	4909      	ldr	r1, [pc, #36]	; (8000920 <HAL_UART_RxCpltCallback+0x30>)
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <HAL_UART_RxCpltCallback+0x34>)
 80008fc:	f000 fa68 	bl	8000dd0 <handle_message>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]
	if(length != 0){
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d006      	beq.n	8000918 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit_IT(&huart1, sendBuffer, length);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	b29b      	uxth	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	4903      	ldr	r1, [pc, #12]	; (8000920 <HAL_UART_RxCpltCallback+0x30>)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_UART_RxCpltCallback+0x38>)
 8000914:	f005 fe4c 	bl	80065b0 <HAL_UART_Transmit_IT>
	}
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000021c 	.word	0x2000021c
 8000924:	20000214 	.word	0x20000214
 8000928:	20000190 	.word	0x20000190

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 fdb3 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f83a 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f9fa 	bl	8000d30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800093c:	f000 f9c8 	bl	8000cd0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000940:	f000 f8fc 	bl	8000b3c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000944:	f000 f884 	bl	8000a50 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000948:	f000 f96e 	bl	8000c28 <MX_TIM8_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800094c:	f000 f873 	bl	8000a36 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  flash_erase_init();
 8000950:	f7ff fdbc 	bl	80004cc <flash_erase_init>
  check_and_fix_variables();
 8000954:	f7ff ff44 	bl	80007e0 <check_and_fix_variables>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000958:	2100      	movs	r1, #0
 800095a:	480f      	ldr	r0, [pc, #60]	; (8000998 <main+0x6c>)
 800095c:	f004 fc06 	bl	800516c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 8000960:	480e      	ldr	r0, [pc, #56]	; (800099c <main+0x70>)
 8000962:	f004 fb31 	bl	8004fc8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 8000966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800096a:	2202      	movs	r2, #2
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <main+0x74>)
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <main+0x78>)
 8000970:	f005 fd4c 	bl	800640c <HAL_UART_Receive>
	  if(*(receiveBuffer+1) == 0x04){
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <main+0x74>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	2b04      	cmp	r3, #4
 800097a:	d106      	bne.n	800098a <main+0x5e>
		  HAL_UART_Receive_IT(&huart1, receiveBuffer+2, 2);
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <main+0x7c>)
 800097e:	2202      	movs	r2, #2
 8000980:	4619      	mov	r1, r3
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <main+0x78>)
 8000984:	f005 fe82 	bl	800668c <HAL_UART_Receive_IT>
 8000988:	e7ed      	b.n	8000966 <main+0x3a>
	  }
	  else{
		  HAL_UART_Receive_IT(&huart1, receiveBuffer+2, 3);
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <main+0x7c>)
 800098c:	2203      	movs	r2, #3
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <main+0x78>)
 8000992:	f005 fe7b 	bl	800668c <HAL_UART_Receive_IT>
	  HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 8000996:	e7e6      	b.n	8000966 <main+0x3a>
 8000998:	200000f8 	.word	0x200000f8
 800099c:	20000144 	.word	0x20000144
 80009a0:	20000214 	.word	0x20000214
 80009a4:	20000190 	.word	0x20000190
 80009a8:	20000216 	.word	0x20000216

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b096      	sub	sp, #88	; 0x58
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2244      	movs	r2, #68	; 0x44
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 f9de 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009d2:	f002 ff8f 	bl	80038f4 <HAL_PWREx_ControlVoltageScaling>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009dc:	f000 f9f2 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ea:	2310      	movs	r3, #16
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 ffd2 	bl	80039a0 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000a02:	f000 f9df 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fb9a 	bl	8004158 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a2a:	f000 f9cb 	bl	8000dc4 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3758      	adds	r7, #88	; 0x58
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	2025      	movs	r0, #37	; 0x25
 8000a40:	f002 fa3f 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a44:	2025      	movs	r0, #37	; 0x25
 8000a46:	f002 fa58 	bl	8002efa <HAL_NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a74:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a92:	2204      	movs	r2, #4
 8000a94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000ad4:	f000 ff88 	bl	80019e8 <HAL_ADC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ade:	f000 f971 	bl	8000dc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000aee:	f002 f85d 	bl	8002bac <HAL_ADCEx_MultiModeConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af8:	f000 f964 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b00:	2306      	movs	r3, #6
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b08:	237f      	movs	r3, #127	; 0x7f
 8000b0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_ADC1_Init+0xe0>)
 8000b1a:	f001 fa8f 	bl	800203c <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b24:	f000 f94e 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000094 	.word	0x20000094
 8000b34:	50040000 	.word	0x50040000
 8000b38:	19200040 	.word	0x19200040

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b78:	224f      	movs	r2, #79	; 0x4f
 8000b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b98:	f004 f9be 	bl	8004f18 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 f90f 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bb4:	f004 fe14 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f000 f901 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bc4:	f004 fa70 	bl	80050a8 <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bce:	f000 f8f9 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000be2:	f005 fb1f 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f000 f8ea 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c08:	f004 fcd6 	bl	80055b8 <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c12:	f000 f8d7 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c18:	f000 fb34 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000c1c:	bf00      	nop
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000f8 	.word	0x200000f8

08000c28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c48:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <MX_TIM8_Init+0xa4>)
 8000c4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c4e:	224f      	movs	r2, #79	; 0x4f
 8000c50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c5a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c72:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c74:	f004 f950 	bl	8004f18 <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000c7e:	f000 f8a1 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000c90:	f004 fda6 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000c9a:	f000 f893 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_TIM8_Init+0xa0>)
 8000cb0:	f005 fab8 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000cba:	f000 f883 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3720      	adds	r7, #32
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000144 	.word	0x20000144
 8000ccc:	40013400 	.word	0x40013400

08000cd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_USART1_UART_Init+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d14:	f005 fb2c 	bl	8006370 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f000 f851 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000190 	.word	0x20000190
 8000d2c:	40013800 	.word	0x40013800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_GPIO_Init+0x8c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2104      	movs	r1, #4
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <MX_GPIO_Init+0x90>)
 8000d94:	f002 fd88 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_GPIO_Init+0x90>)
 8000db0:	f002 fbd0 	bl	8003554 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <handle_message>:
 */

#include "message_handler.h"
#include "flash_mutate.h"

uint8_t handle_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	 * @param write_buf sending message's buffer
	 * @return 0 if don't send the reply
	 * return the length of reply message buff otherwise
	 */
	uint8_t sent_buf_length;
	uint8_t* stx = received_buf;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	623b      	str	r3, [r7, #32]
	if(*stx != 0x02){
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d003      	beq.n	8000dee <handle_message+0x1e>
		sent_buf_length = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 8000dec:	e072      	b.n	8000ed4 <handle_message+0x104>
	}

	uint8_t* received_frame_type  = received_buf + 1;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3301      	adds	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buf + 1;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buf + 2;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
	
	*sent_buf = 0x02;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2202      	movs	r2, #2
 8000e04:	701a      	strb	r2, [r3, #0]
	switch(*received_frame_type){
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d837      	bhi.n	8000e80 <handle_message+0xb0>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <handle_message+0x48>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e3f 	.word	0x08000e3f
 8000e20:	08000e55 	.word	0x08000e55
 8000e24:	08000e6b 	.word	0x08000e6b
		case 0x01:
			process_power_message(received_buf, sent_buf);
 8000e28:	6839      	ldr	r1, [r7, #0]
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f858 	bl	8000ee0 <process_power_message>
			sent_data_length = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000e3c:	e024      	b.n	8000e88 <handle_message+0xb8>
		case 0x02:
			process_control_mode_message(received_buf, sent_buf);
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f87d 	bl	8000f40 <process_control_mode_message>
			sent_data_length = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000e52:	e019      	b.n	8000e88 <handle_message+0xb8>
		case 0x03:
			process_wind_mode_message(received_buf, sent_buf);
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f8a7 	bl	8000faa <process_wind_mode_message>
			sent_data_length = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000e68:	e00e      	b.n	8000e88 <handle_message+0xb8>
		case 0x04:
			sent_data_length = process_states_request_message(received_buf, sent_buf);
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f8d9 	bl	8001024 <process_states_request_message>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			received_data_length = 0; 
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			break;
 8000e7e:	e003      	b.n	8000e88 <handle_message+0xb8>
		default:
			sent_buf_length = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto terminate;
 8000e86:	e025      	b.n	8000ed4 <handle_message+0x104>
	}
	*sent_frame_type = *received_frame_type + 0x80;
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3b80      	subs	r3, #128	; 0x80
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e9a:	701a      	strb	r2, [r3, #0]

	uint8_t* received_ETX = received_buf + 3 + received_data_length;
 8000e9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ea0:	3303      	adds	r3, #3
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d003      	beq.n	8000eb8 <handle_message+0xe8>
		sent_buf_length = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto terminate;
 8000eb6:	e00d      	b.n	8000ed4 <handle_message+0x104>
	}


	uint8_t* sent_ETX = sent_buf + 3 + sent_data_length; 
 8000eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ebc:	3303      	adds	r3, #3
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	701a      	strb	r2, [r3, #0]
	sent_buf_length = sent_data_length + 4;
 8000eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ece:	3304      	adds	r3, #4
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	terminate: return sent_buf_length;
 8000ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <process_power_message>:



void process_power_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	 * @param received_buf power message's buffer
	 * @param sent_buf reply message's buffer 
	 * return message data length otherwise
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 8000eea:	2101      	movs	r1, #1
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f8ed 	bl	80010cc <check_message_data_length>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01f      	beq.n	8000f38 <process_power_message+0x58>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3303      	adds	r3, #3
 8000efc:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	3303      	adds	r3, #3
 8000f02:	60bb      	str	r3, [r7, #8]
	if(*received_data == OFF){
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d106      	bne.n	8000f1a <process_power_message+0x3a>
		mutate_power(OFF);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fb17 	bl	8000540 <mutate_power>
		*sent_data = 0x00;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e00f      	b.n	8000f3a <process_power_message+0x5a>
	}
	else if(*received_data == ON){
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d106      	bne.n	8000f30 <process_power_message+0x50>
		mutate_power(ON);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff fb0c 	bl	8000540 <mutate_power>
		*sent_data = 0x00;
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e004      	b.n	8000f3a <process_power_message+0x5a>
	}
	else{
		*sent_data = 0xFF;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e000      	b.n	8000f3a <process_power_message+0x5a>
		return;
 8000f38:	bf00      	nop
	}
}
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <process_control_mode_message>:

void process_control_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	 * @brief read mode control message from received_buf and replies in sent_buf 
	 * @param received_buf mode control message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f8bd 	bl	80010cc <check_message_data_length>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d024      	beq.n	8000fa2 <process_control_mode_message+0x62>
		return;
	}

	uint8_t* received_data = received_buf + 3;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3303      	adds	r3, #3
 8000f62:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000f64:	f7ff fbe0 	bl	8000728 <get_power>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d103      	bne.n	8000f76 <process_control_mode_message+0x36>
		*sent_data = 0xFF;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	701a      	strb	r2, [r3, #0]
		goto terminate;
 8000f74:	e014      	b.n	8000fa0 <process_control_mode_message+0x60>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <process_control_mode_message+0x46>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <process_control_mode_message+0x58>
		mutate_control_mode(*received_data);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fb42 	bl	8000614 <mutate_control_mode>
		*sent_data = 0x00;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e003      	b.n	8000fa0 <process_control_mode_message+0x60>
	}
	else{
		*sent_data = 0xFF;
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	701a      	strb	r2, [r3, #0]
	}
	terminate: return;
 8000f9e:	e001      	b.n	8000fa4 <process_control_mode_message+0x64>
 8000fa0:	e000      	b.n	8000fa4 <process_control_mode_message+0x64>
		return;
 8000fa2:	bf00      	nop
}
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <process_wind_mode_message>:

void process_wind_mode_message(unsigned char* received_buf, unsigned char* sent_buf){
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
	 * @brief read win mode message from received_buf and replies in sent_buf 
	 * @param received_buf win mode message's buffer
	 * @param sent_buf reply message's buffer 
	 *
	*/
	if(!check_message_data_length(received_buf, 1)){
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f888 	bl	80010cc <check_message_data_length>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d02a      	beq.n	8001018 <process_wind_mode_message+0x6e>
		goto terminate;
	}

	uint8_t* received_data = received_buf + 3;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3303      	adds	r3, #3
 8000fc6:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buf + 3;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	3303      	adds	r3, #3
 8000fcc:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000fce:	f7ff fbab 	bl	8000728 <get_power>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <process_wind_mode_message+0x36>
		*sent_data = 0xFF;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	701a      	strb	r2, [r3, #0]
		goto terminate;
 8000fde:	e01c      	b.n	800101a <process_wind_mode_message+0x70>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <process_wind_mode_message+0x4e>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d003      	beq.n	8000ff8 <process_wind_mode_message+0x4e>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d10b      	bne.n	8001010 <process_wind_mode_message+0x66>
		mutate_wind_mode(*received_data);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fb53 	bl	80006a8 <mutate_wind_mode>
		*sent_data = 0x00;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		mutate_control_mode(MANUAL);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fb03 	bl	8000614 <mutate_control_mode>
 800100e:	e004      	b.n	800101a <process_wind_mode_message+0x70>
	}
	else{
		*sent_data = 0xFF;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	22ff      	movs	r2, #255	; 0xff
 8001014:	701a      	strb	r2, [r3, #0]
	}
	terminate: return;
 8001016:	e000      	b.n	800101a <process_wind_mode_message+0x70>
		goto terminate;
 8001018:	bf00      	nop
	terminate: return;
 800101a:	bf00      	nop
}
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <process_states_request_message>:

uint8_t process_states_request_message(unsigned char* received_buf, unsigned char* sent_buf){
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	 * @brief read states request message from received_buf and replies in sent_buf 
	 * @param received_buf sates request message's buffer
	 * @param sent_buf reply message's buffer 
	 * @return sent message's data length
	*/
	uint8_t* sent_data = sent_buf + 3;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3303      	adds	r3, #3
 8001032:	61fb      	str	r3, [r7, #28]
	uint8_t* power_state = sent_data + 1;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	3301      	adds	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
	uint8_t* control_mode_state = sent_data + 2;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3302      	adds	r3, #2
 800103e:	617b      	str	r3, [r7, #20]
	uint8_t* wind_mode_state = sent_data + 3;	
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	3303      	adds	r3, #3
 8001044:	613b      	str	r3, [r7, #16]
	uint8_t* temperature_state = sent_data + 4;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buf, 0)){
 800104c:	2100      	movs	r1, #0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f83c 	bl	80010cc <check_message_data_length>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <process_states_request_message+0x44>
		sent_data_length = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sent_data = 0xFF;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	22ff      	movs	r2, #255	; 0xff
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e028      	b.n	80010ba <process_states_request_message+0x96>
	}
	else{
		*sent_data = 0x00;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
		*power_state = get_power();
 800106e:	f7ff fb5b 	bl	8000728 <get_power>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	701a      	strb	r2, [r3, #0]
		*control_mode_state = get_control_mode();
 800107a:	f7ff fb67 	bl	800074c <get_control_mode>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = get_wind_mode();
 8001086:	f7ff fb73 	bl	8000770 <get_wind_mode>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	701a      	strb	r2, [r3, #0]
		int temp = (int) temperature;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <process_states_request_message+0xa4>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	623b      	str	r3, [r7, #32]
		if(temp < 0){
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da01      	bge.n	80010ac <process_states_request_message+0x88>
			temp = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
		}
		*temperature_state = (uint8_t) temp;
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 80010b4:	2305      	movs	r3, #5
 80010b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return sent_data_length;
 80010ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000228 	.word	0x20000228

080010cc <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buf, uint8_t expected_value){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
	/**
	* @brief check whether the length message is correct or not 
	* @return 1 if it is correct 
	* return  0 other wise  
	*/
	uint8_t* length = received_buf + 2;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3302      	adds	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
	if(*length == expected_value){
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d101      	bne.n	80010ec <check_message_data_length+0x20>
		return 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <check_message_data_length+0x22>
	}
	else{
		return 0;
 80010ec:	2300      	movs	r3, #0
	}
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x44>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x44>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6613      	str	r3, [r2, #96]	; 0x60
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x44>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6593      	str	r3, [r2, #88]	; 0x58
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ac      	sub	sp, #176	; 0xb0
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2288      	movs	r2, #136	; 0x88
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f006 fe09 	bl	8007d7c <memset>
  if(hadc->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_ADC_MspInit+0xc8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d147      	bne.n	8001204 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800117a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800117e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800118a:	2308      	movs	r3, #8
 800118c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800118e:	2307      	movs	r3, #7
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800119a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f9fb 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011b0:	f7ff fe08 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_ADC_MspInit+0xcc>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ea:	230b      	movs	r3, #11
 80011ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f002 f9a8 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	37b0      	adds	r7, #176	; 0xb0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	50040000 	.word	0x50040000
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d10c      	bne.n	8001240 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_TIM_Base_MspInit+0x68>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <HAL_TIM_Base_MspInit+0x68>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_TIM_Base_MspInit+0x68>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800123e:	e018      	b.n	8001272 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_TIM_Base_MspInit+0x6c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d113      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0x68>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_TIM_Base_MspInit+0x68>)
 8001250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_Base_MspInit+0x68>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 2, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	202c      	movs	r0, #44	; 0x2c
 8001268:	f001 fe2b 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800126c:	202c      	movs	r0, #44	; 0x2c
 800126e:	f001 fe44 	bl	8002efa <HAL_NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40013400 	.word	0x40013400

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a4:	d11c      	bne.n	80012e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_TIM_MspPostInit+0x64>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_TIM_MspPostInit+0x64>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_TIM_MspPostInit+0x64>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012be:	2320      	movs	r3, #32
 80012c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f002 f93a 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ac      	sub	sp, #176	; 0xb0
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2288      	movs	r2, #136	; 0x88
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f006 fd35 	bl	8007d7c <memset>
  if(huart->Instance==USART1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_UART_MspInit+0xb0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13a      	bne.n	8001392 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001320:	2300      	movs	r3, #0
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f003 f939 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001334:	f7ff fd46 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0xb4>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0xb4>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001342:	6613      	str	r3, [r2, #96]	; 0x60
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_UART_MspInit+0xb4>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_UART_MspInit+0xb4>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_UART_MspInit+0xb4>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0xb4>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001368:	23c0      	movs	r3, #192	; 0xc0
 800136a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001380:	2307      	movs	r3, #7
 8001382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_UART_MspInit+0xb8>)
 800138e:	f002 f8e1 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	37b0      	adds	r7, #176	; 0xb0
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013800 	.word	0x40013800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f8a6 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USART1_IRQHandler+0x10>)
 8001402:	f005 f999 	bl	8006738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000190 	.word	0x20000190

08001410 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM8_UP_IRQHandler+0x10>)
 8001416:	f003 ffaf 	bl	8005378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000144 	.word	0x20000144

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001480 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f006 fc5d 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff fa57 	bl	800092c <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800148c:	08007dfc 	.word	0x08007dfc
  ldr r2, =_sbss
 8001490:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001494:	20000230 	.word	0x20000230

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f001 fd01 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f80e 	bl	80014cc <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fe1e 	bl	80010fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_InitTick+0x6c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d023      	beq.n	8001528 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_InitTick+0x70>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_InitTick+0x6c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fd0d 	bl	8002f16 <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d809      	bhi.n	800151c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001510:	f001 fcd7 	bl	8002ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_InitTick+0x74>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e007      	b.n	800152c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e004      	b.n	800152c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e001      	b.n	800152c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000001c 	.word	0x2000001c
 800153c:	20000014 	.word	0x20000014
 8001540:	20000018 	.word	0x20000018

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	2000001c 	.word	0x2000001c
 8001568:	2000022c 	.word	0x2000022c

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000022c 	.word	0x2000022c

08001584 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	609a      	str	r2, [r3, #8]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3360      	adds	r3, #96	; 0x60
 80015fe:	461a      	mov	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <LL_ADC_SetOffset+0x44>)
 800160e:	4013      	ands	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	4313      	orrs	r3, r2
 800161c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	03fff000 	.word	0x03fff000

08001634 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3360      	adds	r3, #96	; 0x60
 8001642:	461a      	mov	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3360      	adds	r3, #96	; 0x60
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3330      	adds	r3, #48	; 0x30
 80016cc:	461a      	mov	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	4413      	add	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	211f      	movs	r1, #31
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0e9b      	lsrs	r3, r3, #26
 80016f4:	f003 011f 	and.w	r1, r3, #31
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	431a      	orrs	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3314      	adds	r3, #20
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0e5b      	lsrs	r3, r3, #25
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	0d1b      	lsrs	r3, r3, #20
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2107      	movs	r1, #7
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	401a      	ands	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0d1b      	lsrs	r3, r3, #20
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0318 	and.w	r3, r3, #24
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001790:	40d9      	lsrs	r1, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	400b      	ands	r3, r1
 8001796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179a:	431a      	orrs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	0007ffff 	.word	0x0007ffff

080017b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6093      	str	r3, [r2, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001824:	d101      	bne.n	800182a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800184c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001874:	d101      	bne.n	800187a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c4:	f043 0202 	orr.w	r2, r3, #2
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <LL_ADC_IsEnabled+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_ADC_IsEnabled+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsDisableOngoing+0x18>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsDisableOngoing+0x1a>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001938:	f043 0204 	orr.w	r2, r3, #4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800195c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001960:	f043 0210 	orr.w	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b04      	cmp	r3, #4
 8001986:	d101      	bne.n	800198c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ae:	f043 0220 	orr.w	r2, r3, #32
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d101      	bne.n	80019da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e136      	b.n	8001c70 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fb97 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fef1 	bl	8001810 <LL_ADC_IsDeepPowerDownEnabled>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fed7 	bl	80017ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff0c 	bl	8001860 <LL_ADC_IsInternalRegulatorEnabled>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fef0 	bl	8001838 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a58:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <HAL_ADC_Init+0x290>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	4a87      	ldr	r2, [pc, #540]	; (8001c7c <HAL_ADC_Init+0x294>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a6c:	e002      	b.n	8001a74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f9      	bne.n	8001a6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff feee 	bl	8001860 <LL_ADC_IsInternalRegulatorEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10d      	bne.n	8001aa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff62 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80cf 	bne.w	8001c5e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 80cb 	bne.w	8001c5e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ad0:	f043 0202 	orr.w	r2, r3, #2
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fefb 	bl	80018d8 <LL_ADC_IsEnabled>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d115      	bne.n	8001b14 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ae8:	4865      	ldr	r0, [pc, #404]	; (8001c80 <HAL_ADC_Init+0x298>)
 8001aea:	f7ff fef5 	bl	80018d8 <LL_ADC_IsEnabled>
 8001aee:	4604      	mov	r4, r0
 8001af0:	4864      	ldr	r0, [pc, #400]	; (8001c84 <HAL_ADC_Init+0x29c>)
 8001af2:	f7ff fef1 	bl	80018d8 <LL_ADC_IsEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	431c      	orrs	r4, r3
 8001afa:	4863      	ldr	r0, [pc, #396]	; (8001c88 <HAL_ADC_Init+0x2a0>)
 8001afc:	f7ff feec 	bl	80018d8 <LL_ADC_IsEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4323      	orrs	r3, r4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	485f      	ldr	r0, [pc, #380]	; (8001c8c <HAL_ADC_Init+0x2a4>)
 8001b10:	f7ff fd38 	bl	8001584 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e5b      	ldrb	r3, [r3, #25]
 8001b18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	3b01      	subs	r3, #1
 8001b48:	045b      	lsls	r3, r3, #17
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_ADC_Init+0x2a8>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fef5 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8001b8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff16 	bl	80019c2 <LL_ADC_INJ_IsConversionOngoing>
 8001b96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d13d      	bne.n	8001c1a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d13a      	bne.n	8001c1a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	69b9      	ldr	r1, [r7, #24]
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d118      	bne.n	8001c0a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	e007      	b.n	8001c1a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10c      	bne.n	8001c3c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f023 010f 	bic.w	r1, r3, #15
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3a:	e007      	b.n	8001c4c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020f 	bic.w	r2, r2, #15
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f023 0303 	bic.w	r3, r3, #3
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c5c:	e007      	b.n	8001c6e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f043 0210 	orr.w	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3724      	adds	r7, #36	; 0x24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	20000014 	.word	0x20000014
 8001c7c:	053e2d63 	.word	0x053e2d63
 8001c80:	50040000 	.word	0x50040000
 8001c84:	50040100 	.word	0x50040100
 8001c88:	50040200 	.word	0x50040200
 8001c8c:	50040300 	.word	0x50040300
 8001c90:	fff0c007 	.word	0xfff0c007

08001c94 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c9c:	4857      	ldr	r0, [pc, #348]	; (8001dfc <HAL_ADC_Start+0x168>)
 8001c9e:	f7ff fd89 	bl	80017b4 <LL_ADC_GetMultimode>
 8001ca2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe63 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 809c 	bne.w	8001dee <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_Start+0x30>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e097      	b.n	8001df4 <HAL_ADC_Start+0x160>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fe61 	bl	8002994 <ADC_Enable>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 8083 	bne.w	8001de4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_ADC_Start+0x16c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d002      	beq.n	8001d02 <HAL_ADC_Start+0x6e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e000      	b.n	8001d04 <HAL_ADC_Start+0x70>
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_ADC_Start+0x170>)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2a:	d106      	bne.n	8001d3a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	f023 0206 	bic.w	r2, r3, #6
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	; 0x58
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	221c      	movs	r2, #28
 8001d46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <HAL_ADC_Start+0x16c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start+0xcc>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Start+0xce>
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_ADC_Start+0x170>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d008      	beq.n	8001d7c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d002      	beq.n	8001d7c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d114      	bne.n	8001da6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fdc0 	bl	8001924 <LL_ADC_REG_StartConversion>
 8001da4:	e025      	b.n	8001df2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <HAL_ADC_Start+0x16c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d002      	beq.n	8001dc2 <HAL_ADC_Start+0x12e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_Start+0x130>
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_ADC_Start+0x170>)
 8001dc4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00f      	beq.n	8001df2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
 8001de2:	e006      	b.n	8001df2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001dec:	e001      	b.n	8001df2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
 8001df0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	50040300 	.word	0x50040300
 8001e00:	50040100 	.word	0x50040100
 8001e04:	50040000 	.word	0x50040000

08001e08 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Stop+0x16>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e023      	b.n	8001e66 <HAL_ADC_Stop+0x5e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e26:	2103      	movs	r1, #3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fcf7 	bl	800281c <ADC_ConversionStop>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fe31 	bl	8002aa0 <ADC_Disable>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7a:	4866      	ldr	r0, [pc, #408]	; (8002014 <HAL_ADC_PollForConversion+0x1a4>)
 8001e7c:	f7ff fc9a 	bl	80017b4 <LL_ADC_GetMultimode>
 8001e80:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d102      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e02a      	b.n	8001ee6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d002      	beq.n	8001ea2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b09      	cmp	r3, #9
 8001ea0:	d111      	bne.n	8001ec6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0a4      	b.n	800200a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ec4:	e00f      	b.n	8001ee6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ec6:	4853      	ldr	r0, [pc, #332]	; (8002014 <HAL_ADC_PollForConversion+0x1a4>)
 8001ec8:	f7ff fc82 	bl	80017d0 <LL_ADC_GetMultiDMATransfer>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e093      	b.n	800200a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ee6:	f7ff fb41 	bl	800156c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eec:	e021      	b.n	8001f32 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef4:	d01d      	beq.n	8001f32 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ef6:	f7ff fb39 	bl	800156c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <HAL_ADC_PollForConversion+0x9c>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d112      	bne.n	8001f32 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10b      	bne.n	8001f32 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0204 	orr.w	r2, r3, #4
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e06b      	b.n	800200a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0d6      	beq.n	8001eee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fba0 	bl	8001696 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01c      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e5b      	ldrb	r3, [r3, #25]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d118      	bne.n	8001f96 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d111      	bne.n	8001f96 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d105      	bne.n	8001f96 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <HAL_ADC_PollForConversion+0x1a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d002      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0x136>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	e000      	b.n	8001fa8 <HAL_ADC_PollForConversion+0x138>
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_ADC_PollForConversion+0x1ac>)
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d008      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d002      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	d104      	bne.n	8001fcc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e00c      	b.n	8001fe6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_ADC_PollForConversion+0x1a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d002      	beq.n	8001fdc <HAL_ADC_PollForConversion+0x16c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e000      	b.n	8001fde <HAL_ADC_PollForConversion+0x16e>
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_ADC_PollForConversion+0x1ac>)
 8001fde:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d104      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e008      	b.n	8002008 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	220c      	movs	r2, #12
 8002006:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	50040300 	.word	0x50040300
 8002018:	50040100 	.word	0x50040100
 800201c:	50040000 	.word	0x50040000

08002020 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0b6      	sub	sp, #216	; 0xd8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x22>
 800205a:	2302      	movs	r3, #2
 800205c:	e3c7      	b.n	80027ee <HAL_ADC_ConfigChannel+0x7b2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fc82 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 83a8 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d824      	bhi.n	80020ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	3b02      	subs	r3, #2
 8002086:	2b03      	cmp	r3, #3
 8002088:	d81b      	bhi.n	80020c2 <HAL_ADC_ConfigChannel+0x86>
 800208a:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_ADC_ConfigChannel+0x54>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020a9 	.word	0x080020a9
 8002098:	080020b1 	.word	0x080020b1
 800209c:	080020b9 	.word	0x080020b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	220c      	movs	r2, #12
 80020a4:	605a      	str	r2, [r3, #4]
          break;
 80020a6:	e011      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2212      	movs	r2, #18
 80020ac:	605a      	str	r2, [r3, #4]
          break;
 80020ae:	e00d      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2218      	movs	r2, #24
 80020b4:	605a      	str	r2, [r3, #4]
          break;
 80020b6:	e009      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	605a      	str	r2, [r3, #4]
          break;
 80020c0:	e004      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2206      	movs	r2, #6
 80020c6:	605a      	str	r2, [r3, #4]
          break;
 80020c8:	e000      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	f7ff faef 	bl	80016bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fc46 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 80020e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fc66 	bl	80019c2 <LL_ADC_INJ_IsConversionOngoing>
 80020f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 81a6 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 81a1 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	461a      	mov	r2, r3
 800211c:	f7ff fafa 	bl	8001714 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	08db      	lsrs	r3, r3, #3
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00a      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002152:	f7ff fa4b 	bl	80015ec <LL_ADC_SetOffset>
 8002156:	e17b      	b.n	8002450 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fa68 	bl	8001634 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x148>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fa5d 	bl	8001634 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	e01e      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x186>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fa52 	bl	8001634 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80021b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_ConfigChannel+0x19e>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	e018      	b.n	800220c <HAL_ADC_ConfigChannel+0x1d0>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fa21 	bl	8001660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fa05 	bl	8001634 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_ADC_ConfigChannel+0x20e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f9fa 	bl	8001634 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	e01e      	b.n	8002288 <HAL_ADC_ConfigChannel+0x24c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f9ef 	bl	8001634 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800226c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e004      	b.n	8002286 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x264>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	e018      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x296>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80022c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f9be 	bl	8001660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f9a2 	bl	8001634 <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x2d4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff f997 	bl	8001634 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 021f 	and.w	r2, r3, #31
 800230e:	e01e      	b.n	800234e <HAL_ADC_ConfigChannel+0x312>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f98c 	bl	8001634 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800232e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x32a>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	e016      	b.n	8002394 <HAL_ADC_ConfigChannel+0x358>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800237e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800238a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	2102      	movs	r1, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff f95d 	bl	8001660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2103      	movs	r1, #3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f941 	bl	8001634 <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x396>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2103      	movs	r1, #3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f936 	bl	8001634 <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	e017      	b.n	8002402 <HAL_ADC_ConfigChannel+0x3c6>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2103      	movs	r1, #3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f92b 	bl	8001634 <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e003      	b.n	8002400 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80023f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x3de>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e011      	b.n	800243e <HAL_ADC_ConfigChannel+0x402>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800242a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800243e:	429a      	cmp	r2, r3
 8002440:	d106      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	2103      	movs	r1, #3
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f908 	bl	8001660 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fa3f 	bl	80018d8 <LL_ADC_IsEnabled>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 813f 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f7ff f97c 	bl	800176c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a8e      	ldr	r2, [pc, #568]	; (80026b4 <HAL_ADC_ConfigChannel+0x678>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f040 8130 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x46c>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b09      	cmp	r3, #9
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e019      	b.n	80024dc <HAL_ADC_ConfigChannel+0x4a0>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80024c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	bf94      	ite	ls
 80024d6:	2301      	movls	r3, #1
 80024d8:	2300      	movhi	r3, #0
 80024da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d079      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x4c0>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	e015      	b.n	8002528 <HAL_ADC_ConfigChannel+0x4ec>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x50c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	e017      	b.n	8002578 <HAL_ADC_ConfigChannel+0x53c>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002558:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800255a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x562>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	e018      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x594>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d0:	430b      	orrs	r3, r1
 80025d2:	e080      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x5b4>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	069b      	lsls	r3, r3, #26
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ee:	e015      	b.n	800261c <HAL_ADC_ConfigChannel+0x5e0>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_ADC_ConfigChannel+0x600>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	e017      	b.n	800266c <HAL_ADC_ConfigChannel+0x630>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]
  return result;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	ea42 0103 	orr.w	r1, r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x65c>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3b1e      	subs	r3, #30
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002696:	e01d      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x698>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	613b      	str	r3, [r7, #16]
  return result;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e005      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x684>
 80026b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d4:	430b      	orrs	r3, r1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	4619      	mov	r1, r3
 80026dc:	f7ff f81a 	bl	8001714 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <HAL_ADC_ConfigChannel+0x7bc>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07a      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ec:	4843      	ldr	r0, [pc, #268]	; (80027fc <HAL_ADC_ConfigChannel+0x7c0>)
 80026ee:	f7fe ff6f 	bl	80015d0 <LL_ADC_GetCommonPathInternalCh>
 80026f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a41      	ldr	r2, [pc, #260]	; (8002800 <HAL_ADC_ConfigChannel+0x7c4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d12c      	bne.n	800275a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d126      	bne.n	800275a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_ADC_ConfigChannel+0x7c8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x6e4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <HAL_ADC_ConfigChannel+0x7cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d15d      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002728:	4619      	mov	r1, r3
 800272a:	4834      	ldr	r0, [pc, #208]	; (80027fc <HAL_ADC_ConfigChannel+0x7c0>)
 800272c:	f7fe ff3d 	bl	80015aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_ADC_ConfigChannel+0x7d0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	4a36      	ldr	r2, [pc, #216]	; (8002810 <HAL_ADC_ConfigChannel+0x7d4>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800274a:	e002      	b.n	8002752 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b01      	subs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002758:	e040      	b.n	80027dc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <HAL_ADC_ConfigChannel+0x7d8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d118      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x75a>
 8002764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d112      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_ADC_ConfigChannel+0x7c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x748>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_ADC_ConfigChannel+0x7cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d12d      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278c:	4619      	mov	r1, r3
 800278e:	481b      	ldr	r0, [pc, #108]	; (80027fc <HAL_ADC_ConfigChannel+0x7c0>)
 8002790:	f7fe ff0b 	bl	80015aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002794:	e024      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_ADC_ConfigChannel+0x7dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d120      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11a      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_ADC_ConfigChannel+0x7c8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d115      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027be:	4619      	mov	r1, r3
 80027c0:	480e      	ldr	r0, [pc, #56]	; (80027fc <HAL_ADC_ConfigChannel+0x7c0>)
 80027c2:	f7fe fef2 	bl	80015aa <LL_ADC_SetCommonPathInternalCh>
 80027c6:	e00c      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80027da:	e002      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	37d8      	adds	r7, #216	; 0xd8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	80080000 	.word	0x80080000
 80027fc:	50040300 	.word	0x50040300
 8002800:	c7520000 	.word	0xc7520000
 8002804:	50040000 	.word	0x50040000
 8002808:	50040200 	.word	0x50040200
 800280c:	20000014 	.word	0x20000014
 8002810:	053e2d63 	.word	0x053e2d63
 8002814:	cb840000 	.word	0xcb840000
 8002818:	80000001 	.word	0x80000001

0800281c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f89e 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8002838:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f8bf 	bl	80019c2 <LL_ADC_INJ_IsConversionOngoing>
 8002844:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8098 	beq.w	8002984 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02a      	beq.n	80028b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7e5b      	ldrb	r3, [r3, #25]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d126      	bne.n	80028b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7e1b      	ldrb	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d122      	bne.n	80028b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002872:	2301      	movs	r3, #1
 8002874:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002876:	e014      	b.n	80028a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4a45      	ldr	r2, [pc, #276]	; (8002990 <ADC_ConversionStop+0x174>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d90d      	bls.n	800289c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0210 	orr.w	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e074      	b.n	8002986 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d1e3      	bne.n	8002878 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d014      	beq.n	80028e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f856 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f813 	bl	80018fe <LL_ADC_IsDisableOngoing>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f832 	bl	800194c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d014      	beq.n	8002918 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f865 	bl	80019c2 <LL_ADC_INJ_IsConversionOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fffb 	bl	80018fe <LL_ADC_IsDisableOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f841 	bl	800199a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d005      	beq.n	800292a <ADC_ConversionStop+0x10e>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d105      	bne.n	8002930 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002924:	230c      	movs	r3, #12
 8002926:	617b      	str	r3, [r7, #20]
        break;
 8002928:	e005      	b.n	8002936 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800292a:	2308      	movs	r3, #8
 800292c:	617b      	str	r3, [r7, #20]
        break;
 800292e:	e002      	b.n	8002936 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002930:	2304      	movs	r3, #4
 8002932:	617b      	str	r3, [r7, #20]
        break;
 8002934:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002936:	f7fe fe19 	bl	800156c <HAL_GetTick>
 800293a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800293c:	e01b      	b.n	8002976 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800293e:	f7fe fe15 	bl	800156c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b05      	cmp	r3, #5
 800294a:	d914      	bls.n	8002976 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0210 	orr.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e007      	b.n	8002986 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1dc      	bne.n	800293e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	a33fffff 	.word	0xa33fffff

08002994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe ff97 	bl	80018d8 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d169      	bne.n	8002a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <ADC_Enable+0xfc>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e055      	b.n	8002a86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe ff52 	bl	8001888 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029e4:	482b      	ldr	r0, [pc, #172]	; (8002a94 <ADC_Enable+0x100>)
 80029e6:	f7fe fdf3 	bl	80015d0 <LL_ADC_GetCommonPathInternalCh>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <ADC_Enable+0x104>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <ADC_Enable+0x108>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a0e:	e002      	b.n	8002a16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f9      	bne.n	8002a10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fda6 	bl	800156c <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a22:	e028      	b.n	8002a76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe ff55 	bl	80018d8 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe ff25 	bl	8001888 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a3e:	f7fe fd95 	bl	800156c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d914      	bls.n	8002a76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d00d      	beq.n	8002a76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0210 	orr.w	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e007      	b.n	8002a86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d1cf      	bne.n	8002a24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	8000003f 	.word	0x8000003f
 8002a94:	50040300 	.word	0x50040300
 8002a98:	20000014 	.word	0x20000014
 8002a9c:	053e2d63 	.word	0x053e2d63

08002aa0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe ff26 	bl	80018fe <LL_ADC_IsDisableOngoing>
 8002ab2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe ff0d 	bl	80018d8 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d047      	beq.n	8002b54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d144      	bne.n	8002b54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030d 	and.w	r3, r3, #13
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d10c      	bne.n	8002af2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe fee7 	bl	80018b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aea:	f7fe fd3f 	bl	800156c <HAL_GetTick>
 8002aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002af0:	e029      	b.n	8002b46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0210 	orr.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e023      	b.n	8002b56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b0e:	f7fe fd2d 	bl	800156c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d914      	bls.n	8002b46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1dc      	bne.n	8002b0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <LL_ADC_IsEnabled>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <LL_ADC_IsEnabled+0x18>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <LL_ADC_IsEnabled+0x1a>
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b09f      	sub	sp, #124	; 0x7c
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e093      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002be4:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e001      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e072      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ffb8 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 8002c14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ffb2 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d154      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d151      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02c      	beq.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c4a:	035b      	lsls	r3, r3, #13
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c54:	4829      	ldr	r0, [pc, #164]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c56:	f7ff ff82 	bl	8002b5e <LL_ADC_IsEnabled>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4828      	ldr	r0, [pc, #160]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c5e:	f7ff ff7e 	bl	8002b5e <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	431c      	orrs	r4, r3
 8002c66:	4828      	ldr	r0, [pc, #160]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c68:	f7ff ff79 	bl	8002b5e <LL_ADC_IsEnabled>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d137      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c7c:	f023 030f 	bic.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c90:	e028      	b.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9e:	4817      	ldr	r0, [pc, #92]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ca0:	f7ff ff5d 	bl	8002b5e <LL_ADC_IsEnabled>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	4816      	ldr	r0, [pc, #88]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ca8:	f7ff ff59 	bl	8002b5e <LL_ADC_IsEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	431c      	orrs	r4, r3
 8002cb0:	4815      	ldr	r0, [pc, #84]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002cb2:	f7ff ff54 	bl	8002b5e <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4323      	orrs	r3, r4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d112      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cc6:	f023 030f 	bic.w	r3, r3, #15
 8002cca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ccc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cce:	e009      	b.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	377c      	adds	r7, #124	; 0x7c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	50040000 	.word	0x50040000
 8002d00:	50040100 	.word	0x50040100
 8002d04:	50040300 	.word	0x50040300
 8002d08:	50040200 	.word	0x50040200

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <__NVIC_EnableIRQ+0x38>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db0a      	blt.n	8002dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	490c      	ldr	r1, [pc, #48]	; (8002df8 <__NVIC_SetPriority+0x4c>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd4:	e00a      	b.n	8002dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4908      	ldr	r1, [pc, #32]	; (8002dfc <__NVIC_SetPriority+0x50>)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3b04      	subs	r3, #4
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	440b      	add	r3, r1
 8002dea:	761a      	strb	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf28      	it	cs
 8002e1e:	2304      	movcs	r3, #4
 8002e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <NVIC_EncodePriority+0x30>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	e000      	b.n	8002e32 <NVIC_EncodePriority+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	4313      	orrs	r3, r2
         );
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e8c:	f7ff ff8e 	bl	8002dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff29 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff3e 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff8e 	bl	8002e00 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5d 	bl	8002dac <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff31 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffa2 	bl	8002e68 <SysTick_Config>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d008      	beq.n	8002f58 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e022      	b.n	8002f9e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 020e 	bic.w	r2, r2, #14
 8002f66:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f003 021c 	and.w	r2, r3, #28
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d005      	beq.n	8002fce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e029      	b.n	8003022 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020e 	bic.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 021c 	and.w	r2, r3, #28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4798      	blx	r3
    }
  }
  return status;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_FLASH_Program+0xd0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_FLASH_Program+0x1e>
 8003046:	2302      	movs	r3, #2
 8003048:	e053      	b.n	80030f2 <HAL_FLASH_Program+0xc6>
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_FLASH_Program+0xd0>)
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003050:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003054:	f000 f888 	bl	8003168 <FLASH_WaitForLastOperation>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d143      	bne.n	80030ea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_FLASH_Program+0xd0>)
 8003064:	2200      	movs	r2, #0
 8003066:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_FLASH_Program+0xd4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <HAL_FLASH_Program+0xd4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a21      	ldr	r2, [pc, #132]	; (8003100 <HAL_FLASH_Program+0xd4>)
 800307a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800307e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_FLASH_Program+0xd0>)
 8003082:	2202      	movs	r2, #2
 8003084:	771a      	strb	r2, [r3, #28]
 8003086:	e002      	b.n	800308e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_FLASH_Program+0xd0>)
 800308a:	2200      	movs	r2, #0
 800308c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003098:	68b8      	ldr	r0, [r7, #8]
 800309a:	f000 f8bb 	bl	8003214 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800309e:	2301      	movs	r3, #1
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e010      	b.n	80030c6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d002      	beq.n	80030b0 <HAL_FLASH_Program+0x84>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d10a      	bne.n	80030c6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	68b8      	ldr	r0, [r7, #8]
 80030b6:	f000 f8d3 	bl	8003260 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d102      	bne.n	80030c6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80030c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030c4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030ca:	f000 f84d 	bl	8003168 <FLASH_WaitForLastOperation>
 80030ce:	4603      	mov	r3, r0
 80030d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_FLASH_Program+0xd4>)
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4907      	ldr	r1, [pc, #28]	; (8003100 <HAL_FLASH_Program+0xd4>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80030e6:	f000 f9eb 	bl	80034c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_FLASH_Program+0xd0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]

  return status;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000020 	.word	0x20000020
 8003100:	40022000 	.word	0x40022000

08003104 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_FLASH_Unlock+0x38>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da0b      	bge.n	800312e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_FLASH_Unlock+0x38>)
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_FLASH_Unlock+0x3c>)
 800311a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <HAL_FLASH_Unlock+0x38>)
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_FLASH_Unlock+0x40>)
 8003120:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_FLASH_Unlock+0x38>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	da01      	bge.n	800312e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800312e:	79fb      	ldrb	r3, [r7, #7]
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40022000 	.word	0x40022000
 8003140:	45670123 	.word	0x45670123
 8003144:	cdef89ab 	.word	0xcdef89ab

08003148 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_FLASH_Lock+0x1c>)
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <HAL_FLASH_Lock+0x1c>)
 8003152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003156:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40022000 	.word	0x40022000

08003168 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003170:	f7fe f9fc 	bl	800156c <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003176:	e00d      	b.n	8003194 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317e:	d009      	beq.n	8003194 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003180:	f7fe f9f4 	bl	800156c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d801      	bhi.n	8003194 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e037      	b.n	8003204 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1eb      	bne.n	8003178 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01e      	beq.n	80031f0 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <FLASH_WaitForLastOperation+0xa8>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <FLASH_WaitForLastOperation+0xa8>)
 80031bc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <FLASH_WaitForLastOperation+0x70>
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	618b      	str	r3, [r1, #24]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <FLASH_WaitForLastOperation+0x84>
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031ea:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e009      	b.n	8003204 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <FLASH_WaitForLastOperation+0xa4>)
 80031fe:	2201      	movs	r2, #1
 8003200:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40022000 	.word	0x40022000
 8003210:	20000020 	.word	0x20000020

08003214 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <FLASH_Program_DoubleWord+0x48>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <FLASH_Program_DoubleWord+0x48>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003232:	f3bf 8f6f 	isb	sy
}
 8003236:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	000a      	movs	r2, r1
 8003246:	2300      	movs	r3, #0
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	3104      	adds	r1, #4
 800324c:	4613      	mov	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40022000 	.word	0x40022000

08003260 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <FLASH_Program_Fast+0x68>)
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <FLASH_Program_Fast+0x68>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003282:	f3ef 8310 	mrs	r3, PRIMASK
 8003286:	60fb      	str	r3, [r7, #12]
  return(result);
 8003288:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800328a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800328c:	b672      	cpsid	i
}
 800328e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	3304      	adds	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3304      	adds	r3, #4
 80032a2:	617b      	str	r3, [r7, #20]
    row_index--;
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ef      	bne.n	8003290 <FLASH_Program_Fast+0x30>
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80032bc:	bf00      	nop
 80032be:	3724      	adds	r7, #36	; 0x24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40022000 	.word	0x40022000

080032cc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_FLASHEx_Erase+0x16>
 80032de:	2302      	movs	r3, #2
 80032e0:	e087      	b.n	80033f2 <HAL_FLASHEx_Erase+0x126>
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032ec:	f7ff ff3c 	bl	8003168 <FLASH_WaitForLastOperation>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d177      	bne.n	80033ea <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032fa:	4b40      	ldr	r3, [pc, #256]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003300:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800330c:	4b3c      	ldr	r3, [pc, #240]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a38      	ldr	r2, [pc, #224]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 800331e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003322:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003324:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 8003326:	2203      	movs	r2, #3
 8003328:	771a      	strb	r2, [r3, #28]
 800332a:	e016      	b.n	800335a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 800332e:	2201      	movs	r2, #1
 8003330:	771a      	strb	r2, [r3, #28]
 8003332:	e012      	b.n	800335a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003334:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2e      	ldr	r2, [pc, #184]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 8003346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 800334e:	2202      	movs	r2, #2
 8003350:	771a      	strb	r2, [r3, #28]
 8003352:	e002      	b.n	800335a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 8003356:	2200      	movs	r2, #0
 8003358:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d113      	bne.n	800338a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f84c 	bl	8003404 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800336c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003370:	f7ff fefa 	bl	8003168 <FLASH_WaitForLastOperation>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	4a20      	ldr	r2, [pc, #128]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 800337e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	6153      	str	r3, [r2, #20]
 8003388:	e02d      	b.n	80033e6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003390:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	e01d      	b.n	80033d6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4619      	mov	r1, r3
 80033a0:	68b8      	ldr	r0, [r7, #8]
 80033a2:	f000 f857 	bl	8003454 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033aa:	f7ff fedd 	bl	8003168 <FLASH_WaitForLastOperation>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_FLASHEx_Erase+0x134>)
 80033b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	601a      	str	r2, [r3, #0]
          break;
 80033ce:	e00a      	b.n	80033e6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3301      	adds	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3d9      	bcc.n	800339a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80033e6:	f000 f86b 	bl	80034c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_FLASHEx_Erase+0x130>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000020 	.word	0x20000020
 8003400:	40022000 	.word	0x40022000

08003404 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <FLASH_MassErase+0x4c>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <FLASH_MassErase+0x4c>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <FLASH_MassErase+0x4c>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	4a07      	ldr	r2, [pc, #28]	; (8003450 <FLASH_MassErase+0x4c>)
 8003432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003436:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <FLASH_MassErase+0x4c>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <FLASH_MassErase+0x4c>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6153      	str	r3, [r2, #20]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40022000 	.word	0x40022000

08003454 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <FLASH_PageErase+0x68>)
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <FLASH_PageErase+0x68>)
 800346e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003472:	6153      	str	r3, [r2, #20]
 8003474:	e005      	b.n	8003482 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <FLASH_PageErase+0x68>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <FLASH_PageErase+0x68>)
 800347c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003480:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <FLASH_PageErase+0x68>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003492:	490a      	ldr	r1, [pc, #40]	; (80034bc <FLASH_PageErase+0x68>)
 8003494:	4313      	orrs	r3, r2
 8003496:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <FLASH_PageErase+0x68>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <FLASH_PageErase+0x68>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <FLASH_PageErase+0x68>)
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <FLASH_PageErase+0x68>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ae:	6153      	str	r3, [r2, #20]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40022000 	.word	0x40022000

080034c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <FLASH_FlushCaches+0x8c>)
 80034c8:	7f1b      	ldrb	r3, [r3, #28]
 80034ca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d002      	beq.n	80034d8 <FLASH_FlushCaches+0x18>
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d117      	bne.n	8003508 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b17      	ldr	r3, [pc, #92]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <FLASH_FlushCaches+0x90>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a13      	ldr	r2, [pc, #76]	; (8003550 <FLASH_FlushCaches+0x90>)
 8003502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003506:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d002      	beq.n	8003514 <FLASH_FlushCaches+0x54>
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d111      	bne.n	8003538 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <FLASH_FlushCaches+0x90>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <FLASH_FlushCaches+0x90>)
 800351a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <FLASH_FlushCaches+0x90>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <FLASH_FlushCaches+0x90>)
 8003526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800352a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <FLASH_FlushCaches+0x90>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <FLASH_FlushCaches+0x90>)
 8003532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003536:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <FLASH_FlushCaches+0x8c>)
 800353a:	2200      	movs	r2, #0
 800353c:	771a      	strb	r2, [r3, #28]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000020 	.word	0x20000020
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003562:	e17f      	b.n	8003864 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8171 	beq.w	800385e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d005      	beq.n	8003594 <HAL_GPIO_Init+0x40>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d130      	bne.n	80035f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ca:	2201      	movs	r2, #1
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0201 	and.w	r2, r3, #1
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d118      	bne.n	8003634 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003608:	2201      	movs	r2, #1
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f003 0201 	and.w	r2, r3, #1
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b03      	cmp	r3, #3
 800363e:	d017      	beq.n	8003670 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d123      	bne.n	80036c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220f      	movs	r2, #15
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	6939      	ldr	r1, [r7, #16]
 80036c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80ac 	beq.w	800385e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_GPIO_Init+0x330>)
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <HAL_GPIO_Init+0x330>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6613      	str	r3, [r2, #96]	; 0x60
 8003712:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_GPIO_Init+0x330>)
 8003714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800371e:	4a5a      	ldr	r2, [pc, #360]	; (8003888 <HAL_GPIO_Init+0x334>)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003748:	d025      	beq.n	8003796 <HAL_GPIO_Init+0x242>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a4f      	ldr	r2, [pc, #316]	; (800388c <HAL_GPIO_Init+0x338>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <HAL_GPIO_Init+0x23e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <HAL_GPIO_Init+0x33c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <HAL_GPIO_Init+0x23a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4d      	ldr	r2, [pc, #308]	; (8003894 <HAL_GPIO_Init+0x340>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x236>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4c      	ldr	r2, [pc, #304]	; (8003898 <HAL_GPIO_Init+0x344>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x232>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4b      	ldr	r2, [pc, #300]	; (800389c <HAL_GPIO_Init+0x348>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x22e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <HAL_GPIO_Init+0x34c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x22a>
 800377a:	2306      	movs	r3, #6
 800377c:	e00c      	b.n	8003798 <HAL_GPIO_Init+0x244>
 800377e:	2307      	movs	r3, #7
 8003780:	e00a      	b.n	8003798 <HAL_GPIO_Init+0x244>
 8003782:	2305      	movs	r3, #5
 8003784:	e008      	b.n	8003798 <HAL_GPIO_Init+0x244>
 8003786:	2304      	movs	r3, #4
 8003788:	e006      	b.n	8003798 <HAL_GPIO_Init+0x244>
 800378a:	2303      	movs	r3, #3
 800378c:	e004      	b.n	8003798 <HAL_GPIO_Init+0x244>
 800378e:	2302      	movs	r3, #2
 8003790:	e002      	b.n	8003798 <HAL_GPIO_Init+0x244>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_GPIO_Init+0x244>
 8003796:	2300      	movs	r3, #0
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	f002 0203 	and.w	r2, r2, #3
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	4093      	lsls	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037a8:	4937      	ldr	r1, [pc, #220]	; (8003888 <HAL_GPIO_Init+0x334>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_GPIO_Init+0x350>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037da:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <HAL_GPIO_Init+0x350>)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037e0:	4b30      	ldr	r3, [pc, #192]	; (80038a4 <HAL_GPIO_Init+0x350>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <HAL_GPIO_Init+0x350>)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800380a:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_GPIO_Init+0x350>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_GPIO_Init+0x350>)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_GPIO_Init+0x350>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003858:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_GPIO_Init+0x350>)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3301      	adds	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f ae78 	bne.w	8003564 <HAL_GPIO_Init+0x10>
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000
 800388c:	48000400 	.word	0x48000400
 8003890:	48000800 	.word	0x48000800
 8003894:	48000c00 	.word	0x48000c00
 8003898:	48001000 	.word	0x48001000
 800389c:	48001400 	.word	0x48001400
 80038a0:	48001800 	.word	0x48001800
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000

080038f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003902:	d130      	bne.n	8003966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d038      	beq.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800391a:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2232      	movs	r2, #50	; 0x32
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	3301      	adds	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003938:	e002      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b01      	subs	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d102      	bne.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f2      	bne.n	800393a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d110      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e00f      	b.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d007      	beq.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800397c:	4a05      	ldr	r2, [pc, #20]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40007000 	.word	0x40007000
 8003998:	20000014 	.word	0x20000014
 800399c:	431bde83 	.word	0x431bde83

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e3ca      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b2:	4b97      	ldr	r3, [pc, #604]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039bc:	4b94      	ldr	r3, [pc, #592]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80e4 	beq.w	8003b9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_RCC_OscConfig+0x4a>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	f040 808b 	bne.w	8003af8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 8087 	bne.w	8003af8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e3a2      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	4b82      	ldr	r3, [pc, #520]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCC_OscConfig+0x7c>
 8003a12:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_OscConfig+0x88>
 8003a1c:	4b7c      	ldr	r3, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d223      	bcs.n	8003a74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd55 	bl	80044e0 <RCC_SetFlashLatencyFromMSIRange>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e383      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a40:	4b73      	ldr	r3, [pc, #460]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a72      	ldr	r2, [pc, #456]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b70      	ldr	r3, [pc, #448]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	496d      	ldr	r1, [pc, #436]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	4968      	ldr	r1, [pc, #416]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e025      	b.n	8003ac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4960      	ldr	r1, [pc, #384]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a92:	4b5f      	ldr	r3, [pc, #380]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	495b      	ldr	r1, [pc, #364]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd15 	bl	80044e0 <RCC_SetFlashLatencyFromMSIRange>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e343      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac0:	f000 fc4a 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b52      	ldr	r3, [pc, #328]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	4950      	ldr	r1, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_RCC_OscConfig+0x278>)
 8003ade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	; (8003c1c <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fcf1 	bl	80014cc <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d052      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	e327      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d032      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b00:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fd2e 	bl	800156c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b14:	f7fd fd2a 	bl	800156c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e310      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b26:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a36      	ldr	r2, [pc, #216]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4931      	ldr	r1, [pc, #196]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	492c      	ldr	r1, [pc, #176]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
 8003b64:	e01a      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b72:	f7fd fcfb 	bl	800156c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b7a:	f7fd fcf7 	bl	800156c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2dd      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x1da>
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d074      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x21a>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d064      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2f0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d160      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e2ba      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x24a>
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e026      	b.n	8003c38 <HAL_RCC_OscConfig+0x298>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCC_OscConfig+0x280>
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a02      	ldr	r2, [pc, #8]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x298>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	08007da4 	.word	0x08007da4
 8003c18:	20000014 	.word	0x20000014
 8003c1c:	20000018 	.word	0x20000018
 8003c20:	4ba0      	ldr	r3, [pc, #640]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a9f      	ldr	r2, [pc, #636]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b9d      	ldr	r3, [pc, #628]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9c      	ldr	r2, [pc, #624]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fc94 	bl	800156c <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd fc90 	bl	800156c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e276      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	4b92      	ldr	r3, [pc, #584]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x2a8>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fc80 	bl	800156c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fc7c 	bl	800156c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e262      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c82:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2d0>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d060      	beq.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x310>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d119      	bne.n	8003cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d116      	bne.n	8003cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x328>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e23f      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	4973      	ldr	r1, [pc, #460]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	e040      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d023      	beq.n	8003d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce6:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fc3b 	bl	800156c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fc37 	bl	800156c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e21d      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	495f      	ldr	r1, [pc, #380]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
 8003d2c:	e018      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5c      	ldr	r2, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fc17 	bl	800156c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fd fc13 	bl	800156c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1f9      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fbf2 	bl	800156c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fd fbee 	bl	800156c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1d4      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <HAL_RCC_OscConfig+0x3ec>
 8003dac:	e01b      	b.n	8003de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd fbd5 	bl	800156c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fd fbd1 	bl	800156c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1b7      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd8:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ef      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a6 	beq.w	8003f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df4:	2300      	movs	r3, #0
 8003df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d118      	bne.n	8003e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e38:	f7fd fb98 	bl	800156c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd fb94 	bl	800156c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e17a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4d8>
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e76:	e029      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d115      	bne.n	8003eac <HAL_RCC_OscConfig+0x50c>
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea0:	e014      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	4b9c      	ldr	r3, [pc, #624]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	4a9b      	ldr	r2, [pc, #620]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ebc:	4b98      	ldr	r3, [pc, #608]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	4a97      	ldr	r2, [pc, #604]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d016      	beq.n	8003f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fd fb4a 	bl	800156c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fd fb46 	bl	800156c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e12a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ed      	beq.n	8003edc <HAL_RCC_OscConfig+0x53c>
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fb33 	bl	800156c <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fd fb2f 	bl	800156c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e113      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f20:	4b7f      	ldr	r3, [pc, #508]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ed      	bne.n	8003f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f34:	4b7a      	ldr	r3, [pc, #488]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	4a79      	ldr	r2, [pc, #484]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80fe 	beq.w	8004146 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	f040 80d0 	bne.w	80040f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f54:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d130      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	3b01      	subs	r3, #1
 8003f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d127      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11f      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f94:	2a07      	cmp	r2, #7
 8003f96:	bf14      	ite	ne
 8003f98:	2201      	movne	r2, #1
 8003f9a:	2200      	moveq	r2, #0
 8003f9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d06e      	beq.n	80040a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d069      	beq.n	80040a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fd0:	4b53      	ldr	r3, [pc, #332]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0ad      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fec:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ff8:	f7fd fab8 	bl	800156c <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd fab4 	bl	800156c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e09a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004012:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800401e:	4b40      	ldr	r3, [pc, #256]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x784>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800402e:	3a01      	subs	r2, #1
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004038:	0212      	lsls	r2, r2, #8
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004040:	0852      	lsrs	r2, r2, #1
 8004042:	3a01      	subs	r2, #1
 8004044:	0552      	lsls	r2, r2, #21
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800404c:	0852      	lsrs	r2, r2, #1
 800404e:	3a01      	subs	r2, #1
 8004050:	0652      	lsls	r2, r2, #25
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004058:	0912      	lsrs	r2, r2, #4
 800405a:	0452      	lsls	r2, r2, #17
 800405c:	430a      	orrs	r2, r1
 800405e:	4930      	ldr	r1, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004060:	4313      	orrs	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004064:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407c:	f7fd fa76 	bl	800156c <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fa72 	bl	800156c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e058      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a2:	e050      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e04f      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d148      	bne.n	8004146 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040cc:	f7fd fa4e 	bl	800156c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd fa4a 	bl	800156c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e030      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x734>
 80040f2:	e028      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d023      	beq.n	8004142 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fd fa31 	bl	800156c <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	e00c      	b.n	8004128 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7fd fa2d 	bl	800156c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d905      	bls.n	8004128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e013      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
 8004120:	40021000 	.word	0x40021000
 8004124:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x7b0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ec      	bne.n	800410e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_OscConfig+0x7b0>)
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4905      	ldr	r1, [pc, #20]	; (8004150 <HAL_RCC_OscConfig+0x7b0>)
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_OscConfig+0x7b4>)
 800413c:	4013      	ands	r3, r2
 800413e:	60cb      	str	r3, [r1, #12]
 8004140:	e001      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	feeefffc 	.word	0xfeeefffc

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0e7      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b75      	ldr	r3, [pc, #468]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b72      	ldr	r3, [pc, #456]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4970      	ldr	r1, [pc, #448]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b6e      	ldr	r3, [pc, #440]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cf      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b66      	ldr	r3, [pc, #408]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4960      	ldr	r1, [pc, #384]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d04c      	beq.n	8004270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	4b5a      	ldr	r3, [pc, #360]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0a6      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b54      	ldr	r3, [pc, #336]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d115      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e09a      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420e:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421e:	4b4a      	ldr	r3, [pc, #296]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e086      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4943      	ldr	r1, [pc, #268]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fd f994 	bl	800156c <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fd f990 	bl	800156c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e06e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b3a      	ldr	r3, [pc, #232]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004288:	429a      	cmp	r2, r3
 800428a:	d208      	bcs.n	800429e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	492b      	ldr	r1, [pc, #172]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800429e:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d210      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	4923      	ldr	r1, [pc, #140]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4918      	ldr	r1, [pc, #96]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4910      	ldr	r1, [pc, #64]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800430c:	f000 f824 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	490b      	ldr	r1, [pc, #44]	; (800434c <HAL_RCC_ClockConfig+0x1f4>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800432a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1fc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd f8cb 	bl	80014cc <HAL_InitTick>
 8004336:	4603      	mov	r3, r0
 8004338:	72fb      	strb	r3, [r7, #11]

  return status;
 800433a:	7afb      	ldrb	r3, [r7, #11]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000
 8004348:	40021000 	.word	0x40021000
 800434c:	08007da4 	.word	0x08007da4
 8004350:	20000014 	.word	0x20000014
 8004354:	20000018 	.word	0x20000018

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b3e      	ldr	r3, [pc, #248]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d121      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d11e      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d102      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e004      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043dc:	4b23      	ldr	r3, [pc, #140]	; (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 80043de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d134      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0xa6>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d003      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0xac>
 80043fc:	e005      	b.n	800440a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 8004400:	617b      	str	r3, [r7, #20]
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 8004406:	617b      	str	r3, [r7, #20]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	617b      	str	r3, [r7, #20]
      break;
 800440e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004410:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	3301      	adds	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	fb03 f202 	mul.w	r2, r3, r2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0e5b      	lsrs	r3, r3, #25
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	3301      	adds	r3, #1
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004450:	69bb      	ldr	r3, [r7, #24]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	08007dbc 	.word	0x08007dbc
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000014 	.word	0x20000014

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	08007db4 	.word	0x08007db4

080044b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044b8:	f7ff ffda 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0adb      	lsrs	r3, r3, #11
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	08007db4 	.word	0x08007db4

080044e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044f8:	f7ff f9ee 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 80044fc:	6178      	str	r0, [r7, #20]
 80044fe:	e014      	b.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	4a24      	ldr	r2, [pc, #144]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6593      	str	r3, [r2, #88]	; 0x58
 800450c:	4b22      	ldr	r3, [pc, #136]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004518:	f7ff f9de 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 800451c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004530:	d10b      	bne.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d919      	bls.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2ba0      	cmp	r3, #160	; 0xa0
 800453c:	d902      	bls.n	8004544 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800453e:	2302      	movs	r3, #2
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e013      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004544:	2301      	movs	r3, #1
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e010      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d902      	bls.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004550:	2303      	movs	r3, #3
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	e00a      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d102      	bne.n	8004562 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800455c:	2302      	movs	r3, #2
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	e004      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b70      	cmp	r3, #112	; 0x70
 8004566:	d101      	bne.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004568:	2301      	movs	r3, #1
 800456a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f023 0207 	bic.w	r2, r3, #7
 8004574:	4909      	ldr	r1, [pc, #36]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	d001      	beq.n	800458e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	40022000 	.word	0x40022000

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045a8:	2300      	movs	r3, #0
 80045aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045ac:	2300      	movs	r3, #0
 80045ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d041      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045c4:	d02a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045ca:	d824      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045d0:	d008      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045d6:	d81e      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e0:	d010      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045e2:	e018      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e4:	4b86      	ldr	r3, [pc, #536]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a85      	ldr	r2, [pc, #532]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f0:	e015      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fabb 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004602:	e00c      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3320      	adds	r3, #32
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fba6 	bl	8004d5c <RCCEx_PLLSAI2_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004614:	e003      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	74fb      	strb	r3, [r7, #19]
      break;
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800461c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004624:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004632:	4973      	ldr	r1, [pc, #460]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800463a:	e001      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d041      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004654:	d02a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800465a:	d824      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800465c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004660:	d008      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004666:	d81e      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800466c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004670:	d010      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004672:	e018      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004674:	4b62      	ldr	r3, [pc, #392]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a61      	ldr	r2, [pc, #388]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004680:	e015      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fa73 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004692:	e00c      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3320      	adds	r3, #32
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fb5e 	bl	8004d5c <RCCEx_PLLSAI2_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a4:	e003      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	74fb      	strb	r3, [r7, #19]
      break;
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b4:	4b52      	ldr	r3, [pc, #328]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c2:	494f      	ldr	r1, [pc, #316]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046ca:	e001      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a0 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046e2:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f8:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	4a40      	ldr	r2, [pc, #256]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	6593      	str	r3, [r2, #88]	; 0x58
 8004704:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004710:	2301      	movs	r3, #1
 8004712:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004714:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a3a      	ldr	r2, [pc, #232]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800471a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004720:	f7fc ff24 	bl	800156c <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004726:	e009      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004728:	f7fc ff20 	bl	800156c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	74fb      	strb	r3, [r7, #19]
        break;
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800473c:	4b31      	ldr	r3, [pc, #196]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ef      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d15c      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01f      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	d019      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800476c:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004776:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004778:	4b21      	ldr	r3, [pc, #132]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	4a20      	ldr	r2, [pc, #128]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004788:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fc fedf 	bl	800156c <HAL_GetTick>
 80047ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b0:	e00b      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fc fedb 	bl	800156c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d902      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	74fb      	strb	r3, [r7, #19]
            break;
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ec      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ee:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047f6:	e009      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	74bb      	strb	r3, [r7, #18]
 80047fc:	e006      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480c:	7c7b      	ldrb	r3, [r7, #17]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4b9e      	ldr	r3, [pc, #632]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	4a9d      	ldr	r2, [pc, #628]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482a:	4b98      	ldr	r3, [pc, #608]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f023 0203 	bic.w	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	4994      	ldr	r1, [pc, #592]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800484c:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 020c 	bic.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	498c      	ldr	r1, [pc, #560]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800486e:	4b87      	ldr	r3, [pc, #540]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	4983      	ldr	r1, [pc, #524]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004890:	4b7e      	ldr	r3, [pc, #504]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	497b      	ldr	r1, [pc, #492]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b2:	4b76      	ldr	r3, [pc, #472]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	4972      	ldr	r1, [pc, #456]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d4:	4b6d      	ldr	r3, [pc, #436]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	496a      	ldr	r1, [pc, #424]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f6:	4b65      	ldr	r3, [pc, #404]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	4961      	ldr	r1, [pc, #388]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004918:	4b5c      	ldr	r3, [pc, #368]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004926:	4959      	ldr	r1, [pc, #356]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800493a:	4b54      	ldr	r3, [pc, #336]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004948:	4950      	ldr	r1, [pc, #320]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800495c:	4b4b      	ldr	r3, [pc, #300]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	4948      	ldr	r1, [pc, #288]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497e:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	493f      	ldr	r1, [pc, #252]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d028      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a0:	4b3a      	ldr	r3, [pc, #232]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ae:	4937      	ldr	r1, [pc, #220]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049be:	d106      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c0:	4b32      	ldr	r3, [pc, #200]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a31      	ldr	r2, [pc, #196]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ca:	60d3      	str	r3, [r2, #12]
 80049cc:	e011      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d6:	d10c      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f8c8 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d028      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049fe:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	491f      	ldr	r1, [pc, #124]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a28:	60d3      	str	r3, [r2, #12]
 8004a2a:	e011      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f899 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6a:	4908      	ldr	r1, [pc, #32]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d109      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a02      	ldr	r2, [pc, #8]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	60d3      	str	r3, [r2, #12]
 8004a88:	e014      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f867 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ace:	4928      	ldr	r1, [pc, #160]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ade:	d10d      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f844 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d014      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004af6:	7cfb      	ldrb	r3, [r7, #19]
 8004af8:	74bb      	strb	r3, [r7, #18]
 8004afa:	e011      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3320      	adds	r3, #32
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f925 	bl	8004d5c <RCCEx_PLLSAI2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3a:	490d      	ldr	r1, [pc, #52]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5e:	4904      	ldr	r1, [pc, #16]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b66:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000

08004b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b82:	4b75      	ldr	r3, [pc, #468]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b8e:	4b72      	ldr	r3, [pc, #456]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0203 	and.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10d      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ba6:	4b6c      	ldr	r3, [pc, #432]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d047      	beq.n	8004c4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	e044      	b.n	8004c4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d018      	beq.n	8004bfa <RCCEx_PLLSAI1_Config+0x86>
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d825      	bhi.n	8004c18 <RCCEx_PLLSAI1_Config+0xa4>
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d002      	beq.n	8004bd6 <RCCEx_PLLSAI1_Config+0x62>
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d009      	beq.n	8004be8 <RCCEx_PLLSAI1_Config+0x74>
 8004bd4:	e020      	b.n	8004c18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bd6:	4b60      	ldr	r3, [pc, #384]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11d      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be6:	e01a      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be8:	4b5b      	ldr	r3, [pc, #364]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf8:	e013      	b.n	8004c22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bfa:	4b57      	ldr	r3, [pc, #348]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c06:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c16:	e006      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	e004      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10d      	bne.n	8004c4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c2e:	4b4a      	ldr	r3, [pc, #296]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	430b      	orrs	r3, r1
 8004c44:	4944      	ldr	r1, [pc, #272]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d17d      	bne.n	8004d4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a40      	ldr	r2, [pc, #256]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fc fc86 	bl	800156c <HAL_GetTick>
 8004c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c62:	e009      	b.n	8004c78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c64:	f7fc fc82 	bl	800156c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d902      	bls.n	8004c78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	73fb      	strb	r3, [r7, #15]
        break;
 8004c76:	e005      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c78:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ef      	bne.n	8004c64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d160      	bne.n	8004d4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d111      	bne.n	8004cb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c90:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6892      	ldr	r2, [r2, #8]
 8004ca0:	0211      	lsls	r1, r2, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	0912      	lsrs	r2, r2, #4
 8004ca8:	0452      	lsls	r2, r2, #17
 8004caa:	430a      	orrs	r2, r1
 8004cac:	492a      	ldr	r1, [pc, #168]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	610b      	str	r3, [r1, #16]
 8004cb2:	e027      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d112      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	0211      	lsls	r1, r2, #8
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6912      	ldr	r2, [r2, #16]
 8004cd0:	0852      	lsrs	r2, r2, #1
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	0552      	lsls	r2, r2, #21
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	491f      	ldr	r1, [pc, #124]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	610b      	str	r3, [r1, #16]
 8004cde:	e011      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ce8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6892      	ldr	r2, [r2, #8]
 8004cf0:	0211      	lsls	r1, r2, #8
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6952      	ldr	r2, [r2, #20]
 8004cf6:	0852      	lsrs	r2, r2, #1
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0652      	lsls	r2, r2, #25
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	4916      	ldr	r1, [pc, #88]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fc fc2c 	bl	800156c <HAL_GetTick>
 8004d14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d16:	e009      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d18:	f7fc fc28 	bl	800156c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d902      	bls.n	8004d2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	73fb      	strb	r3, [r7, #15]
          break;
 8004d2a:	e005      	b.n	8004d38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ef      	beq.n	8004d18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	4904      	ldr	r1, [pc, #16]	; (8004d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000

08004d5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d018      	beq.n	8004da8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d76:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0203 	and.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10d      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
       ||
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d047      	beq.n	8004e32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e044      	b.n	8004e32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d018      	beq.n	8004de2 <RCCEx_PLLSAI2_Config+0x86>
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d825      	bhi.n	8004e00 <RCCEx_PLLSAI2_Config+0xa4>
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d002      	beq.n	8004dbe <RCCEx_PLLSAI2_Config+0x62>
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d009      	beq.n	8004dd0 <RCCEx_PLLSAI2_Config+0x74>
 8004dbc:	e020      	b.n	8004e00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dbe:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d11d      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dce:	e01a      	b.n	8004e06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dd0:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d116      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de0:	e013      	b.n	8004e0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004de2:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dee:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dfe:	e006      	b.n	8004e0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e004      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e06:	bf00      	nop
 8004e08:	e002      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	4939      	ldr	r1, [pc, #228]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d167      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e38:	4b36      	ldr	r3, [pc, #216]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a35      	ldr	r2, [pc, #212]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e44:	f7fc fb92 	bl	800156c <HAL_GetTick>
 8004e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e4a:	e009      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e4c:	f7fc fb8e 	bl	800156c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d902      	bls.n	8004e60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e5e:	e005      	b.n	8004e6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e60:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ef      	bne.n	8004e4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14a      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d111      	bne.n	8004e9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e78:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	0211      	lsls	r1, r2, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68d2      	ldr	r2, [r2, #12]
 8004e8e:	0912      	lsrs	r2, r2, #4
 8004e90:	0452      	lsls	r2, r2, #17
 8004e92:	430a      	orrs	r2, r1
 8004e94:	491f      	ldr	r1, [pc, #124]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	614b      	str	r3, [r1, #20]
 8004e9a:	e011      	b.n	8004ec0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6892      	ldr	r2, [r2, #8]
 8004eac:	0211      	lsls	r1, r2, #8
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6912      	ldr	r2, [r2, #16]
 8004eb2:	0852      	lsrs	r2, r2, #1
 8004eb4:	3a01      	subs	r2, #1
 8004eb6:	0652      	lsls	r2, r2, #25
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	4916      	ldr	r1, [pc, #88]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ec0:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fc fb4e 	bl	800156c <HAL_GetTick>
 8004ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ed2:	e009      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ed4:	f7fc fb4a 	bl	800156c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d902      	bls.n	8004ee8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee6:	e005      	b.n	8004ef4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ef      	beq.n	8004ed4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4904      	ldr	r1, [pc, #16]	; (8004f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000

08004f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e049      	b.n	8004fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc f968 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fd34 	bl	80059c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e04f      	b.n	8005080 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	; (800508c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x76>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d018      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x76>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_TIM_Base_Start_IT+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x76>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <HAL_TIM_Base_Start_IT+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x76>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <HAL_TIM_Base_Start_IT+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x76>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_TIM_Base_Start_IT+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x76>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d115      	bne.n	800506a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d015      	beq.n	800507c <HAL_TIM_Base_Start_IT+0xb4>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d011      	beq.n	800507c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	e008      	b.n	800507c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e000      	b.n	800507e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	00010007 	.word	0x00010007

080050a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e049      	b.n	800514e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f841 	bl	8005156 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f000 fc6c 	bl	80059c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_TIM_PWM_Start+0x24>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e03c      	b.n	800520a <HAL_TIM_PWM_Start+0x9e>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b04      	cmp	r3, #4
 8005194:	d109      	bne.n	80051aa <HAL_TIM_PWM_Start+0x3e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b01      	cmp	r3, #1
 80051a0:	bf14      	ite	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	2300      	moveq	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	e02f      	b.n	800520a <HAL_TIM_PWM_Start+0x9e>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d109      	bne.n	80051c4 <HAL_TIM_PWM_Start+0x58>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e022      	b.n	800520a <HAL_TIM_PWM_Start+0x9e>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d109      	bne.n	80051de <HAL_TIM_PWM_Start+0x72>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	e015      	b.n	800520a <HAL_TIM_PWM_Start+0x9e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d109      	bne.n	80051f8 <HAL_TIM_PWM_Start+0x8c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	e008      	b.n	800520a <HAL_TIM_PWM_Start+0x9e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e09c      	b.n	800534c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xb6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005220:	e023      	b.n	800526a <HAL_TIM_PWM_Start+0xfe>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start+0xc6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005230:	e01b      	b.n	800526a <HAL_TIM_PWM_Start+0xfe>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d104      	bne.n	8005242 <HAL_TIM_PWM_Start+0xd6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	e013      	b.n	800526a <HAL_TIM_PWM_Start+0xfe>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b0c      	cmp	r3, #12
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0xe6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005250:	e00b      	b.n	800526a <HAL_TIM_PWM_Start+0xfe>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b10      	cmp	r3, #16
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xf6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005260:	e003      	b.n	800526a <HAL_TIM_PWM_Start+0xfe>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2201      	movs	r2, #1
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 ffb0 	bl	80061d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a35      	ldr	r2, [pc, #212]	; (8005354 <HAL_TIM_PWM_Start+0x1e8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_TIM_PWM_Start+0x13e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a34      	ldr	r2, [pc, #208]	; (8005358 <HAL_TIM_PWM_Start+0x1ec>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIM_PWM_Start+0x13e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a32      	ldr	r2, [pc, #200]	; (800535c <HAL_TIM_PWM_Start+0x1f0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIM_PWM_Start+0x13e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a31      	ldr	r2, [pc, #196]	; (8005360 <HAL_TIM_PWM_Start+0x1f4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIM_PWM_Start+0x13e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <HAL_TIM_PWM_Start+0x1f8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_PWM_Start+0x142>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_TIM_PWM_Start+0x144>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_TIM_PWM_Start+0x1e8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_TIM_PWM_Start+0x19e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d018      	beq.n	800530a <HAL_TIM_PWM_Start+0x19e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <HAL_TIM_PWM_Start+0x1fc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIM_PWM_Start+0x19e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a21      	ldr	r2, [pc, #132]	; (800536c <HAL_TIM_PWM_Start+0x200>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIM_PWM_Start+0x19e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <HAL_TIM_PWM_Start+0x204>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIM_PWM_Start+0x19e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_TIM_PWM_Start+0x1ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIM_PWM_Start+0x19e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_TIM_PWM_Start+0x1f0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d115      	bne.n	8005336 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	4b18      	ldr	r3, [pc, #96]	; (8005374 <HAL_TIM_PWM_Start+0x208>)
 8005312:	4013      	ands	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b06      	cmp	r3, #6
 800531a:	d015      	beq.n	8005348 <HAL_TIM_PWM_Start+0x1dc>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d011      	beq.n	8005348 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	e008      	b.n	8005348 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e000      	b.n	800534a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40013400 	.word	0x40013400
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	00010007 	.word	0x00010007

08005378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0202 	mvn.w	r2, #2
 80053a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fae3 	bl	8005986 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fad5 	bl	8005972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fae6 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0204 	mvn.w	r2, #4
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fab9 	bl	8005986 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 faab 	bl	8005972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fabc 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b08      	cmp	r3, #8
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0208 	mvn.w	r2, #8
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2204      	movs	r2, #4
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa8f 	bl	8005986 <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa81 	bl	8005972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa92 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b10      	cmp	r3, #16
 8005488:	d122      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b10      	cmp	r3, #16
 8005496:	d11b      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0210 	mvn.w	r2, #16
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2208      	movs	r2, #8
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa65 	bl	8005986 <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa57 	bl	8005972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa68 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d10e      	bne.n	80054fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0201 	mvn.w	r2, #1
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fb f9ae 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d107      	bne.n	8005528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 ff10 	bl	8006348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005536:	d10e      	bne.n	8005556 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d107      	bne.n	8005556 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800554e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 ff03 	bl	800635c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d10e      	bne.n	8005582 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d107      	bne.n	8005582 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800557a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fa16 	bl	80059ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d10e      	bne.n	80055ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b20      	cmp	r3, #32
 800559c:	d107      	bne.n	80055ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0220 	mvn.w	r2, #32
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fec3 	bl	8006334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0ff      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b14      	cmp	r3, #20
 80055e2:	f200 80f0 	bhi.w	80057c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005641 	.word	0x08005641
 80055f0:	080057c7 	.word	0x080057c7
 80055f4:	080057c7 	.word	0x080057c7
 80055f8:	080057c7 	.word	0x080057c7
 80055fc:	08005681 	.word	0x08005681
 8005600:	080057c7 	.word	0x080057c7
 8005604:	080057c7 	.word	0x080057c7
 8005608:	080057c7 	.word	0x080057c7
 800560c:	080056c3 	.word	0x080056c3
 8005610:	080057c7 	.word	0x080057c7
 8005614:	080057c7 	.word	0x080057c7
 8005618:	080057c7 	.word	0x080057c7
 800561c:	08005703 	.word	0x08005703
 8005620:	080057c7 	.word	0x080057c7
 8005624:	080057c7 	.word	0x080057c7
 8005628:	080057c7 	.word	0x080057c7
 800562c:	08005745 	.word	0x08005745
 8005630:	080057c7 	.word	0x080057c7
 8005634:	080057c7 	.word	0x080057c7
 8005638:	080057c7 	.word	0x080057c7
 800563c:	08005785 	.word	0x08005785
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa56 	bl	8005af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0204 	bic.w	r2, r2, #4
 800566a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	619a      	str	r2, [r3, #24]
      break;
 800567e:	e0a5      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fac6 	bl	8005c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6999      	ldr	r1, [r3, #24]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	021a      	lsls	r2, r3, #8
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	619a      	str	r2, [r3, #24]
      break;
 80056c0:	e084      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fb2f 	bl	8005d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0208 	orr.w	r2, r2, #8
 80056dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0204 	bic.w	r2, r2, #4
 80056ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]
      break;
 8005700:	e064      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fb97 	bl	8005e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69d9      	ldr	r1, [r3, #28]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	021a      	lsls	r2, r3, #8
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	61da      	str	r2, [r3, #28]
      break;
 8005742:	e043      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fbe0 	bl	8005f10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0204 	bic.w	r2, r2, #4
 800576e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005782:	e023      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fc24 	bl	8005fd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057c4:	e002      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop

080057e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIM_ConfigClockSource+0x1c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0b6      	b.n	800596a <HAL_TIM_ConfigClockSource+0x18a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800581e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005838:	d03e      	beq.n	80058b8 <HAL_TIM_ConfigClockSource+0xd8>
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	f200 8087 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005846:	f000 8086 	beq.w	8005956 <HAL_TIM_ConfigClockSource+0x176>
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d87f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005850:	2b70      	cmp	r3, #112	; 0x70
 8005852:	d01a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0xaa>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d87b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005858:	2b60      	cmp	r3, #96	; 0x60
 800585a:	d050      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x11e>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d877      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005860:	2b50      	cmp	r3, #80	; 0x50
 8005862:	d03c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0xfe>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d873      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d058      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x13e>
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d86f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005870:	2b30      	cmp	r3, #48	; 0x30
 8005872:	d064      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15e>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d86b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d060      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15e>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d867      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15e>
 8005884:	2b10      	cmp	r3, #16
 8005886:	d05a      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15e>
 8005888:	e062      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6899      	ldr	r1, [r3, #8]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f000 fc7d 	bl	8006198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	609a      	str	r2, [r3, #8]
      break;
 80058b6:	e04f      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6899      	ldr	r1, [r3, #8]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f000 fc66 	bl	8006198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058da:	609a      	str	r2, [r3, #8]
      break;
 80058dc:	e03c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fbda 	bl	80060a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2150      	movs	r1, #80	; 0x50
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fc33 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 80058fc:	e02c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	461a      	mov	r2, r3
 800590c:	f000 fbf9 	bl	8006102 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2160      	movs	r1, #96	; 0x60
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fc23 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 800591c:	e01c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fbba 	bl	80060a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2140      	movs	r1, #64	; 0x40
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc13 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 800593c:	e00c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f000 fc0a 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 800594e:	e003      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	e000      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a40      	ldr	r2, [pc, #256]	; (8005ad8 <TIM_Base_SetConfig+0x114>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d00f      	beq.n	8005a04 <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3d      	ldr	r2, [pc, #244]	; (8005adc <TIM_Base_SetConfig+0x118>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3c      	ldr	r2, [pc, #240]	; (8005ae0 <TIM_Base_SetConfig+0x11c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3b      	ldr	r2, [pc, #236]	; (8005ae4 <TIM_Base_SetConfig+0x120>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3a      	ldr	r2, [pc, #232]	; (8005ae8 <TIM_Base_SetConfig+0x124>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d108      	bne.n	8005a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2f      	ldr	r2, [pc, #188]	; (8005ad8 <TIM_Base_SetConfig+0x114>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01f      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <TIM_Base_SetConfig+0x118>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2b      	ldr	r2, [pc, #172]	; (8005ae0 <TIM_Base_SetConfig+0x11c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <TIM_Base_SetConfig+0x120>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a29      	ldr	r2, [pc, #164]	; (8005ae8 <TIM_Base_SetConfig+0x124>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a28      	ldr	r2, [pc, #160]	; (8005aec <TIM_Base_SetConfig+0x128>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a27      	ldr	r2, [pc, #156]	; (8005af0 <TIM_Base_SetConfig+0x12c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <TIM_Base_SetConfig+0x130>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a10      	ldr	r2, [pc, #64]	; (8005ad8 <TIM_Base_SetConfig+0x114>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <TIM_Base_SetConfig+0xf8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a12      	ldr	r2, [pc, #72]	; (8005ae8 <TIM_Base_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0xf8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a11      	ldr	r2, [pc, #68]	; (8005aec <TIM_Base_SetConfig+0x128>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0xf8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a10      	ldr	r2, [pc, #64]	; (8005af0 <TIM_Base_SetConfig+0x12c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0xf8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <TIM_Base_SetConfig+0x130>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d103      	bne.n	8005ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 0302 	bic.w	r3, r3, #2
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <TIM_OC1_SetConfig+0x10c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00f      	beq.n	8005b78 <TIM_OC1_SetConfig+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <TIM_OC1_SetConfig+0x110>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC1_SetConfig+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a2a      	ldr	r2, [pc, #168]	; (8005c0c <TIM_OC1_SetConfig+0x114>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC1_SetConfig+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <TIM_OC1_SetConfig+0x118>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC1_SetConfig+0x80>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_OC1_SetConfig+0x11c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10c      	bne.n	8005b92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0308 	bic.w	r3, r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a1b      	ldr	r2, [pc, #108]	; (8005c04 <TIM_OC1_SetConfig+0x10c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00f      	beq.n	8005bba <TIM_OC1_SetConfig+0xc2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <TIM_OC1_SetConfig+0x110>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_OC1_SetConfig+0xc2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <TIM_OC1_SetConfig+0x114>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <TIM_OC1_SetConfig+0xc2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <TIM_OC1_SetConfig+0x118>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_OC1_SetConfig+0xc2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <TIM_OC1_SetConfig+0x11c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40013400 	.word	0x40013400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800

08005c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f023 0210 	bic.w	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0320 	bic.w	r3, r3, #32
 8005c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <TIM_OC2_SetConfig+0x100>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC2_SetConfig+0x6c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <TIM_OC2_SetConfig+0x104>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10d      	bne.n	8005ca0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <TIM_OC2_SetConfig+0x100>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xb0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <TIM_OC2_SetConfig+0x104>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xb0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <TIM_OC2_SetConfig+0x108>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xb0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <TIM_OC2_SetConfig+0x10c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xb0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <TIM_OC2_SetConfig+0x110>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d113      	bne.n	8005cf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <TIM_OC3_SetConfig+0xfc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_OC3_SetConfig+0x6a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <TIM_OC3_SetConfig+0x100>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10d      	bne.n	8005db2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <TIM_OC3_SetConfig+0xfc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_OC3_SetConfig+0xae>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1b      	ldr	r2, [pc, #108]	; (8005e2c <TIM_OC3_SetConfig+0x100>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_OC3_SetConfig+0xae>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <TIM_OC3_SetConfig+0x104>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_OC3_SetConfig+0xae>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <TIM_OC3_SetConfig+0x108>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_OC3_SetConfig+0xae>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <TIM_OC3_SetConfig+0x10c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d113      	bne.n	8005e02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	031b      	lsls	r3, r3, #12
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	; (8005efc <TIM_OC4_SetConfig+0xc0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x84>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <TIM_OC4_SetConfig+0xc4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x84>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <TIM_OC4_SetConfig+0xc8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x84>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <TIM_OC4_SetConfig+0xcc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x84>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <TIM_OC4_SetConfig+0xd0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d109      	bne.n	8005ed4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40013400 	.word	0x40013400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800

08005f10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <TIM_OC5_SetConfig+0xb4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <TIM_OC5_SetConfig+0x7a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <TIM_OC5_SetConfig+0xb8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_OC5_SetConfig+0x7a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <TIM_OC5_SetConfig+0xbc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_OC5_SetConfig+0x7a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <TIM_OC5_SetConfig+0xc0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_OC5_SetConfig+0x7a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <TIM_OC5_SetConfig+0xc4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d109      	bne.n	8005f9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	621a      	str	r2, [r3, #32]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800

08005fd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800601e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	051b      	lsls	r3, r3, #20
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a18      	ldr	r2, [pc, #96]	; (8006090 <TIM_OC6_SetConfig+0xb8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00f      	beq.n	8006054 <TIM_OC6_SetConfig+0x7c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a17      	ldr	r2, [pc, #92]	; (8006094 <TIM_OC6_SetConfig+0xbc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00b      	beq.n	8006054 <TIM_OC6_SetConfig+0x7c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a16      	ldr	r2, [pc, #88]	; (8006098 <TIM_OC6_SetConfig+0xc0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d007      	beq.n	8006054 <TIM_OC6_SetConfig+0x7c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a15      	ldr	r2, [pc, #84]	; (800609c <TIM_OC6_SetConfig+0xc4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_OC6_SetConfig+0x7c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <TIM_OC6_SetConfig+0xc8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d109      	bne.n	8006068 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40013400 	.word	0x40013400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800

080060a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 030a 	bic.w	r3, r3, #10
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006102:	b480      	push	{r7}
 8006104:	b087      	sub	sp, #28
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0210 	bic.w	r2, r3, #16
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	031b      	lsls	r3, r3, #12
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800613e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	f043 0307 	orr.w	r3, r3, #7
 8006184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4313      	orrs	r3, r2
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	2201      	movs	r2, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	43db      	mvns	r3, r3
 80061fa:	401a      	ands	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1a      	ldr	r2, [r3, #32]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e068      	b.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d018      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1a      	ldr	r2, [pc, #104]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a13      	ldr	r2, [pc, #76]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40014000 	.word	0x40014000

08006334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e040      	b.n	8006404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fa ffaa 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2224      	movs	r2, #36	; 0x24
 800639c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fcc4 	bl	8006d3c <UART_SetConfig>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e022      	b.n	8006404 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 ff70 	bl	80072ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fff7 	bl	80073f0 <UART_CheckIdleState>
 8006402:	4603      	mov	r3, r0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	; 0x28
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4613      	mov	r3, r2
 800641a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006420:	2b20      	cmp	r3, #32
 8006422:	f040 80bf 	bne.w	80065a4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_UART_Receive+0x26>
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e0b7      	b.n	80065a6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Receive+0x38>
 8006440:	2302      	movs	r3, #2
 8006442:	e0b0      	b.n	80065a6 <HAL_UART_Receive+0x19a>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2222      	movs	r2, #34	; 0x22
 8006458:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006460:	f7fb f884 	bl	800156c <HAL_GetTick>
 8006464:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	88fa      	ldrh	r2, [r7, #6]
 8006472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d10e      	bne.n	800649e <HAL_UART_Receive+0x92>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <HAL_UART_Receive+0x88>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800648e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006492:	e02d      	b.n	80064f0 <HAL_UART_Receive+0xe4>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	22ff      	movs	r2, #255	; 0xff
 8006498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800649c:	e028      	b.n	80064f0 <HAL_UART_Receive+0xe4>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10d      	bne.n	80064c2 <HAL_UART_Receive+0xb6>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_UART_Receive+0xac>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	22ff      	movs	r2, #255	; 0xff
 80064b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064b6:	e01b      	b.n	80064f0 <HAL_UART_Receive+0xe4>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	227f      	movs	r2, #127	; 0x7f
 80064bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064c0:	e016      	b.n	80064f0 <HAL_UART_Receive+0xe4>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ca:	d10d      	bne.n	80064e8 <HAL_UART_Receive+0xdc>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_UART_Receive+0xd2>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	227f      	movs	r2, #127	; 0x7f
 80064d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064dc:	e008      	b.n	80064f0 <HAL_UART_Receive+0xe4>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	223f      	movs	r2, #63	; 0x3f
 80064e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064e6:	e003      	b.n	80064f0 <HAL_UART_Receive+0xe4>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d108      	bne.n	8006514 <HAL_UART_Receive+0x108>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e003      	b.n	800651c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006524:	e033      	b.n	800658e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2200      	movs	r2, #0
 800652e:	2120      	movs	r1, #32
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 ffa6 	bl	8007482 <UART_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e032      	b.n	80065a6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10c      	bne.n	8006560 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800654c:	b29a      	uxth	r2, r3
 800654e:	8a7b      	ldrh	r3, [r7, #18]
 8006550:	4013      	ands	r3, r2
 8006552:	b29a      	uxth	r2, r3
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	3302      	adds	r3, #2
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e00d      	b.n	800657c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006566:	b29b      	uxth	r3, r3
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8a7b      	ldrh	r3, [r7, #18]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4013      	ands	r3, r2
 8006570:	b2da      	uxtb	r2, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3301      	adds	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1c5      	bne.n	8006526 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b08b      	sub	sp, #44	; 0x2c
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d156      	bne.n	8006674 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_UART_Transmit_IT+0x22>
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e04f      	b.n	8006676 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_UART_Transmit_IT+0x34>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e048      	b.n	8006676 <HAL_UART_Transmit_IT+0xc6>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	88fa      	ldrh	r2, [r7, #6]
 80065fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2221      	movs	r2, #33	; 0x21
 8006614:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d107      	bne.n	8006630 <HAL_UART_Transmit_IT+0x80>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4a16      	ldr	r2, [pc, #88]	; (8006684 <HAL_UART_Transmit_IT+0xd4>)
 800662c:	669a      	str	r2, [r3, #104]	; 0x68
 800662e:	e002      	b.n	8006636 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <HAL_UART_Transmit_IT+0xd8>)
 8006634:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	613b      	str	r3, [r7, #16]
   return(result);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	623b      	str	r3, [r7, #32]
 800665e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	61bb      	str	r3, [r7, #24]
   return(result);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e000      	b.n	8006676 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006674:	2302      	movs	r3, #2
  }
}
 8006676:	4618      	mov	r0, r3
 8006678:	372c      	adds	r7, #44	; 0x2c
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	0800794b 	.word	0x0800794b
 8006688:	08007893 	.word	0x08007893

0800668c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d142      	bne.n	8006728 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_UART_Receive_IT+0x22>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e03b      	b.n	800672a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Receive_IT+0x34>
 80066bc:	2302      	movs	r3, #2
 80066be:	e034      	b.n	800672a <HAL_UART_Receive_IT+0x9e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_UART_Receive_IT+0xa8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01f      	beq.n	8006718 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d018      	beq.n	8006718 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	613b      	str	r3, [r7, #16]
   return(result);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	623b      	str	r3, [r7, #32]
 8006706:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	69f9      	ldr	r1, [r7, #28]
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	61bb      	str	r3, [r7, #24]
   return(result);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 ff74 	bl	800760c <UART_Start_Receive_IT>
 8006724:	4603      	mov	r3, r0
 8006726:	e000      	b.n	800672a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3728      	adds	r7, #40	; 0x28
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40008000 	.word	0x40008000

08006738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b0ba      	sub	sp, #232	; 0xe8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800675e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006762:	f640 030f 	movw	r3, #2063	; 0x80f
 8006766:	4013      	ands	r3, r2
 8006768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800676c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d115      	bne.n	80067a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00f      	beq.n	80067a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 82a6 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
      }
      return;
 800679e:	e2a0      	b.n	8006ce2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80067a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8117 	beq.w	80069d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067ba:	4b85      	ldr	r3, [pc, #532]	; (80069d0 <HAL_UART_IRQHandler+0x298>)
 80067bc:	4013      	ands	r3, r2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 810a 	beq.w	80069d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <HAL_UART_IRQHandler+0xbc>
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2201      	movs	r2, #1
 80067e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d011      	beq.n	8006824 <HAL_UART_IRQHandler+0xec>
 8006800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2202      	movs	r2, #2
 8006812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800681a:	f043 0204 	orr.w	r2, r3, #4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d011      	beq.n	8006854 <HAL_UART_IRQHandler+0x11c>
 8006830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2204      	movs	r2, #4
 8006842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684a:	f043 0202 	orr.w	r2, r3, #2
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d017      	beq.n	8006890 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800686c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006870:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2208      	movs	r2, #8
 800687e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006886:	f043 0208 	orr.w	r2, r3, #8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006898:	2b00      	cmp	r3, #0
 800689a:	d012      	beq.n	80068c2 <HAL_UART_IRQHandler+0x18a>
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00c      	beq.n	80068c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b8:	f043 0220 	orr.w	r2, r3, #32
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 820c 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d005      	beq.n	800691a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800690e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006912:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006916:	2b00      	cmp	r3, #0
 8006918:	d04f      	beq.n	80069ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 ff40 	bl	80077a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d141      	bne.n	80069b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800695a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800695e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1d9      	bne.n	800692e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	2b00      	cmp	r3, #0
 8006980:	d013      	beq.n	80069aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <HAL_UART_IRQHandler+0x29c>)
 8006988:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4618      	mov	r0, r3
 8006990:	f7fc fb0b 	bl	8002faa <HAL_DMA_Abort_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d017      	beq.n	80069ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	e00f      	b.n	80069ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9b0 	bl	8006d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b0:	e00b      	b.n	80069ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9ac 	bl	8006d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	e007      	b.n	80069ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9a8 	bl	8006d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80069c8:	e18d      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ca:	bf00      	nop
    return;
 80069cc:	e18b      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5ae>
 80069ce:	bf00      	nop
 80069d0:	04000120 	.word	0x04000120
 80069d4:	08007867 	.word	0x08007867

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069dc:	2b01      	cmp	r3, #1
 80069de:	f040 8146 	bne.w	8006c6e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 813f 	beq.w	8006c6e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8138 	beq.w	8006c6e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2210      	movs	r2, #16
 8006a04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	f040 80b4 	bne.w	8006b7e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 815f 	beq.w	8006cea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a36:	429a      	cmp	r2, r3
 8006a38:	f080 8157 	bcs.w	8006cea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 8085 	bne.w	8006b62 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1da      	bne.n	8006a58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e1      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e3      	bne.n	8006ade <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b32:	f023 0310 	bic.w	r3, r3, #16
 8006b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e4      	bne.n	8006b22 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fc f9e6 	bl	8002f2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8d4 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b7c:	e0b5      	b.n	8006cea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80a7 	beq.w	8006cee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80a2 	beq.w	8006cee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e4      	bne.n	8006baa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c04:	633a      	str	r2, [r7, #48]	; 0x30
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e3      	bne.n	8006be0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0310 	bic.w	r3, r3, #16
 8006c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	69b9      	ldr	r1, [r7, #24]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	617b      	str	r3, [r7, #20]
   return(result);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e4      	bne.n	8006c2a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f85c 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c6c:	e03f      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <HAL_UART_IRQHandler+0x560>
 8006c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f844 	bl	8007d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c96:	e02d      	b.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01c      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
    }
    return;
 8006cc0:	e017      	b.n	8006cf2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d012      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
 8006cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fe95 	bl	8007a0a <UART_EndTransmit_IT>
    return;
 8006ce0:	e008      	b.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ce2:	bf00      	nop
 8006ce4:	e006      	b.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ce6:	bf00      	nop
 8006ce8:	e004      	b.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006cf2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006cf4:	37e8      	adds	r7, #232	; 0xe8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop

08006cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d40:	b08a      	sub	sp, #40	; 0x28
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4ba4      	ldr	r3, [pc, #656]	; (8006ffc <UART_SetConfig+0x2c0>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a99      	ldr	r2, [pc, #612]	; (8007000 <UART_SetConfig+0x2c4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da4:	4313      	orrs	r3, r2
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	430a      	orrs	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a90      	ldr	r2, [pc, #576]	; (8007004 <UART_SetConfig+0x2c8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d126      	bne.n	8006e14 <UART_SetConfig+0xd8>
 8006dc6:	4b90      	ldr	r3, [pc, #576]	; (8007008 <UART_SetConfig+0x2cc>)
 8006dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d81b      	bhi.n	8006e0c <UART_SetConfig+0xd0>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <UART_SetConfig+0xa0>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df2:	e116      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006df4:	2302      	movs	r3, #2
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e112      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e02:	e10e      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e04:	2308      	movs	r3, #8
 8006e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0a:	e10a      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e12:	e106      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7c      	ldr	r2, [pc, #496]	; (800700c <UART_SetConfig+0x2d0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d138      	bne.n	8006e90 <UART_SetConfig+0x154>
 8006e1e:	4b7a      	ldr	r3, [pc, #488]	; (8007008 <UART_SetConfig+0x2cc>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e24:	f003 030c 	and.w	r3, r3, #12
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d82d      	bhi.n	8006e88 <UART_SetConfig+0x14c>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0xf8>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08006e89 	.word	0x08006e89
 8006e3c:	08006e89 	.word	0x08006e89
 8006e40:	08006e89 	.word	0x08006e89
 8006e44:	08006e79 	.word	0x08006e79
 8006e48:	08006e89 	.word	0x08006e89
 8006e4c:	08006e89 	.word	0x08006e89
 8006e50:	08006e89 	.word	0x08006e89
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e89 	.word	0x08006e89
 8006e5c:	08006e89 	.word	0x08006e89
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6e:	e0d8      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e76:	e0d4      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e0d0      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e86:	e0cc      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e8e:	e0c8      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a5e      	ldr	r2, [pc, #376]	; (8007010 <UART_SetConfig+0x2d4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d125      	bne.n	8006ee6 <UART_SetConfig+0x1aa>
 8006e9a:	4b5b      	ldr	r3, [pc, #364]	; (8007008 <UART_SetConfig+0x2cc>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ea4:	2b30      	cmp	r3, #48	; 0x30
 8006ea6:	d016      	beq.n	8006ed6 <UART_SetConfig+0x19a>
 8006ea8:	2b30      	cmp	r3, #48	; 0x30
 8006eaa:	d818      	bhi.n	8006ede <UART_SetConfig+0x1a2>
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d00a      	beq.n	8006ec6 <UART_SetConfig+0x18a>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d814      	bhi.n	8006ede <UART_SetConfig+0x1a2>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <UART_SetConfig+0x182>
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d008      	beq.n	8006ece <UART_SetConfig+0x192>
 8006ebc:	e00f      	b.n	8006ede <UART_SetConfig+0x1a2>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec4:	e0ad      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ecc:	e0a9      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ece:	2304      	movs	r3, #4
 8006ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed4:	e0a5      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006edc:	e0a1      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ede:	2310      	movs	r3, #16
 8006ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee4:	e09d      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a4a      	ldr	r2, [pc, #296]	; (8007014 <UART_SetConfig+0x2d8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d125      	bne.n	8006f3c <UART_SetConfig+0x200>
 8006ef0:	4b45      	ldr	r3, [pc, #276]	; (8007008 <UART_SetConfig+0x2cc>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006efa:	2bc0      	cmp	r3, #192	; 0xc0
 8006efc:	d016      	beq.n	8006f2c <UART_SetConfig+0x1f0>
 8006efe:	2bc0      	cmp	r3, #192	; 0xc0
 8006f00:	d818      	bhi.n	8006f34 <UART_SetConfig+0x1f8>
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d00a      	beq.n	8006f1c <UART_SetConfig+0x1e0>
 8006f06:	2b80      	cmp	r3, #128	; 0x80
 8006f08:	d814      	bhi.n	8006f34 <UART_SetConfig+0x1f8>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <UART_SetConfig+0x1d8>
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d008      	beq.n	8006f24 <UART_SetConfig+0x1e8>
 8006f12:	e00f      	b.n	8006f34 <UART_SetConfig+0x1f8>
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f1a:	e082      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f22:	e07e      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f24:	2304      	movs	r3, #4
 8006f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f2a:	e07a      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f32:	e076      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f34:	2310      	movs	r3, #16
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3a:	e072      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a35      	ldr	r2, [pc, #212]	; (8007018 <UART_SetConfig+0x2dc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d12a      	bne.n	8006f9c <UART_SetConfig+0x260>
 8006f46:	4b30      	ldr	r3, [pc, #192]	; (8007008 <UART_SetConfig+0x2cc>)
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f54:	d01a      	beq.n	8006f8c <UART_SetConfig+0x250>
 8006f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5a:	d81b      	bhi.n	8006f94 <UART_SetConfig+0x258>
 8006f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f60:	d00c      	beq.n	8006f7c <UART_SetConfig+0x240>
 8006f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f66:	d815      	bhi.n	8006f94 <UART_SetConfig+0x258>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <UART_SetConfig+0x238>
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	d008      	beq.n	8006f84 <UART_SetConfig+0x248>
 8006f72:	e00f      	b.n	8006f94 <UART_SetConfig+0x258>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f7a:	e052      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f82:	e04e      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8a:	e04a      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f92:	e046      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f9a:	e042      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a17      	ldr	r2, [pc, #92]	; (8007000 <UART_SetConfig+0x2c4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d13a      	bne.n	800701c <UART_SetConfig+0x2e0>
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <UART_SetConfig+0x2cc>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fb4:	d01a      	beq.n	8006fec <UART_SetConfig+0x2b0>
 8006fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fba:	d81b      	bhi.n	8006ff4 <UART_SetConfig+0x2b8>
 8006fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc0:	d00c      	beq.n	8006fdc <UART_SetConfig+0x2a0>
 8006fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc6:	d815      	bhi.n	8006ff4 <UART_SetConfig+0x2b8>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <UART_SetConfig+0x298>
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	d008      	beq.n	8006fe4 <UART_SetConfig+0x2a8>
 8006fd2:	e00f      	b.n	8006ff4 <UART_SetConfig+0x2b8>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fda:	e022      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe2:	e01e      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fea:	e01a      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff2:	e016      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffa:	e012      	b.n	8007022 <UART_SetConfig+0x2e6>
 8006ffc:	efff69f3 	.word	0xefff69f3
 8007000:	40008000 	.word	0x40008000
 8007004:	40013800 	.word	0x40013800
 8007008:	40021000 	.word	0x40021000
 800700c:	40004400 	.word	0x40004400
 8007010:	40004800 	.word	0x40004800
 8007014:	40004c00 	.word	0x40004c00
 8007018:	40005000 	.word	0x40005000
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a9f      	ldr	r2, [pc, #636]	; (80072a4 <UART_SetConfig+0x568>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d17a      	bne.n	8007122 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800702c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007030:	2b08      	cmp	r3, #8
 8007032:	d824      	bhi.n	800707e <UART_SetConfig+0x342>
 8007034:	a201      	add	r2, pc, #4	; (adr r2, 800703c <UART_SetConfig+0x300>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007061 	.word	0x08007061
 8007040:	0800707f 	.word	0x0800707f
 8007044:	08007069 	.word	0x08007069
 8007048:	0800707f 	.word	0x0800707f
 800704c:	0800706f 	.word	0x0800706f
 8007050:	0800707f 	.word	0x0800707f
 8007054:	0800707f 	.word	0x0800707f
 8007058:	0800707f 	.word	0x0800707f
 800705c:	08007077 	.word	0x08007077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007060:	f7fd fa12 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8007064:	61f8      	str	r0, [r7, #28]
        break;
 8007066:	e010      	b.n	800708a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007068:	4b8f      	ldr	r3, [pc, #572]	; (80072a8 <UART_SetConfig+0x56c>)
 800706a:	61fb      	str	r3, [r7, #28]
        break;
 800706c:	e00d      	b.n	800708a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706e:	f7fd f973 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8007072:	61f8      	str	r0, [r7, #28]
        break;
 8007074:	e009      	b.n	800708a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707a:	61fb      	str	r3, [r7, #28]
        break;
 800707c:	e005      	b.n	800708a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80fb 	beq.w	8007288 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	4413      	add	r3, r2
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d305      	bcc.n	80070ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d903      	bls.n	80070b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070b4:	e0e8      	b.n	8007288 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2200      	movs	r2, #0
 80070ba:	461c      	mov	r4, r3
 80070bc:	4615      	mov	r5, r2
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	022b      	lsls	r3, r5, #8
 80070c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070cc:	0222      	lsls	r2, r4, #8
 80070ce:	68f9      	ldr	r1, [r7, #12]
 80070d0:	6849      	ldr	r1, [r1, #4]
 80070d2:	0849      	lsrs	r1, r1, #1
 80070d4:	2000      	movs	r0, #0
 80070d6:	4688      	mov	r8, r1
 80070d8:	4681      	mov	r9, r0
 80070da:	eb12 0a08 	adds.w	sl, r2, r8
 80070de:	eb43 0b09 	adc.w	fp, r3, r9
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f0:	4650      	mov	r0, sl
 80070f2:	4659      	mov	r1, fp
 80070f4:	f7f9 f868 	bl	80001c8 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4613      	mov	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007106:	d308      	bcc.n	800711a <UART_SetConfig+0x3de>
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800710e:	d204      	bcs.n	800711a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e0b6      	b.n	8007288 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007120:	e0b2      	b.n	8007288 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712a:	d15e      	bne.n	80071ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800712c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007130:	2b08      	cmp	r3, #8
 8007132:	d828      	bhi.n	8007186 <UART_SetConfig+0x44a>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x400>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007161 	.word	0x08007161
 8007140:	08007169 	.word	0x08007169
 8007144:	08007171 	.word	0x08007171
 8007148:	08007187 	.word	0x08007187
 800714c:	08007177 	.word	0x08007177
 8007150:	08007187 	.word	0x08007187
 8007154:	08007187 	.word	0x08007187
 8007158:	08007187 	.word	0x08007187
 800715c:	0800717f 	.word	0x0800717f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007160:	f7fd f992 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8007164:	61f8      	str	r0, [r7, #28]
        break;
 8007166:	e014      	b.n	8007192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007168:	f7fd f9a4 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 800716c:	61f8      	str	r0, [r7, #28]
        break;
 800716e:	e010      	b.n	8007192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007170:	4b4d      	ldr	r3, [pc, #308]	; (80072a8 <UART_SetConfig+0x56c>)
 8007172:	61fb      	str	r3, [r7, #28]
        break;
 8007174:	e00d      	b.n	8007192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007176:	f7fd f8ef 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 800717a:	61f8      	str	r0, [r7, #28]
        break;
 800717c:	e009      	b.n	8007192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007182:	61fb      	str	r3, [r7, #28]
        break;
 8007184:	e005      	b.n	8007192 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d077      	beq.n	8007288 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	005a      	lsls	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b0f      	cmp	r3, #15
 80071b2:	d916      	bls.n	80071e2 <UART_SetConfig+0x4a6>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ba:	d212      	bcs.n	80071e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f023 030f 	bic.w	r3, r3, #15
 80071c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	8afb      	ldrh	r3, [r7, #22]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	8afa      	ldrh	r2, [r7, #22]
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	e052      	b.n	8007288 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071e8:	e04e      	b.n	8007288 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d827      	bhi.n	8007242 <UART_SetConfig+0x506>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <UART_SetConfig+0x4bc>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007225 	.word	0x08007225
 8007200:	0800722d 	.word	0x0800722d
 8007204:	08007243 	.word	0x08007243
 8007208:	08007233 	.word	0x08007233
 800720c:	08007243 	.word	0x08007243
 8007210:	08007243 	.word	0x08007243
 8007214:	08007243 	.word	0x08007243
 8007218:	0800723b 	.word	0x0800723b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800721c:	f7fd f934 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8007220:	61f8      	str	r0, [r7, #28]
        break;
 8007222:	e014      	b.n	800724e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007224:	f7fd f946 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 8007228:	61f8      	str	r0, [r7, #28]
        break;
 800722a:	e010      	b.n	800724e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800722c:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <UART_SetConfig+0x56c>)
 800722e:	61fb      	str	r3, [r7, #28]
        break;
 8007230:	e00d      	b.n	800724e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007232:	f7fd f891 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8007236:	61f8      	str	r0, [r7, #28]
        break;
 8007238:	e009      	b.n	800724e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723e:	61fb      	str	r3, [r7, #28]
        break;
 8007240:	e005      	b.n	800724e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800724c:	bf00      	nop
    }

    if (pclk != 0U)
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d019      	beq.n	8007288 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	085a      	lsrs	r2, r3, #1
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	441a      	add	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	fbb2 f3f3 	udiv	r3, r2, r3
 8007266:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b0f      	cmp	r3, #15
 800726c:	d909      	bls.n	8007282 <UART_SetConfig+0x546>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007274:	d205      	bcs.n	8007282 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	e002      	b.n	8007288 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007294:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007298:	4618      	mov	r0, r3
 800729a:	3728      	adds	r7, #40	; 0x28
 800729c:	46bd      	mov	sp, r7
 800729e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072a2:	bf00      	nop
 80072a4:	40008000 	.word	0x40008000
 80072a8:	00f42400 	.word	0x00f42400

080072ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01a      	beq.n	80073c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073aa:	d10a      	bne.n	80073c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]
  }
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007400:	f7fa f8b4 	bl	800156c <HAL_GetTick>
 8007404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b08      	cmp	r3, #8
 8007412:	d10e      	bne.n	8007432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f82d 	bl	8007482 <UART_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e023      	b.n	800747a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b04      	cmp	r3, #4
 800743e:	d10e      	bne.n	800745e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f817 	bl	8007482 <UART_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e00d      	b.n	800747a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b09c      	sub	sp, #112	; 0x70
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007492:	e0a5      	b.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800749a:	f000 80a1 	beq.w	80075e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fa f865 	bl	800156c <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80074ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d13e      	bne.n	8007532 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074c8:	667b      	str	r3, [r7, #100]	; 0x64
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e6      	bne.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3308      	adds	r3, #8
 8007504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007506:	64ba      	str	r2, [r7, #72]	; 0x48
 8007508:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800750c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e5      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e067      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d04f      	beq.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754e:	d147      	bne.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007558:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800756e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
 800757a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800757e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e6      	bne.n	800755a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	613b      	str	r3, [r7, #16]
   return(result);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3308      	adds	r3, #8
 80075aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075ac:	623a      	str	r2, [r7, #32]
 80075ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	69f9      	ldr	r1, [r7, #28]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e010      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69da      	ldr	r2, [r3, #28]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4013      	ands	r3, r2
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	bf0c      	ite	eq
 80075f0:	2301      	moveq	r3, #1
 80075f2:	2300      	movne	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f43f af4a 	beq.w	8007494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3770      	adds	r7, #112	; 0x70
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800760c:	b480      	push	{r7}
 800760e:	b097      	sub	sp, #92	; 0x5c
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763e:	d10e      	bne.n	800765e <UART_Start_Receive_IT+0x52>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d105      	bne.n	8007654 <UART_Start_Receive_IT+0x48>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800764e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007652:	e02d      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	22ff      	movs	r2, #255	; 0xff
 8007658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800765c:	e028      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <UART_Start_Receive_IT+0x76>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <UART_Start_Receive_IT+0x6c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	22ff      	movs	r2, #255	; 0xff
 8007672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007676:	e01b      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	227f      	movs	r2, #127	; 0x7f
 800767c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007680:	e016      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800768a:	d10d      	bne.n	80076a8 <UART_Start_Receive_IT+0x9c>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <UART_Start_Receive_IT+0x92>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	227f      	movs	r2, #127	; 0x7f
 8007698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800769c:	e008      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	223f      	movs	r2, #63	; 0x3f
 80076a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076a6:	e003      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2222      	movs	r2, #34	; 0x22
 80076bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	657b      	str	r3, [r7, #84]	; 0x54
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076de:	64ba      	str	r2, [r7, #72]	; 0x48
 80076e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e5      	bne.n	80076be <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	d107      	bne.n	800770c <UART_Start_Receive_IT+0x100>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a24      	ldr	r2, [pc, #144]	; (8007798 <UART_Start_Receive_IT+0x18c>)
 8007708:	665a      	str	r2, [r3, #100]	; 0x64
 800770a:	e002      	b.n	8007712 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a23      	ldr	r2, [pc, #140]	; (800779c <UART_Start_Receive_IT+0x190>)
 8007710:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d019      	beq.n	8007756 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
 8007742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e6      	bne.n	8007722 <UART_Start_Receive_IT+0x116>
 8007754:	e018      	b.n	8007788 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	613b      	str	r3, [r7, #16]
   return(result);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f043 0320 	orr.w	r3, r3, #32
 800776a:	653b      	str	r3, [r7, #80]	; 0x50
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007774:	623b      	str	r3, [r7, #32]
 8007776:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	69f9      	ldr	r1, [r7, #28]
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	61bb      	str	r3, [r7, #24]
   return(result);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	375c      	adds	r7, #92	; 0x5c
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	08007bbf 	.word	0x08007bbf
 800779c:	08007a5f 	.word	0x08007a5f

080077a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b095      	sub	sp, #84	; 0x54
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c6:	643b      	str	r3, [r7, #64]	; 0x40
 80077c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e5      	bne.n	80077da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007812:	2b01      	cmp	r3, #1
 8007814:	d118      	bne.n	8007848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60bb      	str	r3, [r7, #8]
   return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	647b      	str	r3, [r7, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	665a      	str	r2, [r3, #100]	; 0x64
}
 800785a:	bf00      	nop
 800785c:	3754      	adds	r7, #84	; 0x54
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fa43 	bl	8006d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007892:	b480      	push	{r7}
 8007894:	b08f      	sub	sp, #60	; 0x3c
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789e:	2b21      	cmp	r3, #33	; 0x21
 80078a0:	d14d      	bne.n	800793e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d132      	bne.n	8007914 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e6      	bne.n	80078ae <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f4:	633b      	str	r3, [r7, #48]	; 0x30
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6979      	ldr	r1, [r7, #20]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007912:	e014      	b.n	800793e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	b292      	uxth	r2, r2
 8007920:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800793e:	bf00      	nop
 8007940:	373c      	adds	r7, #60	; 0x3c
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800794a:	b480      	push	{r7}
 800794c:	b091      	sub	sp, #68	; 0x44
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007956:	2b21      	cmp	r3, #33	; 0x21
 8007958:	d151      	bne.n	80079fe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d132      	bne.n	80079cc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	623b      	str	r3, [r7, #32]
   return(result);
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	633b      	str	r3, [r7, #48]	; 0x30
 8007986:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800798a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ac:	637b      	str	r3, [r7, #52]	; 0x34
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	69b9      	ldr	r1, [r7, #24]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	617b      	str	r3, [r7, #20]
   return(result);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80079ca:	e018      	b.n	80079fe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	881a      	ldrh	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079de:	b292      	uxth	r2, r2
 80079e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e6:	1c9a      	adds	r2, r3, #2
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80079fe:	bf00      	nop
 8007a00:	3744      	adds	r7, #68	; 0x44
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b088      	sub	sp, #32
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e6      	bne.n	8007a12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff f953 	bl	8006cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a56:	bf00      	nop
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b096      	sub	sp, #88	; 0x58
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a74:	2b22      	cmp	r3, #34	; 0x22
 8007a76:	f040 8094 	bne.w	8007ba2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a80:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a88:	b2d9      	uxtb	r1, r3
 8007a8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	400a      	ands	r2, r1
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d179      	bne.n	8007bb6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e6      	bne.n	8007ac2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3308      	adds	r3, #8
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	623b      	str	r3, [r7, #32]
   return(result);
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	f023 0301 	bic.w	r3, r3, #1
 8007b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b14:	633a      	str	r2, [r7, #48]	; 0x30
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e5      	bne.n	8007af4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d12e      	bne.n	8007b9a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0310 	bic.w	r3, r3, #16
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	69b9      	ldr	r1, [r7, #24]
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e6      	bne.n	8007b42 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f003 0310 	and.w	r3, r3, #16
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d103      	bne.n	8007b8a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2210      	movs	r2, #16
 8007b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff f8c6 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b98:	e00d      	b.n	8007bb6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7f8 fea8 	bl	80008f0 <HAL_UART_RxCpltCallback>
}
 8007ba0:	e009      	b.n	8007bb6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	8b1b      	ldrh	r3, [r3, #24]
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0208 	orr.w	r2, r2, #8
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	831a      	strh	r2, [r3, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	3758      	adds	r7, #88	; 0x58
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b096      	sub	sp, #88	; 0x58
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd4:	2b22      	cmp	r3, #34	; 0x22
 8007bd6:	f040 8094 	bne.w	8007d02 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007be0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007bee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	1c9a      	adds	r2, r3, #2
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d179      	bne.n	8007d16 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c40:	643b      	str	r3, [r7, #64]	; 0x40
 8007c42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d12e      	bne.n	8007cfa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d103      	bne.n	8007cea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff f816 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cf8:	e00d      	b.n	8007d16 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7f8 fdf8 	bl	80008f0 <HAL_UART_RxCpltCallback>
}
 8007d00:	e009      	b.n	8007d16 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	8b1b      	ldrh	r3, [r3, #24]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0208 	orr.w	r2, r2, #8
 8007d12:	b292      	uxth	r2, r2
 8007d14:	831a      	strh	r2, [r3, #24]
}
 8007d16:	bf00      	nop
 8007d18:	3758      	adds	r7, #88	; 0x58
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	; (8007d78 <__libc_init_array+0x44>)
 8007d48:	f000 f820 	bl	8007d8c <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	08007df4 	.word	0x08007df4
 8007d70:	08007df4 	.word	0x08007df4
 8007d74:	08007df4 	.word	0x08007df4
 8007d78:	08007df8 	.word	0x08007df8

08007d7c <memset>:
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
