
fan_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200000ac  08005748  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08005748  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da90  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ba  00000000  00000000  0002db6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00030028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d8d  00000000  00000000  000315c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e70a  00000000  00000000  0005734d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e62ec  00000000  00000000  00065a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bd43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  0014bd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005544 	.word	0x08005544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08005544 	.word	0x08005544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <mutate_power>:

uint32_t power_page_address = 0x08080000;
uint32_t control_mode_page_address  = 0x08080800;
uint32_t wind_mode_page_address = 0x08081000;

void mutate_power(POWER power){
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	FLASH_EraseInitTypeDef flash_erase_power_init;
	flash_erase_power_init.TypeErase =  0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	flash_erase_power_init.Banks = FLASH_BANK_2;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
	flash_erase_power_init.NbPages = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
	flash_erase_power_init.Page = power_page;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <mutate_power+0x64>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	617b      	str	r3, [r7, #20]

	uint32_t* p_power_page = (uint32_t*) power_page_address;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <mutate_power+0x68>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	61fb      	str	r3, [r7, #28]
	if(*p_power_page != power){
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d016      	beq.n	80005de <mutate_power+0x5a>
		HAL_FLASH_Unlock();
 80005b0:	f000 fd9a 	bl	80010e8 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, p_error_page);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <mutate_power+0x6c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4611      	mov	r1, r2
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fe76 	bl	80012b0 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, power_page_address, power);
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <mutate_power+0x68>)
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2200      	movs	r2, #0
 80005cc:	461c      	mov	r4, r3
 80005ce:	4615      	mov	r5, r2
 80005d0:	4622      	mov	r2, r4
 80005d2:	462b      	mov	r3, r5
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fd1b 	bl	8001010 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80005da:	f000 fda7 	bl	800112c <HAL_FLASH_Lock>
	}
}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bdb0      	pop	{r4, r5, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000c8 	.word	0x200000c8
 80005ec:	20000008 	.word	0x20000008
 80005f0:	200000cc 	.word	0x200000cc

080005f4 <mutate_control_mode>:


void mutate_control_mode(CONTROL_MODE control_mode){
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	FLASH_EraseInitTypeDef flash_erase_control_mode_init;
	flash_erase_control_mode_init.TypeErase =  0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
	flash_erase_control_mode_init.Banks = FLASH_BANK_2;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
	flash_erase_control_mode_init.NbPages = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
	flash_erase_control_mode_init.Page = control_mode_page;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <mutate_control_mode+0x64>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	617b      	str	r3, [r7, #20]

	uint32_t* p_control_mode_page = (uint32_t*) control_mode_page_address;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <mutate_control_mode+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	61fb      	str	r3, [r7, #28]
	if(*p_control_mode_page != control_mode){
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	429a      	cmp	r2, r3
 800061e:	d016      	beq.n	800064e <mutate_control_mode+0x5a>
		HAL_FLASH_Unlock();
 8000620:	f000 fd62 	bl	80010e8 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, p_error_page);
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <mutate_control_mode+0x6c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fe3e 	bl	80012b0 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, control_mode_page_address, control_mode);
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <mutate_control_mode+0x68>)
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2200      	movs	r2, #0
 800063c:	461c      	mov	r4, r3
 800063e:	4615      	mov	r5, r2
 8000640:	4622      	mov	r2, r4
 8000642:	462b      	mov	r3, r5
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fce3 	bl	8001010 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 800064a:	f000 fd6f 	bl	800112c <HAL_FLASH_Lock>
	}
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	2000000c 	.word	0x2000000c
 8000660:	200000cc 	.word	0x200000cc

08000664 <mutate_wind_mode>:


void mutate_wind_mode(WIND_MODE wind_mode){
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	FLASH_EraseInitTypeDef flash_erase_wind_mode_init;
	flash_erase_wind_mode_init.TypeErase = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
	flash_erase_wind_mode_init.Banks = FLASH_BANK_2;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
	flash_erase_wind_mode_init.NbPages = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
	flash_erase_wind_mode_init.Page = wind_mode_page;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <mutate_wind_mode+0x64>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	617b      	str	r3, [r7, #20]

	uint32_t* p_wind_mode_page = (uint32_t*) wind_mode_page_address;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <mutate_wind_mode+0x68>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	61fb      	str	r3, [r7, #28]
	if(*p_wind_mode_page != wind_mode){
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	429a      	cmp	r2, r3
 800068e:	d016      	beq.n	80006be <mutate_wind_mode+0x5a>
		HAL_FLASH_Unlock();
 8000690:	f000 fd2a 	bl	80010e8 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, p_error_page);
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <mutate_wind_mode+0x6c>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fe06 	bl	80012b0 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, wind_mode_page_address, wind_mode);
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <mutate_wind_mode+0x68>)
 80006a6:	6819      	ldr	r1, [r3, #0]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2200      	movs	r2, #0
 80006ac:	461c      	mov	r4, r3
 80006ae:	4615      	mov	r5, r2
 80006b0:	4622      	mov	r2, r4
 80006b2:	462b      	mov	r3, r5
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 fcab 	bl	8001010 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80006ba:	f000 fd37 	bl	800112c <HAL_FLASH_Lock>
	}
}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bdb0      	pop	{r4, r5, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004
 80006cc:	20000010 	.word	0x20000010
 80006d0:	200000cc 	.word	0x200000cc

080006d4 <get_power>:

uint8_t get_power(){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
	uint32_t* p_power_page = (uint32_t*) power_page_address;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <get_power+0x20>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	607b      	str	r3, [r7, #4]
	return *p_power_page;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000008 	.word	0x20000008

080006f8 <get_control_mode>:

uint8_t get_control_mode(){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
	uint32_t* p_control_mode_page = (uint32_t*) control_mode_page_address;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <get_control_mode+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	607b      	str	r3, [r7, #4]
	return *p_control_mode_page;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	2000000c 	.word	0x2000000c

0800071c <get_wind_mode>:

uint8_t get_wind_mode(){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	uint32_t* p_wind_mode_page = (uint32_t*) wind_mode_page_address;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <get_wind_mode+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	607b      	str	r3, [r7, #4]
	return *p_wind_mode_page;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000010 	.word	0x20000010

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000744:	f004 fe82 	bl	800544c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fa5d 	bl	8000c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f80b 	bl	8000766 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f880 	bl	8000854 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000754:	f000 f84e 	bl	80007f4 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//  test_message_handler(receiveBuffer, sendBuffer);
  	  test_get();
 8000758:	f000 f9bc 	bl	8000ad4 <test_get>
  	  test_mutate();
 800075c:	f000 f9cc 	bl	8000af8 <test_mutate>
 8000760:	2300      	movs	r3, #0
//  ctrl_mode(1);
//  handle_message(receiveBuffer, sendBuffer);
//  set_wind(0);
//  print_mess(sendBuffer, handle_message(receiveBuffer, sendBuffer));
  /* USER CODE END 3 */
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}

08000766 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b096      	sub	sp, #88	; 0x58
 800076a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2244      	movs	r2, #68	; 0x44
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fc37 	bl	8003fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000788:	f44f 7000 	mov.w	r0, #512	; 0x200
 800078c:	f001 f88c 	bl	80018a8 <HAL_PWREx_ControlVoltageScaling>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000796:	f000 f881 	bl	800089c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800079a:	2310      	movs	r3, #16
 800079c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007a6:	2360      	movs	r3, #96	; 0x60
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f8ce 	bl	8001954 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007be:	f000 f86d 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fc96 	bl	800210c <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007e6:	f000 f859 	bl	800089c <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3758      	adds	r7, #88	; 0x58
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART1_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART1_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART1_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART1_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART1_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000838:	f002 fb48 	bl	8002ecc <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f82b 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000d0 	.word	0x200000d0
 8000850:	40013800 	.word	0x40013800

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_GPIO_Init+0x44>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <MX_GPIO_Init+0x44>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_GPIO_Init+0x44>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_GPIO_Init+0x44>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <MX_GPIO_Init+0x44>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_GPIO_Init+0x44>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0ac      	sub	sp, #176	; 0xb0
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2288      	movs	r2, #136	; 0x88
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fb69 	bl	8003fe8 <memset>
  if(huart->Instance==USART1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <HAL_UART_MspInit+0xc0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d142      	bne.n	80009a6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000920:	2301      	movs	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fe11 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000938:	f7ff ffb0 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_UART_MspInit+0xc4>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0xc4>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6613      	str	r3, [r2, #96]	; 0x60
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_UART_MspInit+0xc4>)
 800094a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0xc4>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0xc4>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0xc4>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800096c:	23c0      	movs	r3, #192	; 0xc0
 800096e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000984:	2307      	movs	r3, #7
 8000986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_UART_MspInit+0xc8>)
 8000992:	f000 fdd1 	bl	8001538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	2025      	movs	r0, #37	; 0x25
 800099c:	f000 fa83 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a0:	2025      	movs	r0, #37	; 0x25
 80009a2:	f000 fa9c 	bl	8000ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	37b0      	adds	r7, #176	; 0xb0
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000400 	.word	0x48000400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f952 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART1_IRQHandler+0x10>)
 8000a16:	f002 faa7 	bl	8002f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000d0 	.word	0x200000d0

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f003 fa9e 	bl	8003f94 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20018000 	.word	0x20018000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	20000154 	.word	0x20000154
 8000a8c:	20000218 	.word	0x20000218

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <print_state>:
 */


#include "test_flash_mutate.h"

void print_state(uint8_t state){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	printf("Actual:   %d\n", state);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <print_state+0x1c>)
 8000ac4:	f003 fa98 	bl	8003ff8 <iprintf>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	0800555c 	.word	0x0800555c

08000ad4 <test_get>:
void test_get(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	mutate_power(OFF);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fd53 	bl	8000584 <mutate_power>
	printf("Expected: 0\n");
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <test_get+0x20>)
 8000ae0:	f003 fb10 	bl	8004104 <puts>
	print_state(get_power());
 8000ae4:	f7ff fdf6 	bl	80006d4 <get_power>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ffe2 	bl	8000ab4 <print_state>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	0800556c 	.word	0x0800556c

08000af8 <test_mutate>:
void test_mutate(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

	mutate_power(OFF);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fd41 	bl	8000584 <mutate_power>
	printf("Expected: 0\n");
 8000b02:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <test_mutate+0xb0>)
 8000b04:	f003 fafe 	bl	8004104 <puts>
	print_state(get_power());
 8000b08:	f7ff fde4 	bl	80006d4 <get_power>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffd0 	bl	8000ab4 <print_state>

	mutate_power(ON);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fd35 	bl	8000584 <mutate_power>
	printf("Expected: 1\n");
 8000b1a:	4824      	ldr	r0, [pc, #144]	; (8000bac <test_mutate+0xb4>)
 8000b1c:	f003 faf2 	bl	8004104 <puts>
	print_state(get_power());
 8000b20:	f7ff fdd8 	bl	80006d4 <get_power>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffc4 	bl	8000ab4 <print_state>

	mutate_control_mode(AUTOMATIC);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fd61 	bl	80005f4 <mutate_control_mode>
	printf("Expected: 0\n");
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <test_mutate+0xb0>)
 8000b34:	f003 fae6 	bl	8004104 <puts>
	print_state(get_control_mode());
 8000b38:	f7ff fdde 	bl	80006f8 <get_control_mode>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffb8 	bl	8000ab4 <print_state>

	mutate_control_mode(MANUAL);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fd55 	bl	80005f4 <mutate_control_mode>
	printf("Expected: 1\n");
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <test_mutate+0xb4>)
 8000b4c:	f003 fada 	bl	8004104 <puts>
	print_state(get_control_mode());
 8000b50:	f7ff fdd2 	bl	80006f8 <get_control_mode>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffac 	bl	8000ab4 <print_state>

	mutate_wind_mode(LEVEL_0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fd81 	bl	8000664 <mutate_wind_mode>
	printf("Expected: 0\n");
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <test_mutate+0xb0>)
 8000b64:	f003 face 	bl	8004104 <puts>
	print_state(get_wind_mode());
 8000b68:	f7ff fdd8 	bl	800071c <get_wind_mode>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffa0 	bl	8000ab4 <print_state>

	mutate_wind_mode(LEVEL_1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fd75 	bl	8000664 <mutate_wind_mode>
	printf("Expected: 1\n");
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <test_mutate+0xb4>)
 8000b7c:	f003 fac2 	bl	8004104 <puts>
	print_state(get_wind_mode());
 8000b80:	f7ff fdcc 	bl	800071c <get_wind_mode>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff94 	bl	8000ab4 <print_state>

	mutate_wind_mode(LEVEL_2);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f7ff fd69 	bl	8000664 <mutate_wind_mode>
	printf("Expected: 2\n");
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <test_mutate+0xb8>)
 8000b94:	f003 fab6 	bl	8004104 <puts>
	print_state(get_wind_mode());
 8000b98:	f7ff fdc0 	bl	800071c <get_wind_mode>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff88 	bl	8000ab4 <print_state>

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800556c 	.word	0x0800556c
 8000bac:	08005578 	.word	0x08005578
 8000bb0:	08005584 	.word	0x08005584

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb8:	f7ff ff6a 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f003 f9dd 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fdab 	bl	8000740 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000bf8:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 8000bfc:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000c00:	20000218 	.word	0x20000218

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>

08000c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f93d 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f80e 	bl	8000c38 <HAL_InitTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c28:	f7ff fe3e 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_InitTick+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d023      	beq.n	8000c94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_InitTick+0x70>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f949 	bl	8000efa <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10f      	bne.n	8000c8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d809      	bhi.n	8000c88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 f913 	bl	8000ea6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_InitTick+0x74>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e004      	b.n	8000c98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e001      	b.n	8000c98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000001c 	.word	0x2000001c
 8000ca8:	20000014 	.word	0x20000014
 8000cac:	20000018 	.word	0x20000018

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000001c 	.word	0x2000001c
 8000cd4:	20000158 	.word	0x20000158

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000158 	.word	0x20000158

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff3e 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff31 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa2 	bl	8000e4c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b085      	sub	sp, #20
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d008      	beq.n	8000f3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e022      	b.n	8000f82 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 020e 	bic.w	r2, r2, #14
 8000f4a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	f003 021c 	and.w	r2, r3, #28
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	2101      	movs	r1, #1
 8000f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d005      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2204      	movs	r2, #4
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e029      	b.n	8001006 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 020e 	bic.w	r2, r2, #14
 8000fc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 021c 	and.w	r2, r3, #28
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	4798      	blx	r3
    }
  }
  return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_FLASH_Program+0xd0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_FLASH_Program+0x1e>
 800102a:	2302      	movs	r3, #2
 800102c:	e053      	b.n	80010d6 <HAL_FLASH_Program+0xc6>
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_FLASH_Program+0xd0>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001038:	f000 f888 	bl	800114c <FLASH_WaitForLastOperation>
 800103c:	4603      	mov	r3, r0
 800103e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d143      	bne.n	80010ce <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_FLASH_Program+0xd0>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_FLASH_Program+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d009      	beq.n	800106c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_FLASH_Program+0xd4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_FLASH_Program+0xd4>)
 800105e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001062:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <HAL_FLASH_Program+0xd0>)
 8001066:	2202      	movs	r2, #2
 8001068:	771a      	strb	r2, [r3, #28]
 800106a:	e002      	b.n	8001072 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_FLASH_Program+0xd0>)
 800106e:	2200      	movs	r2, #0
 8001070:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f000 f8bb 	bl	80011f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001082:	2301      	movs	r3, #1
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e010      	b.n	80010aa <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d002      	beq.n	8001094 <HAL_FLASH_Program+0x84>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d10a      	bne.n	80010aa <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f000 f8d3 	bl	8001244 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d102      	bne.n	80010aa <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80010a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010a8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010ae:	f000 f84d 	bl	800114c <FLASH_WaitForLastOperation>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_FLASH_Program+0xd4>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <HAL_FLASH_Program+0xd4>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80010ca:	f000 f9eb 	bl	80014a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_FLASH_Program+0xd0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

  return status;
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000020 	.word	0x20000020
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_FLASH_Unlock+0x38>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da0b      	bge.n	8001112 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_FLASH_Unlock+0x38>)
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <HAL_FLASH_Unlock+0x3c>)
 80010fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_FLASH_Unlock+0x38>)
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_FLASH_Unlock+0x40>)
 8001104:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_FLASH_Unlock+0x38>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da01      	bge.n	8001112 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001112:	79fb      	ldrb	r3, [r7, #7]
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40022000 	.word	0x40022000
 8001124:	45670123 	.word	0x45670123
 8001128:	cdef89ab 	.word	0xcdef89ab

0800112c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_FLASH_Lock+0x1c>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_FLASH_Lock+0x1c>)
 8001136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800113a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40022000 	.word	0x40022000

0800114c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fdc0 	bl	8000cd8 <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800115a:	e00d      	b.n	8001178 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001162:	d009      	beq.n	8001178 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001164:	f7ff fdb8 	bl	8000cd8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	d801      	bhi.n	8001178 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e037      	b.n	80011e8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1eb      	bne.n	800115c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01e      	beq.n	80011d4 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <FLASH_WaitForLastOperation+0xa8>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <FLASH_WaitForLastOperation+0xa8>)
 80011a0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <FLASH_WaitForLastOperation+0x70>
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	618b      	str	r3, [r1, #24]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <FLASH_WaitForLastOperation+0x84>
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011ce:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e009      	b.n	80011e8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <FLASH_WaitForLastOperation+0xa4>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40022000 	.word	0x40022000
 80011f4:	20000020 	.word	0x20000020

080011f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <FLASH_Program_DoubleWord+0x48>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <FLASH_Program_DoubleWord+0x48>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001216:	f3bf 8f6f 	isb	sy
}
 800121a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800121c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	000a      	movs	r2, r1
 800122a:	2300      	movs	r3, #0
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	3104      	adds	r1, #4
 8001230:	4613      	mov	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40022000 	.word	0x40022000

08001244 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800124e:	2340      	movs	r3, #64	; 0x40
 8001250:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <FLASH_Program_Fast+0x68>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <FLASH_Program_Fast+0x68>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001266:	f3ef 8310 	mrs	r3, PRIMASK
 800126a:	60fb      	str	r3, [r7, #12]
  return(result);
 800126c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800126e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	3304      	adds	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
    row_index--;
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	3b01      	subs	r3, #1
 800128c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ef      	bne.n	8001274 <FLASH_Program_Fast+0x30>
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f383 8810 	msr	PRIMASK, r3
}
 800129e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_FLASHEx_Erase+0x16>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e087      	b.n	80013d6 <HAL_FLASHEx_Erase+0x126>
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d0:	f7ff ff3c 	bl	800114c <FLASH_WaitForLastOperation>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d177      	bne.n	80013ce <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012de:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 8001302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 800130a:	2203      	movs	r2, #3
 800130c:	771a      	strb	r2, [r3, #28]
 800130e:	e016      	b.n	800133e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 8001312:	2201      	movs	r2, #1
 8001314:	771a      	strb	r2, [r3, #28]
 8001316:	e012      	b.n	800133e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2e      	ldr	r2, [pc, #184]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 800132a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 8001332:	2202      	movs	r2, #2
 8001334:	771a      	strb	r2, [r3, #28]
 8001336:	e002      	b.n	800133e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 800133a:	2200      	movs	r2, #0
 800133c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d113      	bne.n	800136e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f84c 	bl	80013e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001350:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001354:	f7ff fefa 	bl	800114c <FLASH_WaitForLastOperation>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 8001362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	6153      	str	r3, [r2, #20]
 800136c:	e02d      	b.n	80013ca <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001374:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e01d      	b.n	80013ba <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4619      	mov	r1, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f000 f857 	bl	8001438 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800138a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800138e:	f7ff fedd 	bl	800114c <FLASH_WaitForLastOperation>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_FLASHEx_Erase+0x134>)
 800139c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013a0:	f023 0302 	bic.w	r3, r3, #2
 80013a4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	601a      	str	r2, [r3, #0]
          break;
 80013b2:	e00a      	b.n	80013ca <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3d9      	bcc.n	800137e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80013ca:	f000 f86b 	bl	80014a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_FLASHEx_Erase+0x130>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]

  return status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000020 	.word	0x20000020
 80013e4:	40022000 	.word	0x40022000

080013e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <FLASH_MassErase+0x4c>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <FLASH_MassErase+0x4c>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <FLASH_MassErase+0x4c>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <FLASH_MassErase+0x4c>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <FLASH_MassErase+0x4c>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <FLASH_MassErase+0x4c>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6153      	str	r3, [r2, #20]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40022000 	.word	0x40022000

08001438 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <FLASH_PageErase+0x68>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <FLASH_PageErase+0x68>)
 8001452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001456:	6153      	str	r3, [r2, #20]
 8001458:	e005      	b.n	8001466 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <FLASH_PageErase+0x68>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <FLASH_PageErase+0x68>)
 8001460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001464:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <FLASH_PageErase+0x68>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001476:	490a      	ldr	r1, [pc, #40]	; (80014a0 <FLASH_PageErase+0x68>)
 8001478:	4313      	orrs	r3, r2
 800147a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <FLASH_PageErase+0x68>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <FLASH_PageErase+0x68>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <FLASH_PageErase+0x68>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <FLASH_PageErase+0x68>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6153      	str	r3, [r2, #20]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40022000 	.word	0x40022000

080014a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <FLASH_FlushCaches+0x8c>)
 80014ac:	7f1b      	ldrb	r3, [r3, #28]
 80014ae:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d002      	beq.n	80014bc <FLASH_FlushCaches+0x18>
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d117      	bne.n	80014ec <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a16      	ldr	r2, [pc, #88]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a13      	ldr	r2, [pc, #76]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d002      	beq.n	80014f8 <FLASH_FlushCaches+0x54>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d111      	bne.n	800151c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <FLASH_FlushCaches+0x90>)
 80014fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <FLASH_FlushCaches+0x90>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <FLASH_FlushCaches+0x90>)
 800150a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800150e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <FLASH_FlushCaches+0x90>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <FLASH_FlushCaches+0x90>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <FLASH_FlushCaches+0x8c>)
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000020 	.word	0x20000020
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e17f      	b.n	8001848 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8171 	beq.w	8001842 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d005      	beq.n	8001578 <HAL_GPIO_Init+0x40>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d130      	bne.n	80015da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ae:	2201      	movs	r2, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 0201 	and.w	r2, r3, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d118      	bne.n	8001618 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	6939      	ldr	r1, [r7, #16]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80ac 	beq.w	8001842 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HAL_GPIO_Init+0x330>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <HAL_GPIO_Init+0x330>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_GPIO_Init+0x330>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001702:	4a5a      	ldr	r2, [pc, #360]	; (800186c <HAL_GPIO_Init+0x334>)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x242>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_GPIO_Init+0x338>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x23e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_GPIO_Init+0x33c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x23a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4d      	ldr	r2, [pc, #308]	; (8001878 <HAL_GPIO_Init+0x340>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x236>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_GPIO_Init+0x344>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x232>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4b      	ldr	r2, [pc, #300]	; (8001880 <HAL_GPIO_Init+0x348>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x22e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4a      	ldr	r2, [pc, #296]	; (8001884 <HAL_GPIO_Init+0x34c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x22a>
 800175e:	2306      	movs	r3, #6
 8001760:	e00c      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001762:	2307      	movs	r3, #7
 8001764:	e00a      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001766:	2305      	movs	r3, #5
 8001768:	e008      	b.n	800177c <HAL_GPIO_Init+0x244>
 800176a:	2304      	movs	r3, #4
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x244>
 800176e:	2303      	movs	r3, #3
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001772:	2302      	movs	r3, #2
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x244>
 800177a:	2300      	movs	r3, #0
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	f002 0203 	and.w	r2, r2, #3
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178c:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_GPIO_Init+0x334>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_GPIO_Init+0x350>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_GPIO_Init+0x350>)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_GPIO_Init+0x350>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e8:	4a27      	ldr	r2, [pc, #156]	; (8001888 <HAL_GPIO_Init+0x350>)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_GPIO_Init+0x350>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_GPIO_Init+0x350>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_GPIO_Init+0x350>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_GPIO_Init+0x350>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f ae78 	bne.w	8001548 <HAL_GPIO_Init+0x10>
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	48000400 	.word	0x48000400
 8001874:	48000800 	.word	0x48000800
 8001878:	48000c00 	.word	0x48000c00
 800187c:	48001000 	.word	0x48001000
 8001880:	48001400 	.word	0x48001400
 8001884:	48001800 	.word	0x48001800
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b6:	d130      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c4:	d038      	beq.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2232      	movs	r2, #50	; 0x32
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	0c9b      	lsrs	r3, r3, #18
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ec:	e002      	b.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001900:	d102      	bne.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f2      	bne.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001914:	d110      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e00f      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d007      	beq.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001930:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001936:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000
 800194c:	20000014 	.word	0x20000014
 8001950:	431bde83 	.word	0x431bde83

08001954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e3ca      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b97      	ldr	r3, [pc, #604]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001970:	4b94      	ldr	r3, [pc, #592]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80e4 	beq.w	8001b50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_RCC_OscConfig+0x4a>
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	f040 808b 	bne.w	8001aac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 8087 	bne.w	8001aac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e3a2      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_RCC_OscConfig+0x7c>
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ce:	e005      	b.n	80019dc <HAL_RCC_OscConfig+0x88>
 80019d0:	4b7c      	ldr	r3, [pc, #496]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019dc:	4293      	cmp	r3, r2
 80019de:	d223      	bcs.n	8001a28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fd55 	bl	8002494 <RCC_SetFlashLatencyFromMSIRange>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e383      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a72      	ldr	r2, [pc, #456]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b70      	ldr	r3, [pc, #448]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	496d      	ldr	r1, [pc, #436]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a12:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	4968      	ldr	r1, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e025      	b.n	8001a74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a65      	ldr	r2, [pc, #404]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4960      	ldr	r1, [pc, #384]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a46:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	495b      	ldr	r1, [pc, #364]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fd15 	bl	8002494 <RCC_SetFlashLatencyFromMSIRange>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e343      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a74:	f000 fc4a 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	4950      	ldr	r1, [pc, #320]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	4a4e      	ldr	r2, [pc, #312]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001a92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a94:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f8cd 	bl	8000c38 <HAL_InitTick>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d052      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	e327      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d032      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a42      	ldr	r2, [pc, #264]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f90a 	bl	8000cd8 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f906 	bl	8000cd8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e310      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a36      	ldr	r2, [pc, #216]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4931      	ldr	r1, [pc, #196]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b04:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	492c      	ldr	r1, [pc, #176]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
 8001b18:	e01a      	b.n	8001b50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f8d7 	bl	8000cd8 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f8d3 	bl	8000cd8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e2dd      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x1da>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d074      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x21a>
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d10e      	bne.n	8001b86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d10b      	bne.n	8001b86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d064      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d160      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e2ba      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x24a>
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e026      	b.n	8001bec <HAL_RCC_OscConfig+0x298>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba6:	d115      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x280>
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a02      	ldr	r2, [pc, #8]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x298>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08005590 	.word	0x08005590
 8001bcc:	20000014 	.word	0x20000014
 8001bd0:	20000018 	.word	0x20000018
 8001bd4:	4ba0      	ldr	r3, [pc, #640]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a9f      	ldr	r2, [pc, #636]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b9d      	ldr	r3, [pc, #628]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a9c      	ldr	r2, [pc, #624]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f870 	bl	8000cd8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f86c 	bl	8000cd8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e276      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b92      	ldr	r3, [pc, #584]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x2a8>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f85c 	bl	8000cd8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff f858 	bl	8000cd8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e262      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2d0>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d060      	beq.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_OscConfig+0x310>
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d116      	bne.n	8001c92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	4b7c      	ldr	r3, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x328>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e23f      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4973      	ldr	r1, [pc, #460]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	e040      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d023      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f817 	bl	8000cd8 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff f813 	bl	8000cd8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e21d      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc0:	4b65      	ldr	r3, [pc, #404]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	495f      	ldr	r1, [pc, #380]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7fe fff3 	bl	8000cd8 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7fe ffef 	bl	8000cd8 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1f9      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7fe ffce 	bl	8000cd8 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7fe ffca 	bl	8000cd8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1d4      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ef      	beq.n	8001d40 <HAL_RCC_OscConfig+0x3ec>
 8001d60:	e01b      	b.n	8001d9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d68:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7fe ffb1 	bl	8000cd8 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7fe ffad 	bl	8000cd8 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1b7      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ef      	bne.n	8001d7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80a6 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d118      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dec:	f7fe ff74 	bl	8000cd8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df4:	f7fe ff70 	bl	8000cd8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e17a      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4d8>
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2a:	e029      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d115      	bne.n	8001e60 <HAL_RCC_OscConfig+0x50c>
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	4b9c      	ldr	r3, [pc, #624]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	4a9b      	ldr	r2, [pc, #620]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e70:	4b98      	ldr	r3, [pc, #608]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	4a97      	ldr	r2, [pc, #604]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d016      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe ff26 	bl	8000cd8 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7fe ff22 	bl	8000cd8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e12a      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ed      	beq.n	8001e90 <HAL_RCC_OscConfig+0x53c>
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7fe ff0f 	bl	8000cd8 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe ff0b 	bl	8000cd8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e113      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed4:	4b7f      	ldr	r3, [pc, #508]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ed      	bne.n	8001ebe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4a79      	ldr	r2, [pc, #484]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80fe 	beq.w	80020fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 80d0 	bne.w	80020a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f08:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d130      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	3b01      	subs	r3, #1
 8001f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d127      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d11f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f48:	2a07      	cmp	r2, #7
 8001f4a:	bf14      	ite	ne
 8001f4c:	2201      	movne	r2, #1
 8001f4e:	2200      	moveq	r2, #0
 8001f50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d113      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d06e      	beq.n	800205c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d069      	beq.n	8002058 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0ad      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4b      	ldr	r2, [pc, #300]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fac:	f7fe fe94 	bl	8000cd8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe fe90 	bl	8000cd8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e09a      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x784>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe2:	3a01      	subs	r2, #1
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fec:	0212      	lsls	r2, r2, #8
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff4:	0852      	lsrs	r2, r2, #1
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	0552      	lsls	r2, r2, #21
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002000:	0852      	lsrs	r2, r2, #1
 8002002:	3a01      	subs	r2, #1
 8002004:	0652      	lsls	r2, r2, #25
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800200c:	0912      	lsrs	r2, r2, #4
 800200e:	0452      	lsls	r2, r2, #17
 8002010:	430a      	orrs	r2, r1
 8002012:	4930      	ldr	r1, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002030:	f7fe fe52 	bl	8000cd8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7fe fe4e 	bl	8000cd8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e058      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002056:	e050      	b.n	80020fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e04f      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d148      	bne.n	80020fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002080:	f7fe fe2a 	bl	8000cd8 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fe26 	bl	8000cd8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e030      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x734>
 80020a6:	e028      	b.n	80020fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d023      	beq.n	80020f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 80020b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7fe fe0d 	bl	8000cd8 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c0:	e00c      	b.n	80020dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7fe fe09 	bl	8000cd8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d905      	bls.n	80020dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e013      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x7b0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ec      	bne.n	80020c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x7b0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4905      	ldr	r1, [pc, #20]	; (8002104 <HAL_RCC_OscConfig+0x7b0>)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_OscConfig+0x7b4>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e001      	b.n	80020fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	feeefffc 	.word	0xfeeefffc

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0e7      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4970      	ldr	r1, [pc, #448]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b6e      	ldr	r3, [pc, #440]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cf      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4960      	ldr	r1, [pc, #384]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d04c      	beq.n	8002224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d121      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0a6      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e09a      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c2:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e08e      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e086      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4943      	ldr	r1, [pc, #268]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f4:	f7fe fd70 	bl	8000cd8 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7fe fd6c 	bl	8000cd8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e06e      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223c:	429a      	cmp	r2, r3
 800223e:	d208      	bcs.n	8002252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	492b      	ldr	r1, [pc, #172]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d210      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 0207 	bic.w	r2, r3, #7
 8002268:	4923      	ldr	r1, [pc, #140]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e036      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4918      	ldr	r1, [pc, #96]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4910      	ldr	r1, [pc, #64]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c0:	f000 f824 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	490b      	ldr	r1, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1f4>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1fc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fca7 	bl	8000c38 <HAL_InitTick>
 80022ea:	4603      	mov	r3, r0
 80022ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ee:	7afb      	ldrb	r3, [r7, #11]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	08005590 	.word	0x08005590
 8002304:	20000014 	.word	0x20000014
 8002308:	20000018 	.word	0x20000018

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x34>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d121      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d11e      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e005      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002368:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d102      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_RCC_GetSysClockFreq+0x110>)
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	e004      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d101      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_GetSysClockFreq+0x114>)
 8002392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d134      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d003      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0xac>
 80023b0:	e005      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_GetSysClockFreq+0x110>)
 80023b4:	617b      	str	r3, [r7, #20]
      break;
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ba:	617b      	str	r3, [r7, #20]
      break;
 80023bc:	e002      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	617b      	str	r3, [r7, #20]
      break;
 80023c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	3301      	adds	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	0e5b      	lsrs	r3, r3, #25
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002404:	69bb      	ldr	r3, [r7, #24]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	080055a8 	.word	0x080055a8
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200

08002424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000014 	.word	0x20000014

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	080055a0 	.word	0x080055a0

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800246c:	f7ff ffda 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0adb      	lsrs	r3, r3, #11
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4904      	ldr	r1, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	080055a0 	.word	0x080055a0

08002494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024ac:	f7ff f9ee 	bl	800188c <HAL_PWREx_GetVoltageRange>
 80024b0:	6178      	str	r0, [r7, #20]
 80024b2:	e014      	b.n	80024de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a24      	ldr	r2, [pc, #144]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024cc:	f7ff f9de 	bl	800188c <HAL_PWREx_GetVoltageRange>
 80024d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e4:	d10b      	bne.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d919      	bls.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2ba0      	cmp	r3, #160	; 0xa0
 80024f0:	d902      	bls.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024f2:	2302      	movs	r3, #2
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	e013      	b.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f8:	2301      	movs	r3, #1
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	e010      	b.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d902      	bls.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002504:	2303      	movs	r3, #3
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e00a      	b.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d102      	bne.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002510:	2302      	movs	r3, #2
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	e004      	b.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b70      	cmp	r3, #112	; 0x70
 800251a:	d101      	bne.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800251c:	2301      	movs	r3, #1
 800251e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 0207 	bic.w	r2, r3, #7
 8002528:	4909      	ldr	r1, [pc, #36]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	40022000 	.word	0x40022000

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800255c:	2300      	movs	r3, #0
 800255e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002560:	2300      	movs	r3, #0
 8002562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256c:	2b00      	cmp	r3, #0
 800256e:	d041      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002578:	d02a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800257a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800257e:	d824      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800258a:	d81e      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002594:	d010      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002596:	e018      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002598:	4b86      	ldr	r3, [pc, #536]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a85      	ldr	r2, [pc, #532]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fabb 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b6:	e00c      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3320      	adds	r3, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fba6 	bl	8002d10 <RCCEx_PLLSAI2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	74fb      	strb	r3, [r7, #19]
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d8:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e6:	4973      	ldr	r1, [pc, #460]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d041      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002608:	d02a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800260a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800260e:	d824      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002614:	d008      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261a:	d81e      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d010      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002626:	e018      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002628:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a61      	ldr	r2, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002634:	e015      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fa73 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002646:	e00c      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3320      	adds	r3, #32
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fb5e 	bl	8002d10 <RCCEx_PLLSAI2_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002658:	e003      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	74fb      	strb	r3, [r7, #19]
      break;
 800265e:	e000      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002668:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002676:	494f      	ldr	r1, [pc, #316]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800267e:	e001      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a0 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fb00 	bl	8000cd8 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fafc 	bl	8000cd8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	74fb      	strb	r3, [r7, #19]
        break;
 80026ee:	e005      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f0:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d15c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01f      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	d019      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe fabb 	bl	8000cd8 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002764:	e00b      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fab7 	bl	8000cd8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d902      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	74fb      	strb	r3, [r7, #19]
            break;
 800277c:	e006      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ec      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027aa:	e009      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
 80027b0:	e006      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	7c7b      	ldrb	r3, [r7, #17]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a9d      	ldr	r2, [pc, #628]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027de:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f023 0203 	bic.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	4994      	ldr	r1, [pc, #592]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 020c 	bic.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	498c      	ldr	r1, [pc, #560]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002822:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4983      	ldr	r1, [pc, #524]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	497b      	ldr	r1, [pc, #492]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002874:	4972      	ldr	r1, [pc, #456]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002888:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	496a      	ldr	r1, [pc, #424]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	4961      	ldr	r1, [pc, #388]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028cc:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	4959      	ldr	r1, [pc, #356]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	4950      	ldr	r1, [pc, #320]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	4948      	ldr	r1, [pc, #288]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	493f      	ldr	r1, [pc, #252]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d028      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002962:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002972:	d106      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
 8002980:	e011      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298a:	d10c      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	2101      	movs	r1, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f8c8 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029dc:	60d3      	str	r3, [r2, #12]
 80029de:	e011      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f899 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02b      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a02      	ldr	r2, [pc, #8]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e014      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f867 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02f      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a82:	4928      	ldr	r1, [pc, #160]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f844 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
 8002aae:	e011      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3320      	adds	r3, #32
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f925 	bl	8002d10 <RCCEx_PLLSAI2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aee:	490d      	ldr	r1, [pc, #52]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000

08002b28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b36:	4b75      	ldr	r3, [pc, #468]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d018      	beq.n	8002b74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0203 	and.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d10d      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
       ||
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d047      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	e044      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d018      	beq.n	8002bae <RCCEx_PLLSAI1_Config+0x86>
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d825      	bhi.n	8002bcc <RCCEx_PLLSAI1_Config+0xa4>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d002      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0x62>
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d009      	beq.n	8002b9c <RCCEx_PLLSAI1_Config+0x74>
 8002b88:	e020      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b8a:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11d      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9a:	e01a      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b9c:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d116      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e013      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bca:	e006      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	e004      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	4944      	ldr	r1, [pc, #272]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d17d      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c04:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe f862 	bl	8000cd8 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c16:	e009      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c18:	f7fe f85e 	bl	8000cd8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	73fb      	strb	r3, [r7, #15]
        break;
 8002c2a:	e005      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2c:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ef      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d160      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d111      	bne.n	8002c68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6892      	ldr	r2, [r2, #8]
 8002c54:	0211      	lsls	r1, r2, #8
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68d2      	ldr	r2, [r2, #12]
 8002c5a:	0912      	lsrs	r2, r2, #4
 8002c5c:	0452      	lsls	r2, r2, #17
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	492a      	ldr	r1, [pc, #168]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	610b      	str	r3, [r1, #16]
 8002c66:	e027      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d112      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	0211      	lsls	r1, r2, #8
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6912      	ldr	r2, [r2, #16]
 8002c84:	0852      	lsrs	r2, r2, #1
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0552      	lsls	r2, r2, #21
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	491f      	ldr	r1, [pc, #124]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	610b      	str	r3, [r1, #16]
 8002c92:	e011      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	0211      	lsls	r1, r2, #8
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6952      	ldr	r2, [r2, #20]
 8002caa:	0852      	lsrs	r2, r2, #1
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0652      	lsls	r2, r2, #25
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4916      	ldr	r1, [pc, #88]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe f808 	bl	8000cd8 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cca:	e009      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ccc:	f7fe f804 	bl	8000cd8 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d902      	bls.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cde:	e005      	b.n	8002cec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ef      	beq.n	8002ccc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	4904      	ldr	r1, [pc, #16]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000

08002d10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0203 	and.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10d      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d42:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
       ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d047      	beq.n	8002de6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	e044      	b.n	8002de6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d018      	beq.n	8002d96 <RCCEx_PLLSAI2_Config+0x86>
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d825      	bhi.n	8002db4 <RCCEx_PLLSAI2_Config+0xa4>
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d002      	beq.n	8002d72 <RCCEx_PLLSAI2_Config+0x62>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d009      	beq.n	8002d84 <RCCEx_PLLSAI2_Config+0x74>
 8002d70:	e020      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11d      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d82:	e01a      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d94:	e013      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d96:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da2:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db2:	e006      	b.n	8002dc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e004      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e002      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	430b      	orrs	r3, r1
 8002de0:	4939      	ldr	r1, [pc, #228]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d167      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fd ff6e 	bl	8000cd8 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e00:	f7fd ff6a 	bl	8000cd8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
        break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ef      	bne.n	8002e00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d14a      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d111      	bne.n	8002e50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6892      	ldr	r2, [r2, #8]
 8002e3c:	0211      	lsls	r1, r2, #8
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	0912      	lsrs	r2, r2, #4
 8002e44:	0452      	lsls	r2, r2, #17
 8002e46:	430a      	orrs	r2, r1
 8002e48:	491f      	ldr	r1, [pc, #124]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	614b      	str	r3, [r1, #20]
 8002e4e:	e011      	b.n	8002e74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6892      	ldr	r2, [r2, #8]
 8002e60:	0211      	lsls	r1, r2, #8
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6912      	ldr	r2, [r2, #16]
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0652      	lsls	r2, r2, #25
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fd ff2a 	bl	8000cd8 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e88:	f7fd ff26 	bl	8000cd8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e040      	b.n	8002f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fcfe 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb2e 	bl	800356c <UART_SetConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fdda 	bl	8003adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fe61 	bl	8003c20 <UART_CheckIdleState>
 8002f5e:	4603      	mov	r3, r0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b0ba      	sub	sp, #232	; 0xe8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f96:	4013      	ands	r3, r2
 8002f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d115      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 82a6 	beq.w	8003512 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
      }
      return;
 8002fce:	e2a0      	b.n	8003512 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8117 	beq.w	8003208 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fea:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_UART_IRQHandler+0x298>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 810a 	beq.w	8003208 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <HAL_UART_IRQHandler+0xbc>
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d011      	beq.n	8003054 <HAL_UART_IRQHandler+0xec>
 8003030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d011      	beq.n	8003084 <HAL_UART_IRQHandler+0x11c>
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800309c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b6:	f043 0208 	orr.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_UART_IRQHandler+0x18a>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 820c 	beq.w	8003516 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800313e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003142:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003146:	2b00      	cmp	r3, #0
 8003148:	d04f      	beq.n	80031ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fe75 	bl	8003e3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d141      	bne.n	80031e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3308      	adds	r3, #8
 8003164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3308      	adds	r3, #8
 8003186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800318a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800318e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1d9      	bne.n	800315e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d013      	beq.n	80031da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <HAL_UART_IRQHandler+0x29c>)
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fee5 	bl	8000f8e <HAL_DMA_Abort_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d017      	beq.n	80031fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031d4:	4610      	mov	r0, r2
 80031d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	e00f      	b.n	80031fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9b0 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	e00b      	b.n	80031fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9ac 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e8:	e007      	b.n	80031fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9a8 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031f8:	e18d      	b.n	8003516 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fa:	bf00      	nop
    return;
 80031fc:	e18b      	b.n	8003516 <HAL_UART_IRQHandler+0x5ae>
 80031fe:	bf00      	nop
 8003200:	04000120 	.word	0x04000120
 8003204:	08003f01 	.word	0x08003f01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 8146 	bne.w	800349e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 813f 	beq.w	800349e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8138 	beq.w	800349e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2210      	movs	r2, #16
 8003234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	f040 80b4 	bne.w	80033ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003252:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 815f 	beq.w	800351a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003266:	429a      	cmp	r2, r3
 8003268:	f080 8157 	bcs.w	800351a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 8085 	bne.w	8003392 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800329c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1da      	bne.n	8003288 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3308      	adds	r3, #8
 80032f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e1      	bne.n	80032d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3308      	adds	r3, #8
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3308      	adds	r3, #8
 800332e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003332:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003334:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003374:	65bb      	str	r3, [r7, #88]	; 0x58
 8003376:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800337a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e4      	bne.n	8003352 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fdc0 	bl	8000f12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8d4 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ac:	e0b5      	b.n	800351a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a7 	beq.w	800351e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80033d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a2 	beq.w	800351e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033fc:	647b      	str	r3, [r7, #68]	; 0x44
 80033fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e4      	bne.n	80033da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	623b      	str	r3, [r7, #32]
   return(result);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3308      	adds	r3, #8
 8003430:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003434:	633a      	str	r2, [r7, #48]	; 0x30
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800343a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e3      	bne.n	8003410 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	60fb      	str	r3, [r7, #12]
   return(result);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	69b9      	ldr	r1, [r7, #24]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	617b      	str	r3, [r7, #20]
   return(result);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e4      	bne.n	800345a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f85c 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800349c:	e03f      	b.n	800351e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_UART_IRQHandler+0x560>
 80034aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fd5d 	bl	8003f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034c6:	e02d      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
    }
    return;
 80034f0:	e017      	b.n	8003522 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <HAL_UART_IRQHandler+0x5bc>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fd0e 	bl	8003f2c <UART_EndTransmit_IT>
    return;
 8003510:	e008      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003512:	bf00      	nop
 8003514:	e006      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003516:	bf00      	nop
 8003518:	e004      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003522:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003524:	37e8      	adds	r7, #232	; 0xe8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop

0800352c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b08a      	sub	sp, #40	; 0x28
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4313      	orrs	r3, r2
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4ba4      	ldr	r3, [pc, #656]	; (800382c <UART_SetConfig+0x2c0>)
 800359c:	4013      	ands	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a99      	ldr	r2, [pc, #612]	; (8003830 <UART_SetConfig+0x2c4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	4313      	orrs	r3, r2
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a90      	ldr	r2, [pc, #576]	; (8003834 <UART_SetConfig+0x2c8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d126      	bne.n	8003644 <UART_SetConfig+0xd8>
 80035f6:	4b90      	ldr	r3, [pc, #576]	; (8003838 <UART_SetConfig+0x2cc>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d81b      	bhi.n	800363c <UART_SetConfig+0xd0>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0xa0>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362d 	.word	0x0800362d
 8003614:	08003625 	.word	0x08003625
 8003618:	08003635 	.word	0x08003635
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e116      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e112      	b.n	8003852 <UART_SetConfig+0x2e6>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e10e      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e10a      	b.n	8003852 <UART_SetConfig+0x2e6>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e106      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7c      	ldr	r2, [pc, #496]	; (800383c <UART_SetConfig+0x2d0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d138      	bne.n	80036c0 <UART_SetConfig+0x154>
 800364e:	4b7a      	ldr	r3, [pc, #488]	; (8003838 <UART_SetConfig+0x2cc>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d82d      	bhi.n	80036b8 <UART_SetConfig+0x14c>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0xf8>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003699 	.word	0x08003699
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036b9 	.word	0x080036b9
 8003670:	080036b9 	.word	0x080036b9
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036b9 	.word	0x080036b9
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036a1 	.word	0x080036a1
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036b9 	.word	0x080036b9
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036b1 	.word	0x080036b1
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e0d8      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036a0:	2302      	movs	r3, #2
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e0d4      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036a8:	2304      	movs	r3, #4
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e0d0      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036b0:	2308      	movs	r3, #8
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e0cc      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e0c8      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <UART_SetConfig+0x2d4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d125      	bne.n	8003716 <UART_SetConfig+0x1aa>
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <UART_SetConfig+0x2cc>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036d4:	2b30      	cmp	r3, #48	; 0x30
 80036d6:	d016      	beq.n	8003706 <UART_SetConfig+0x19a>
 80036d8:	2b30      	cmp	r3, #48	; 0x30
 80036da:	d818      	bhi.n	800370e <UART_SetConfig+0x1a2>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d00a      	beq.n	80036f6 <UART_SetConfig+0x18a>
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d814      	bhi.n	800370e <UART_SetConfig+0x1a2>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <UART_SetConfig+0x182>
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d008      	beq.n	80036fe <UART_SetConfig+0x192>
 80036ec:	e00f      	b.n	800370e <UART_SetConfig+0x1a2>
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f4:	e0ad      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036f6:	2302      	movs	r3, #2
 80036f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fc:	e0a9      	b.n	8003852 <UART_SetConfig+0x2e6>
 80036fe:	2304      	movs	r3, #4
 8003700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003704:	e0a5      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003706:	2308      	movs	r3, #8
 8003708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370c:	e0a1      	b.n	8003852 <UART_SetConfig+0x2e6>
 800370e:	2310      	movs	r3, #16
 8003710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003714:	e09d      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <UART_SetConfig+0x2d8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d125      	bne.n	800376c <UART_SetConfig+0x200>
 8003720:	4b45      	ldr	r3, [pc, #276]	; (8003838 <UART_SetConfig+0x2cc>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800372a:	2bc0      	cmp	r3, #192	; 0xc0
 800372c:	d016      	beq.n	800375c <UART_SetConfig+0x1f0>
 800372e:	2bc0      	cmp	r3, #192	; 0xc0
 8003730:	d818      	bhi.n	8003764 <UART_SetConfig+0x1f8>
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d00a      	beq.n	800374c <UART_SetConfig+0x1e0>
 8003736:	2b80      	cmp	r3, #128	; 0x80
 8003738:	d814      	bhi.n	8003764 <UART_SetConfig+0x1f8>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <UART_SetConfig+0x1d8>
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d008      	beq.n	8003754 <UART_SetConfig+0x1e8>
 8003742:	e00f      	b.n	8003764 <UART_SetConfig+0x1f8>
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e082      	b.n	8003852 <UART_SetConfig+0x2e6>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e07e      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e07a      	b.n	8003852 <UART_SetConfig+0x2e6>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e076      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e072      	b.n	8003852 <UART_SetConfig+0x2e6>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a35      	ldr	r2, [pc, #212]	; (8003848 <UART_SetConfig+0x2dc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d12a      	bne.n	80037cc <UART_SetConfig+0x260>
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <UART_SetConfig+0x2cc>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003784:	d01a      	beq.n	80037bc <UART_SetConfig+0x250>
 8003786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800378a:	d81b      	bhi.n	80037c4 <UART_SetConfig+0x258>
 800378c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003790:	d00c      	beq.n	80037ac <UART_SetConfig+0x240>
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	d815      	bhi.n	80037c4 <UART_SetConfig+0x258>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <UART_SetConfig+0x238>
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	d008      	beq.n	80037b4 <UART_SetConfig+0x248>
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x258>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e052      	b.n	8003852 <UART_SetConfig+0x2e6>
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e04e      	b.n	8003852 <UART_SetConfig+0x2e6>
 80037b4:	2304      	movs	r3, #4
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e04a      	b.n	8003852 <UART_SetConfig+0x2e6>
 80037bc:	2308      	movs	r3, #8
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e046      	b.n	8003852 <UART_SetConfig+0x2e6>
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e042      	b.n	8003852 <UART_SetConfig+0x2e6>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a17      	ldr	r2, [pc, #92]	; (8003830 <UART_SetConfig+0x2c4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d13a      	bne.n	800384c <UART_SetConfig+0x2e0>
 80037d6:	4b18      	ldr	r3, [pc, #96]	; (8003838 <UART_SetConfig+0x2cc>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e4:	d01a      	beq.n	800381c <UART_SetConfig+0x2b0>
 80037e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ea:	d81b      	bhi.n	8003824 <UART_SetConfig+0x2b8>
 80037ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f0:	d00c      	beq.n	800380c <UART_SetConfig+0x2a0>
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f6:	d815      	bhi.n	8003824 <UART_SetConfig+0x2b8>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <UART_SetConfig+0x298>
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d008      	beq.n	8003814 <UART_SetConfig+0x2a8>
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x2b8>
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e022      	b.n	8003852 <UART_SetConfig+0x2e6>
 800380c:	2302      	movs	r3, #2
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e01e      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003814:	2304      	movs	r3, #4
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e01a      	b.n	8003852 <UART_SetConfig+0x2e6>
 800381c:	2308      	movs	r3, #8
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e016      	b.n	8003852 <UART_SetConfig+0x2e6>
 8003824:	2310      	movs	r3, #16
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e012      	b.n	8003852 <UART_SetConfig+0x2e6>
 800382c:	efff69f3 	.word	0xefff69f3
 8003830:	40008000 	.word	0x40008000
 8003834:	40013800 	.word	0x40013800
 8003838:	40021000 	.word	0x40021000
 800383c:	40004400 	.word	0x40004400
 8003840:	40004800 	.word	0x40004800
 8003844:	40004c00 	.word	0x40004c00
 8003848:	40005000 	.word	0x40005000
 800384c:	2310      	movs	r3, #16
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a9f      	ldr	r2, [pc, #636]	; (8003ad4 <UART_SetConfig+0x568>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d17a      	bne.n	8003952 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800385c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003860:	2b08      	cmp	r3, #8
 8003862:	d824      	bhi.n	80038ae <UART_SetConfig+0x342>
 8003864:	a201      	add	r2, pc, #4	; (adr r2, 800386c <UART_SetConfig+0x300>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	08003891 	.word	0x08003891
 8003870:	080038af 	.word	0x080038af
 8003874:	08003899 	.word	0x08003899
 8003878:	080038af 	.word	0x080038af
 800387c:	0800389f 	.word	0x0800389f
 8003880:	080038af 	.word	0x080038af
 8003884:	080038af 	.word	0x080038af
 8003888:	080038af 	.word	0x080038af
 800388c:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7fe fdd4 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003894:	61f8      	str	r0, [r7, #28]
        break;
 8003896:	e010      	b.n	80038ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b8f      	ldr	r3, [pc, #572]	; (8003ad8 <UART_SetConfig+0x56c>)
 800389a:	61fb      	str	r3, [r7, #28]
        break;
 800389c:	e00d      	b.n	80038ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7fe fd35 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80038a2:	61f8      	str	r0, [r7, #28]
        break;
 80038a4:	e009      	b.n	80038ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	61fb      	str	r3, [r7, #28]
        break;
 80038ac:	e005      	b.n	80038ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80fb 	beq.w	8003ab8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d305      	bcc.n	80038de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d903      	bls.n	80038e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e4:	e0e8      	b.n	8003ab8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2200      	movs	r2, #0
 80038ea:	461c      	mov	r4, r3
 80038ec:	4615      	mov	r5, r2
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	022b      	lsls	r3, r5, #8
 80038f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038fc:	0222      	lsls	r2, r4, #8
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6849      	ldr	r1, [r1, #4]
 8003902:	0849      	lsrs	r1, r1, #1
 8003904:	2000      	movs	r0, #0
 8003906:	4688      	mov	r8, r1
 8003908:	4681      	mov	r9, r0
 800390a:	eb12 0a08 	adds.w	sl, r2, r8
 800390e:	eb43 0b09 	adc.w	fp, r3, r9
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003920:	4650      	mov	r0, sl
 8003922:	4659      	mov	r1, fp
 8003924:	f7fc fcac 	bl	8000280 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003936:	d308      	bcc.n	800394a <UART_SetConfig+0x3de>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393e:	d204      	bcs.n	800394a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	e0b6      	b.n	8003ab8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003950:	e0b2      	b.n	8003ab8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395a:	d15e      	bne.n	8003a1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800395c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003960:	2b08      	cmp	r3, #8
 8003962:	d828      	bhi.n	80039b6 <UART_SetConfig+0x44a>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0x400>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	08003991 	.word	0x08003991
 8003970:	08003999 	.word	0x08003999
 8003974:	080039a1 	.word	0x080039a1
 8003978:	080039b7 	.word	0x080039b7
 800397c:	080039a7 	.word	0x080039a7
 8003980:	080039b7 	.word	0x080039b7
 8003984:	080039b7 	.word	0x080039b7
 8003988:	080039b7 	.word	0x080039b7
 800398c:	080039af 	.word	0x080039af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7fe fd54 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003994:	61f8      	str	r0, [r7, #28]
        break;
 8003996:	e014      	b.n	80039c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003998:	f7fe fd66 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 800399c:	61f8      	str	r0, [r7, #28]
        break;
 800399e:	e010      	b.n	80039c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a0:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <UART_SetConfig+0x56c>)
 80039a2:	61fb      	str	r3, [r7, #28]
        break;
 80039a4:	e00d      	b.n	80039c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a6:	f7fe fcb1 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80039aa:	61f8      	str	r0, [r7, #28]
        break;
 80039ac:	e009      	b.n	80039c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	61fb      	str	r3, [r7, #28]
        break;
 80039b4:	e005      	b.n	80039c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d077      	beq.n	8003ab8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005a      	lsls	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d916      	bls.n	8003a12 <UART_SetConfig+0x4a6>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ea:	d212      	bcs.n	8003a12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f023 030f 	bic.w	r3, r3, #15
 80039f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	8afa      	ldrh	r2, [r7, #22]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	e052      	b.n	8003ab8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a18:	e04e      	b.n	8003ab8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d827      	bhi.n	8003a72 <UART_SetConfig+0x506>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <UART_SetConfig+0x4bc>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a55 	.word	0x08003a55
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a73 	.word	0x08003a73
 8003a38:	08003a63 	.word	0x08003a63
 8003a3c:	08003a73 	.word	0x08003a73
 8003a40:	08003a73 	.word	0x08003a73
 8003a44:	08003a73 	.word	0x08003a73
 8003a48:	08003a6b 	.word	0x08003a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fe fcf6 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e014      	b.n	8003a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7fe fd08 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003a58:	61f8      	str	r0, [r7, #28]
        break;
 8003a5a:	e010      	b.n	8003a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <UART_SetConfig+0x56c>)
 8003a5e:	61fb      	str	r3, [r7, #28]
        break;
 8003a60:	e00d      	b.n	8003a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a62:	f7fe fc53 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8003a66:	61f8      	str	r0, [r7, #28]
        break;
 8003a68:	e009      	b.n	8003a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6e:	61fb      	str	r3, [r7, #28]
        break;
 8003a70:	e005      	b.n	8003a7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	085a      	lsrs	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b0f      	cmp	r3, #15
 8003a9c:	d909      	bls.n	8003ab2 <UART_SetConfig+0x546>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d205      	bcs.n	8003ab2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	e002      	b.n	8003ab8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40008000 	.word	0x40008000
 8003ad8:	00f42400 	.word	0x00f42400

08003adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bda:	d10a      	bne.n	8003bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c30:	f7fd f852 	bl	8000cd8 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d10e      	bne.n	8003c62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f82d 	bl	8003cb2 <UART_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e023      	b.n	8003caa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d10e      	bne.n	8003c8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f817 	bl	8003cb2 <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e00d      	b.n	8003caa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b09c      	sub	sp, #112	; 0x70
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc2:	e0a5      	b.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cca:	f000 80a1 	beq.w	8003e10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fd f803 	bl	8000cd8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d13e      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e6      	bne.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e067      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d04f      	beq.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d147      	bne.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
 8003daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e6      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	613b      	str	r3, [r7, #16]
   return(result);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ddc:	623a      	str	r2, [r7, #32]
 8003dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69f9      	ldr	r1, [r7, #28]
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e010      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	f43f af4a 	beq.w	8003cc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3770      	adds	r7, #112	; 0x70
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b095      	sub	sp, #84	; 0x54
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e60:	643b      	str	r3, [r7, #64]	; 0x40
 8003e62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e6      	bne.n	8003e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d118      	bne.n	8003ee2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f023 0310 	bic.w	r3, r3, #16
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6979      	ldr	r1, [r7, #20]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	613b      	str	r3, [r7, #16]
   return(result);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ef4:	bf00      	nop
 8003ef6:	3754      	adds	r7, #84	; 0x54
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fb0e 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6979      	ldr	r1, [r7, #20]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fada 	bl	800352c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f78:	bf00      	nop
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <__errno>:
 8003f94:	4b01      	ldr	r3, [pc, #4]	; (8003f9c <__errno+0x8>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000040 	.word	0x20000040

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4d0d      	ldr	r5, [pc, #52]	; (8003fd8 <__libc_init_array+0x38>)
 8003fa4:	4c0d      	ldr	r4, [pc, #52]	; (8003fdc <__libc_init_array+0x3c>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	2600      	movs	r6, #0
 8003fac:	42a6      	cmp	r6, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	4d0b      	ldr	r5, [pc, #44]	; (8003fe0 <__libc_init_array+0x40>)
 8003fb2:	4c0c      	ldr	r4, [pc, #48]	; (8003fe4 <__libc_init_array+0x44>)
 8003fb4:	f001 fac6 	bl	8005544 <_init>
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc8:	4798      	blx	r3
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd2:	4798      	blx	r3
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	08005694 	.word	0x08005694
 8003fdc:	08005694 	.word	0x08005694
 8003fe0:	08005694 	.word	0x08005694
 8003fe4:	08005698 	.word	0x08005698

08003fe8 <memset>:
 8003fe8:	4402      	add	r2, r0
 8003fea:	4603      	mov	r3, r0
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d100      	bne.n	8003ff2 <memset+0xa>
 8003ff0:	4770      	bx	lr
 8003ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff6:	e7f9      	b.n	8003fec <memset+0x4>

08003ff8 <iprintf>:
 8003ff8:	b40f      	push	{r0, r1, r2, r3}
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <iprintf+0x2c>)
 8003ffc:	b513      	push	{r0, r1, r4, lr}
 8003ffe:	681c      	ldr	r4, [r3, #0]
 8004000:	b124      	cbz	r4, 800400c <iprintf+0x14>
 8004002:	69a3      	ldr	r3, [r4, #24]
 8004004:	b913      	cbnz	r3, 800400c <iprintf+0x14>
 8004006:	4620      	mov	r0, r4
 8004008:	f000 fa5e 	bl	80044c8 <__sinit>
 800400c:	ab05      	add	r3, sp, #20
 800400e:	9a04      	ldr	r2, [sp, #16]
 8004010:	68a1      	ldr	r1, [r4, #8]
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	4620      	mov	r0, r4
 8004016:	f000 fc67 	bl	80048e8 <_vfiprintf_r>
 800401a:	b002      	add	sp, #8
 800401c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004020:	b004      	add	sp, #16
 8004022:	4770      	bx	lr
 8004024:	20000040 	.word	0x20000040

08004028 <_puts_r>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	460e      	mov	r6, r1
 800402c:	4605      	mov	r5, r0
 800402e:	b118      	cbz	r0, 8004038 <_puts_r+0x10>
 8004030:	6983      	ldr	r3, [r0, #24]
 8004032:	b90b      	cbnz	r3, 8004038 <_puts_r+0x10>
 8004034:	f000 fa48 	bl	80044c8 <__sinit>
 8004038:	69ab      	ldr	r3, [r5, #24]
 800403a:	68ac      	ldr	r4, [r5, #8]
 800403c:	b913      	cbnz	r3, 8004044 <_puts_r+0x1c>
 800403e:	4628      	mov	r0, r5
 8004040:	f000 fa42 	bl	80044c8 <__sinit>
 8004044:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <_puts_r+0xd0>)
 8004046:	429c      	cmp	r4, r3
 8004048:	d120      	bne.n	800408c <_puts_r+0x64>
 800404a:	686c      	ldr	r4, [r5, #4]
 800404c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800404e:	07db      	lsls	r3, r3, #31
 8004050:	d405      	bmi.n	800405e <_puts_r+0x36>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	0598      	lsls	r0, r3, #22
 8004056:	d402      	bmi.n	800405e <_puts_r+0x36>
 8004058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405a:	f000 fad3 	bl	8004604 <__retarget_lock_acquire_recursive>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	0719      	lsls	r1, r3, #28
 8004062:	d51d      	bpl.n	80040a0 <_puts_r+0x78>
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	b1db      	cbz	r3, 80040a0 <_puts_r+0x78>
 8004068:	3e01      	subs	r6, #1
 800406a:	68a3      	ldr	r3, [r4, #8]
 800406c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004070:	3b01      	subs	r3, #1
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	bb39      	cbnz	r1, 80040c6 <_puts_r+0x9e>
 8004076:	2b00      	cmp	r3, #0
 8004078:	da38      	bge.n	80040ec <_puts_r+0xc4>
 800407a:	4622      	mov	r2, r4
 800407c:	210a      	movs	r1, #10
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f848 	bl	8004114 <__swbuf_r>
 8004084:	3001      	adds	r0, #1
 8004086:	d011      	beq.n	80040ac <_puts_r+0x84>
 8004088:	250a      	movs	r5, #10
 800408a:	e011      	b.n	80040b0 <_puts_r+0x88>
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <_puts_r+0xd4>)
 800408e:	429c      	cmp	r4, r3
 8004090:	d101      	bne.n	8004096 <_puts_r+0x6e>
 8004092:	68ac      	ldr	r4, [r5, #8]
 8004094:	e7da      	b.n	800404c <_puts_r+0x24>
 8004096:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <_puts_r+0xd8>)
 8004098:	429c      	cmp	r4, r3
 800409a:	bf08      	it	eq
 800409c:	68ec      	ldreq	r4, [r5, #12]
 800409e:	e7d5      	b.n	800404c <_puts_r+0x24>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f888 	bl	80041b8 <__swsetup_r>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d0dd      	beq.n	8004068 <_puts_r+0x40>
 80040ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80040b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040b2:	07da      	lsls	r2, r3, #31
 80040b4:	d405      	bmi.n	80040c2 <_puts_r+0x9a>
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	059b      	lsls	r3, r3, #22
 80040ba:	d402      	bmi.n	80040c2 <_puts_r+0x9a>
 80040bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040be:	f000 faa2 	bl	8004606 <__retarget_lock_release_recursive>
 80040c2:	4628      	mov	r0, r5
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da04      	bge.n	80040d4 <_puts_r+0xac>
 80040ca:	69a2      	ldr	r2, [r4, #24]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	dc06      	bgt.n	80040de <_puts_r+0xb6>
 80040d0:	290a      	cmp	r1, #10
 80040d2:	d004      	beq.n	80040de <_puts_r+0xb6>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	6022      	str	r2, [r4, #0]
 80040da:	7019      	strb	r1, [r3, #0]
 80040dc:	e7c5      	b.n	800406a <_puts_r+0x42>
 80040de:	4622      	mov	r2, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f817 	bl	8004114 <__swbuf_r>
 80040e6:	3001      	adds	r0, #1
 80040e8:	d1bf      	bne.n	800406a <_puts_r+0x42>
 80040ea:	e7df      	b.n	80040ac <_puts_r+0x84>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	250a      	movs	r5, #10
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	6022      	str	r2, [r4, #0]
 80040f4:	701d      	strb	r5, [r3, #0]
 80040f6:	e7db      	b.n	80040b0 <_puts_r+0x88>
 80040f8:	080055fc 	.word	0x080055fc
 80040fc:	0800561c 	.word	0x0800561c
 8004100:	080055dc 	.word	0x080055dc

08004104 <puts>:
 8004104:	4b02      	ldr	r3, [pc, #8]	; (8004110 <puts+0xc>)
 8004106:	4601      	mov	r1, r0
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	f7ff bf8d 	b.w	8004028 <_puts_r>
 800410e:	bf00      	nop
 8004110:	20000040 	.word	0x20000040

08004114 <__swbuf_r>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	460e      	mov	r6, r1
 8004118:	4614      	mov	r4, r2
 800411a:	4605      	mov	r5, r0
 800411c:	b118      	cbz	r0, 8004126 <__swbuf_r+0x12>
 800411e:	6983      	ldr	r3, [r0, #24]
 8004120:	b90b      	cbnz	r3, 8004126 <__swbuf_r+0x12>
 8004122:	f000 f9d1 	bl	80044c8 <__sinit>
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <__swbuf_r+0x98>)
 8004128:	429c      	cmp	r4, r3
 800412a:	d12b      	bne.n	8004184 <__swbuf_r+0x70>
 800412c:	686c      	ldr	r4, [r5, #4]
 800412e:	69a3      	ldr	r3, [r4, #24]
 8004130:	60a3      	str	r3, [r4, #8]
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	071a      	lsls	r2, r3, #28
 8004136:	d52f      	bpl.n	8004198 <__swbuf_r+0x84>
 8004138:	6923      	ldr	r3, [r4, #16]
 800413a:	b36b      	cbz	r3, 8004198 <__swbuf_r+0x84>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	1ac0      	subs	r0, r0, r3
 8004142:	6963      	ldr	r3, [r4, #20]
 8004144:	b2f6      	uxtb	r6, r6
 8004146:	4283      	cmp	r3, r0
 8004148:	4637      	mov	r7, r6
 800414a:	dc04      	bgt.n	8004156 <__swbuf_r+0x42>
 800414c:	4621      	mov	r1, r4
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f926 	bl	80043a0 <_fflush_r>
 8004154:	bb30      	cbnz	r0, 80041a4 <__swbuf_r+0x90>
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	3b01      	subs	r3, #1
 800415a:	60a3      	str	r3, [r4, #8]
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	701e      	strb	r6, [r3, #0]
 8004164:	6963      	ldr	r3, [r4, #20]
 8004166:	3001      	adds	r0, #1
 8004168:	4283      	cmp	r3, r0
 800416a:	d004      	beq.n	8004176 <__swbuf_r+0x62>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	07db      	lsls	r3, r3, #31
 8004170:	d506      	bpl.n	8004180 <__swbuf_r+0x6c>
 8004172:	2e0a      	cmp	r6, #10
 8004174:	d104      	bne.n	8004180 <__swbuf_r+0x6c>
 8004176:	4621      	mov	r1, r4
 8004178:	4628      	mov	r0, r5
 800417a:	f000 f911 	bl	80043a0 <_fflush_r>
 800417e:	b988      	cbnz	r0, 80041a4 <__swbuf_r+0x90>
 8004180:	4638      	mov	r0, r7
 8004182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <__swbuf_r+0x9c>)
 8004186:	429c      	cmp	r4, r3
 8004188:	d101      	bne.n	800418e <__swbuf_r+0x7a>
 800418a:	68ac      	ldr	r4, [r5, #8]
 800418c:	e7cf      	b.n	800412e <__swbuf_r+0x1a>
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <__swbuf_r+0xa0>)
 8004190:	429c      	cmp	r4, r3
 8004192:	bf08      	it	eq
 8004194:	68ec      	ldreq	r4, [r5, #12]
 8004196:	e7ca      	b.n	800412e <__swbuf_r+0x1a>
 8004198:	4621      	mov	r1, r4
 800419a:	4628      	mov	r0, r5
 800419c:	f000 f80c 	bl	80041b8 <__swsetup_r>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d0cb      	beq.n	800413c <__swbuf_r+0x28>
 80041a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041a8:	e7ea      	b.n	8004180 <__swbuf_r+0x6c>
 80041aa:	bf00      	nop
 80041ac:	080055fc 	.word	0x080055fc
 80041b0:	0800561c 	.word	0x0800561c
 80041b4:	080055dc 	.word	0x080055dc

080041b8 <__swsetup_r>:
 80041b8:	4b32      	ldr	r3, [pc, #200]	; (8004284 <__swsetup_r+0xcc>)
 80041ba:	b570      	push	{r4, r5, r6, lr}
 80041bc:	681d      	ldr	r5, [r3, #0]
 80041be:	4606      	mov	r6, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	b125      	cbz	r5, 80041ce <__swsetup_r+0x16>
 80041c4:	69ab      	ldr	r3, [r5, #24]
 80041c6:	b913      	cbnz	r3, 80041ce <__swsetup_r+0x16>
 80041c8:	4628      	mov	r0, r5
 80041ca:	f000 f97d 	bl	80044c8 <__sinit>
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <__swsetup_r+0xd0>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d10f      	bne.n	80041f4 <__swsetup_r+0x3c>
 80041d4:	686c      	ldr	r4, [r5, #4]
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041dc:	0719      	lsls	r1, r3, #28
 80041de:	d42c      	bmi.n	800423a <__swsetup_r+0x82>
 80041e0:	06dd      	lsls	r5, r3, #27
 80041e2:	d411      	bmi.n	8004208 <__swsetup_r+0x50>
 80041e4:	2309      	movs	r3, #9
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f2:	e03e      	b.n	8004272 <__swsetup_r+0xba>
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <__swsetup_r+0xd4>)
 80041f6:	429c      	cmp	r4, r3
 80041f8:	d101      	bne.n	80041fe <__swsetup_r+0x46>
 80041fa:	68ac      	ldr	r4, [r5, #8]
 80041fc:	e7eb      	b.n	80041d6 <__swsetup_r+0x1e>
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <__swsetup_r+0xd8>)
 8004200:	429c      	cmp	r4, r3
 8004202:	bf08      	it	eq
 8004204:	68ec      	ldreq	r4, [r5, #12]
 8004206:	e7e6      	b.n	80041d6 <__swsetup_r+0x1e>
 8004208:	0758      	lsls	r0, r3, #29
 800420a:	d512      	bpl.n	8004232 <__swsetup_r+0x7a>
 800420c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420e:	b141      	cbz	r1, 8004222 <__swsetup_r+0x6a>
 8004210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004214:	4299      	cmp	r1, r3
 8004216:	d002      	beq.n	800421e <__swsetup_r+0x66>
 8004218:	4630      	mov	r0, r6
 800421a:	f000 fa5b 	bl	80046d4 <_free_r>
 800421e:	2300      	movs	r3, #0
 8004220:	6363      	str	r3, [r4, #52]	; 0x34
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	2300      	movs	r3, #0
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	81a3      	strh	r3, [r4, #12]
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	b94b      	cbnz	r3, 8004252 <__swsetup_r+0x9a>
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004248:	d003      	beq.n	8004252 <__swsetup_r+0x9a>
 800424a:	4621      	mov	r1, r4
 800424c:	4630      	mov	r0, r6
 800424e:	f000 fa01 	bl	8004654 <__smakebuf_r>
 8004252:	89a0      	ldrh	r0, [r4, #12]
 8004254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004258:	f010 0301 	ands.w	r3, r0, #1
 800425c:	d00a      	beq.n	8004274 <__swsetup_r+0xbc>
 800425e:	2300      	movs	r3, #0
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	6963      	ldr	r3, [r4, #20]
 8004264:	425b      	negs	r3, r3
 8004266:	61a3      	str	r3, [r4, #24]
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	b943      	cbnz	r3, 800427e <__swsetup_r+0xc6>
 800426c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004270:	d1ba      	bne.n	80041e8 <__swsetup_r+0x30>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	0781      	lsls	r1, r0, #30
 8004276:	bf58      	it	pl
 8004278:	6963      	ldrpl	r3, [r4, #20]
 800427a:	60a3      	str	r3, [r4, #8]
 800427c:	e7f4      	b.n	8004268 <__swsetup_r+0xb0>
 800427e:	2000      	movs	r0, #0
 8004280:	e7f7      	b.n	8004272 <__swsetup_r+0xba>
 8004282:	bf00      	nop
 8004284:	20000040 	.word	0x20000040
 8004288:	080055fc 	.word	0x080055fc
 800428c:	0800561c 	.word	0x0800561c
 8004290:	080055dc 	.word	0x080055dc

08004294 <__sflush_r>:
 8004294:	898a      	ldrh	r2, [r1, #12]
 8004296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429a:	4605      	mov	r5, r0
 800429c:	0710      	lsls	r0, r2, #28
 800429e:	460c      	mov	r4, r1
 80042a0:	d458      	bmi.n	8004354 <__sflush_r+0xc0>
 80042a2:	684b      	ldr	r3, [r1, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	dc05      	bgt.n	80042b4 <__sflush_r+0x20>
 80042a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dc02      	bgt.n	80042b4 <__sflush_r+0x20>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d0f9      	beq.n	80042ae <__sflush_r+0x1a>
 80042ba:	2300      	movs	r3, #0
 80042bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042c0:	682f      	ldr	r7, [r5, #0]
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	d032      	beq.n	800432c <__sflush_r+0x98>
 80042c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	075a      	lsls	r2, r3, #29
 80042cc:	d505      	bpl.n	80042da <__sflush_r+0x46>
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	1ac0      	subs	r0, r0, r3
 80042d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042d4:	b10b      	cbz	r3, 80042da <__sflush_r+0x46>
 80042d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d8:	1ac0      	subs	r0, r0, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	4602      	mov	r2, r0
 80042de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042e0:	6a21      	ldr	r1, [r4, #32]
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b0      	blx	r6
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	d106      	bne.n	80042fa <__sflush_r+0x66>
 80042ec:	6829      	ldr	r1, [r5, #0]
 80042ee:	291d      	cmp	r1, #29
 80042f0:	d82c      	bhi.n	800434c <__sflush_r+0xb8>
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <__sflush_r+0x108>)
 80042f4:	40ca      	lsrs	r2, r1
 80042f6:	07d6      	lsls	r6, r2, #31
 80042f8:	d528      	bpl.n	800434c <__sflush_r+0xb8>
 80042fa:	2200      	movs	r2, #0
 80042fc:	6062      	str	r2, [r4, #4]
 80042fe:	04d9      	lsls	r1, r3, #19
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	6022      	str	r2, [r4, #0]
 8004304:	d504      	bpl.n	8004310 <__sflush_r+0x7c>
 8004306:	1c42      	adds	r2, r0, #1
 8004308:	d101      	bne.n	800430e <__sflush_r+0x7a>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	b903      	cbnz	r3, 8004310 <__sflush_r+0x7c>
 800430e:	6560      	str	r0, [r4, #84]	; 0x54
 8004310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	2900      	cmp	r1, #0
 8004316:	d0ca      	beq.n	80042ae <__sflush_r+0x1a>
 8004318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800431c:	4299      	cmp	r1, r3
 800431e:	d002      	beq.n	8004326 <__sflush_r+0x92>
 8004320:	4628      	mov	r0, r5
 8004322:	f000 f9d7 	bl	80046d4 <_free_r>
 8004326:	2000      	movs	r0, #0
 8004328:	6360      	str	r0, [r4, #52]	; 0x34
 800432a:	e7c1      	b.n	80042b0 <__sflush_r+0x1c>
 800432c:	6a21      	ldr	r1, [r4, #32]
 800432e:	2301      	movs	r3, #1
 8004330:	4628      	mov	r0, r5
 8004332:	47b0      	blx	r6
 8004334:	1c41      	adds	r1, r0, #1
 8004336:	d1c7      	bne.n	80042c8 <__sflush_r+0x34>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0c4      	beq.n	80042c8 <__sflush_r+0x34>
 800433e:	2b1d      	cmp	r3, #29
 8004340:	d001      	beq.n	8004346 <__sflush_r+0xb2>
 8004342:	2b16      	cmp	r3, #22
 8004344:	d101      	bne.n	800434a <__sflush_r+0xb6>
 8004346:	602f      	str	r7, [r5, #0]
 8004348:	e7b1      	b.n	80042ae <__sflush_r+0x1a>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	e7ad      	b.n	80042b0 <__sflush_r+0x1c>
 8004354:	690f      	ldr	r7, [r1, #16]
 8004356:	2f00      	cmp	r7, #0
 8004358:	d0a9      	beq.n	80042ae <__sflush_r+0x1a>
 800435a:	0793      	lsls	r3, r2, #30
 800435c:	680e      	ldr	r6, [r1, #0]
 800435e:	bf08      	it	eq
 8004360:	694b      	ldreq	r3, [r1, #20]
 8004362:	600f      	str	r7, [r1, #0]
 8004364:	bf18      	it	ne
 8004366:	2300      	movne	r3, #0
 8004368:	eba6 0807 	sub.w	r8, r6, r7
 800436c:	608b      	str	r3, [r1, #8]
 800436e:	f1b8 0f00 	cmp.w	r8, #0
 8004372:	dd9c      	ble.n	80042ae <__sflush_r+0x1a>
 8004374:	6a21      	ldr	r1, [r4, #32]
 8004376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004378:	4643      	mov	r3, r8
 800437a:	463a      	mov	r2, r7
 800437c:	4628      	mov	r0, r5
 800437e:	47b0      	blx	r6
 8004380:	2800      	cmp	r0, #0
 8004382:	dc06      	bgt.n	8004392 <__sflush_r+0xfe>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004390:	e78e      	b.n	80042b0 <__sflush_r+0x1c>
 8004392:	4407      	add	r7, r0
 8004394:	eba8 0800 	sub.w	r8, r8, r0
 8004398:	e7e9      	b.n	800436e <__sflush_r+0xda>
 800439a:	bf00      	nop
 800439c:	20400001 	.word	0x20400001

080043a0 <_fflush_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	4605      	mov	r5, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b913      	cbnz	r3, 80043b0 <_fflush_r+0x10>
 80043aa:	2500      	movs	r5, #0
 80043ac:	4628      	mov	r0, r5
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	b118      	cbz	r0, 80043ba <_fflush_r+0x1a>
 80043b2:	6983      	ldr	r3, [r0, #24]
 80043b4:	b90b      	cbnz	r3, 80043ba <_fflush_r+0x1a>
 80043b6:	f000 f887 	bl	80044c8 <__sinit>
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <_fflush_r+0x6c>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	d11b      	bne.n	80043f8 <_fflush_r+0x58>
 80043c0:	686c      	ldr	r4, [r5, #4]
 80043c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ef      	beq.n	80043aa <_fflush_r+0xa>
 80043ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043cc:	07d0      	lsls	r0, r2, #31
 80043ce:	d404      	bmi.n	80043da <_fflush_r+0x3a>
 80043d0:	0599      	lsls	r1, r3, #22
 80043d2:	d402      	bmi.n	80043da <_fflush_r+0x3a>
 80043d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043d6:	f000 f915 	bl	8004604 <__retarget_lock_acquire_recursive>
 80043da:	4628      	mov	r0, r5
 80043dc:	4621      	mov	r1, r4
 80043de:	f7ff ff59 	bl	8004294 <__sflush_r>
 80043e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e4:	07da      	lsls	r2, r3, #31
 80043e6:	4605      	mov	r5, r0
 80043e8:	d4e0      	bmi.n	80043ac <_fflush_r+0xc>
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	059b      	lsls	r3, r3, #22
 80043ee:	d4dd      	bmi.n	80043ac <_fflush_r+0xc>
 80043f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f2:	f000 f908 	bl	8004606 <__retarget_lock_release_recursive>
 80043f6:	e7d9      	b.n	80043ac <_fflush_r+0xc>
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <_fflush_r+0x70>)
 80043fa:	429c      	cmp	r4, r3
 80043fc:	d101      	bne.n	8004402 <_fflush_r+0x62>
 80043fe:	68ac      	ldr	r4, [r5, #8]
 8004400:	e7df      	b.n	80043c2 <_fflush_r+0x22>
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <_fflush_r+0x74>)
 8004404:	429c      	cmp	r4, r3
 8004406:	bf08      	it	eq
 8004408:	68ec      	ldreq	r4, [r5, #12]
 800440a:	e7da      	b.n	80043c2 <_fflush_r+0x22>
 800440c:	080055fc 	.word	0x080055fc
 8004410:	0800561c 	.word	0x0800561c
 8004414:	080055dc 	.word	0x080055dc

08004418 <std>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	e9c0 3300 	strd	r3, r3, [r0]
 8004422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004426:	6083      	str	r3, [r0, #8]
 8004428:	8181      	strh	r1, [r0, #12]
 800442a:	6643      	str	r3, [r0, #100]	; 0x64
 800442c:	81c2      	strh	r2, [r0, #14]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	; 0x5c
 8004436:	f7ff fdd7 	bl	8003fe8 <memset>
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <std+0x38>)
 800443c:	6263      	str	r3, [r4, #36]	; 0x24
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <std+0x3c>)
 8004440:	62a3      	str	r3, [r4, #40]	; 0x28
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <std+0x40>)
 8004444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <std+0x44>)
 8004448:	6224      	str	r4, [r4, #32]
 800444a:	6323      	str	r3, [r4, #48]	; 0x30
 800444c:	bd10      	pop	{r4, pc}
 800444e:	bf00      	nop
 8004450:	08004e91 	.word	0x08004e91
 8004454:	08004eb3 	.word	0x08004eb3
 8004458:	08004eeb 	.word	0x08004eeb
 800445c:	08004f0f 	.word	0x08004f0f

08004460 <_cleanup_r>:
 8004460:	4901      	ldr	r1, [pc, #4]	; (8004468 <_cleanup_r+0x8>)
 8004462:	f000 b8af 	b.w	80045c4 <_fwalk_reent>
 8004466:	bf00      	nop
 8004468:	080043a1 	.word	0x080043a1

0800446c <__sfmoreglue>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	2268      	movs	r2, #104	; 0x68
 8004470:	1e4d      	subs	r5, r1, #1
 8004472:	4355      	muls	r5, r2
 8004474:	460e      	mov	r6, r1
 8004476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800447a:	f000 f997 	bl	80047ac <_malloc_r>
 800447e:	4604      	mov	r4, r0
 8004480:	b140      	cbz	r0, 8004494 <__sfmoreglue+0x28>
 8004482:	2100      	movs	r1, #0
 8004484:	e9c0 1600 	strd	r1, r6, [r0]
 8004488:	300c      	adds	r0, #12
 800448a:	60a0      	str	r0, [r4, #8]
 800448c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004490:	f7ff fdaa 	bl	8003fe8 <memset>
 8004494:	4620      	mov	r0, r4
 8004496:	bd70      	pop	{r4, r5, r6, pc}

08004498 <__sfp_lock_acquire>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__sfp_lock_acquire+0x8>)
 800449a:	f000 b8b3 	b.w	8004604 <__retarget_lock_acquire_recursive>
 800449e:	bf00      	nop
 80044a0:	2000015d 	.word	0x2000015d

080044a4 <__sfp_lock_release>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__sfp_lock_release+0x8>)
 80044a6:	f000 b8ae 	b.w	8004606 <__retarget_lock_release_recursive>
 80044aa:	bf00      	nop
 80044ac:	2000015d 	.word	0x2000015d

080044b0 <__sinit_lock_acquire>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__sinit_lock_acquire+0x8>)
 80044b2:	f000 b8a7 	b.w	8004604 <__retarget_lock_acquire_recursive>
 80044b6:	bf00      	nop
 80044b8:	2000015e 	.word	0x2000015e

080044bc <__sinit_lock_release>:
 80044bc:	4801      	ldr	r0, [pc, #4]	; (80044c4 <__sinit_lock_release+0x8>)
 80044be:	f000 b8a2 	b.w	8004606 <__retarget_lock_release_recursive>
 80044c2:	bf00      	nop
 80044c4:	2000015e 	.word	0x2000015e

080044c8 <__sinit>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	4604      	mov	r4, r0
 80044cc:	f7ff fff0 	bl	80044b0 <__sinit_lock_acquire>
 80044d0:	69a3      	ldr	r3, [r4, #24]
 80044d2:	b11b      	cbz	r3, 80044dc <__sinit+0x14>
 80044d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d8:	f7ff bff0 	b.w	80044bc <__sinit_lock_release>
 80044dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044e0:	6523      	str	r3, [r4, #80]	; 0x50
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <__sinit+0x68>)
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <__sinit+0x6c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044ea:	42a3      	cmp	r3, r4
 80044ec:	bf04      	itt	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	61a3      	streq	r3, [r4, #24]
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f820 	bl	8004538 <__sfp>
 80044f8:	6060      	str	r0, [r4, #4]
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 f81c 	bl	8004538 <__sfp>
 8004500:	60a0      	str	r0, [r4, #8]
 8004502:	4620      	mov	r0, r4
 8004504:	f000 f818 	bl	8004538 <__sfp>
 8004508:	2200      	movs	r2, #0
 800450a:	60e0      	str	r0, [r4, #12]
 800450c:	2104      	movs	r1, #4
 800450e:	6860      	ldr	r0, [r4, #4]
 8004510:	f7ff ff82 	bl	8004418 <std>
 8004514:	68a0      	ldr	r0, [r4, #8]
 8004516:	2201      	movs	r2, #1
 8004518:	2109      	movs	r1, #9
 800451a:	f7ff ff7d 	bl	8004418 <std>
 800451e:	68e0      	ldr	r0, [r4, #12]
 8004520:	2202      	movs	r2, #2
 8004522:	2112      	movs	r1, #18
 8004524:	f7ff ff78 	bl	8004418 <std>
 8004528:	2301      	movs	r3, #1
 800452a:	61a3      	str	r3, [r4, #24]
 800452c:	e7d2      	b.n	80044d4 <__sinit+0xc>
 800452e:	bf00      	nop
 8004530:	080055d8 	.word	0x080055d8
 8004534:	08004461 	.word	0x08004461

08004538 <__sfp>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	4607      	mov	r7, r0
 800453c:	f7ff ffac 	bl	8004498 <__sfp_lock_acquire>
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <__sfp+0x84>)
 8004542:	681e      	ldr	r6, [r3, #0]
 8004544:	69b3      	ldr	r3, [r6, #24]
 8004546:	b913      	cbnz	r3, 800454e <__sfp+0x16>
 8004548:	4630      	mov	r0, r6
 800454a:	f7ff ffbd 	bl	80044c8 <__sinit>
 800454e:	3648      	adds	r6, #72	; 0x48
 8004550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004554:	3b01      	subs	r3, #1
 8004556:	d503      	bpl.n	8004560 <__sfp+0x28>
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	b30b      	cbz	r3, 80045a0 <__sfp+0x68>
 800455c:	6836      	ldr	r6, [r6, #0]
 800455e:	e7f7      	b.n	8004550 <__sfp+0x18>
 8004560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004564:	b9d5      	cbnz	r5, 800459c <__sfp+0x64>
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <__sfp+0x88>)
 8004568:	60e3      	str	r3, [r4, #12]
 800456a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800456e:	6665      	str	r5, [r4, #100]	; 0x64
 8004570:	f000 f847 	bl	8004602 <__retarget_lock_init_recursive>
 8004574:	f7ff ff96 	bl	80044a4 <__sfp_lock_release>
 8004578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800457c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004580:	6025      	str	r5, [r4, #0]
 8004582:	61a5      	str	r5, [r4, #24]
 8004584:	2208      	movs	r2, #8
 8004586:	4629      	mov	r1, r5
 8004588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800458c:	f7ff fd2c 	bl	8003fe8 <memset>
 8004590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004598:	4620      	mov	r0, r4
 800459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800459c:	3468      	adds	r4, #104	; 0x68
 800459e:	e7d9      	b.n	8004554 <__sfp+0x1c>
 80045a0:	2104      	movs	r1, #4
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7ff ff62 	bl	800446c <__sfmoreglue>
 80045a8:	4604      	mov	r4, r0
 80045aa:	6030      	str	r0, [r6, #0]
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d1d5      	bne.n	800455c <__sfp+0x24>
 80045b0:	f7ff ff78 	bl	80044a4 <__sfp_lock_release>
 80045b4:	230c      	movs	r3, #12
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	e7ee      	b.n	8004598 <__sfp+0x60>
 80045ba:	bf00      	nop
 80045bc:	080055d8 	.word	0x080055d8
 80045c0:	ffff0001 	.word	0xffff0001

080045c4 <_fwalk_reent>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	4606      	mov	r6, r0
 80045ca:	4688      	mov	r8, r1
 80045cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045d0:	2700      	movs	r7, #0
 80045d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045d6:	f1b9 0901 	subs.w	r9, r9, #1
 80045da:	d505      	bpl.n	80045e8 <_fwalk_reent+0x24>
 80045dc:	6824      	ldr	r4, [r4, #0]
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d1f7      	bne.n	80045d2 <_fwalk_reent+0xe>
 80045e2:	4638      	mov	r0, r7
 80045e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e8:	89ab      	ldrh	r3, [r5, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d907      	bls.n	80045fe <_fwalk_reent+0x3a>
 80045ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f2:	3301      	adds	r3, #1
 80045f4:	d003      	beq.n	80045fe <_fwalk_reent+0x3a>
 80045f6:	4629      	mov	r1, r5
 80045f8:	4630      	mov	r0, r6
 80045fa:	47c0      	blx	r8
 80045fc:	4307      	orrs	r7, r0
 80045fe:	3568      	adds	r5, #104	; 0x68
 8004600:	e7e9      	b.n	80045d6 <_fwalk_reent+0x12>

08004602 <__retarget_lock_init_recursive>:
 8004602:	4770      	bx	lr

08004604 <__retarget_lock_acquire_recursive>:
 8004604:	4770      	bx	lr

08004606 <__retarget_lock_release_recursive>:
 8004606:	4770      	bx	lr

08004608 <__swhatbuf_r>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	460e      	mov	r6, r1
 800460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004610:	2900      	cmp	r1, #0
 8004612:	b096      	sub	sp, #88	; 0x58
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	da08      	bge.n	800462c <__swhatbuf_r+0x24>
 800461a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	602a      	str	r2, [r5, #0]
 8004622:	061a      	lsls	r2, r3, #24
 8004624:	d410      	bmi.n	8004648 <__swhatbuf_r+0x40>
 8004626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462a:	e00e      	b.n	800464a <__swhatbuf_r+0x42>
 800462c:	466a      	mov	r2, sp
 800462e:	f000 fc95 	bl	8004f5c <_fstat_r>
 8004632:	2800      	cmp	r0, #0
 8004634:	dbf1      	blt.n	800461a <__swhatbuf_r+0x12>
 8004636:	9a01      	ldr	r2, [sp, #4]
 8004638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800463c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004640:	425a      	negs	r2, r3
 8004642:	415a      	adcs	r2, r3
 8004644:	602a      	str	r2, [r5, #0]
 8004646:	e7ee      	b.n	8004626 <__swhatbuf_r+0x1e>
 8004648:	2340      	movs	r3, #64	; 0x40
 800464a:	2000      	movs	r0, #0
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	b016      	add	sp, #88	; 0x58
 8004650:	bd70      	pop	{r4, r5, r6, pc}
	...

08004654 <__smakebuf_r>:
 8004654:	898b      	ldrh	r3, [r1, #12]
 8004656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004658:	079d      	lsls	r5, r3, #30
 800465a:	4606      	mov	r6, r0
 800465c:	460c      	mov	r4, r1
 800465e:	d507      	bpl.n	8004670 <__smakebuf_r+0x1c>
 8004660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	2301      	movs	r3, #1
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	b002      	add	sp, #8
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	ab01      	add	r3, sp, #4
 8004672:	466a      	mov	r2, sp
 8004674:	f7ff ffc8 	bl	8004608 <__swhatbuf_r>
 8004678:	9900      	ldr	r1, [sp, #0]
 800467a:	4605      	mov	r5, r0
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f895 	bl	80047ac <_malloc_r>
 8004682:	b948      	cbnz	r0, 8004698 <__smakebuf_r+0x44>
 8004684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004688:	059a      	lsls	r2, r3, #22
 800468a:	d4ef      	bmi.n	800466c <__smakebuf_r+0x18>
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	f043 0302 	orr.w	r3, r3, #2
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7e3      	b.n	8004660 <__smakebuf_r+0xc>
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <__smakebuf_r+0x7c>)
 800469a:	62b3      	str	r3, [r6, #40]	; 0x28
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	6020      	str	r0, [r4, #0]
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	9b00      	ldr	r3, [sp, #0]
 80046a8:	6163      	str	r3, [r4, #20]
 80046aa:	9b01      	ldr	r3, [sp, #4]
 80046ac:	6120      	str	r0, [r4, #16]
 80046ae:	b15b      	cbz	r3, 80046c8 <__smakebuf_r+0x74>
 80046b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 fc63 	bl	8004f80 <_isatty_r>
 80046ba:	b128      	cbz	r0, 80046c8 <__smakebuf_r+0x74>
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	89a0      	ldrh	r0, [r4, #12]
 80046ca:	4305      	orrs	r5, r0
 80046cc:	81a5      	strh	r5, [r4, #12]
 80046ce:	e7cd      	b.n	800466c <__smakebuf_r+0x18>
 80046d0:	08004461 	.word	0x08004461

080046d4 <_free_r>:
 80046d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046d6:	2900      	cmp	r1, #0
 80046d8:	d044      	beq.n	8004764 <_free_r+0x90>
 80046da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046de:	9001      	str	r0, [sp, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f1a1 0404 	sub.w	r4, r1, #4
 80046e6:	bfb8      	it	lt
 80046e8:	18e4      	addlt	r4, r4, r3
 80046ea:	f000 fc6b 	bl	8004fc4 <__malloc_lock>
 80046ee:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <_free_r+0x94>)
 80046f0:	9801      	ldr	r0, [sp, #4]
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	b933      	cbnz	r3, 8004704 <_free_r+0x30>
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	6014      	str	r4, [r2, #0]
 80046fa:	b003      	add	sp, #12
 80046fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004700:	f000 bc66 	b.w	8004fd0 <__malloc_unlock>
 8004704:	42a3      	cmp	r3, r4
 8004706:	d908      	bls.n	800471a <_free_r+0x46>
 8004708:	6825      	ldr	r5, [r4, #0]
 800470a:	1961      	adds	r1, r4, r5
 800470c:	428b      	cmp	r3, r1
 800470e:	bf01      	itttt	eq
 8004710:	6819      	ldreq	r1, [r3, #0]
 8004712:	685b      	ldreq	r3, [r3, #4]
 8004714:	1949      	addeq	r1, r1, r5
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	e7ed      	b.n	80046f6 <_free_r+0x22>
 800471a:	461a      	mov	r2, r3
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b10b      	cbz	r3, 8004724 <_free_r+0x50>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d9fa      	bls.n	800471a <_free_r+0x46>
 8004724:	6811      	ldr	r1, [r2, #0]
 8004726:	1855      	adds	r5, r2, r1
 8004728:	42a5      	cmp	r5, r4
 800472a:	d10b      	bne.n	8004744 <_free_r+0x70>
 800472c:	6824      	ldr	r4, [r4, #0]
 800472e:	4421      	add	r1, r4
 8004730:	1854      	adds	r4, r2, r1
 8004732:	42a3      	cmp	r3, r4
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	d1e0      	bne.n	80046fa <_free_r+0x26>
 8004738:	681c      	ldr	r4, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	6053      	str	r3, [r2, #4]
 800473e:	4421      	add	r1, r4
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	e7da      	b.n	80046fa <_free_r+0x26>
 8004744:	d902      	bls.n	800474c <_free_r+0x78>
 8004746:	230c      	movs	r3, #12
 8004748:	6003      	str	r3, [r0, #0]
 800474a:	e7d6      	b.n	80046fa <_free_r+0x26>
 800474c:	6825      	ldr	r5, [r4, #0]
 800474e:	1961      	adds	r1, r4, r5
 8004750:	428b      	cmp	r3, r1
 8004752:	bf04      	itt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	bf04      	itt	eq
 800475c:	1949      	addeq	r1, r1, r5
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	6054      	str	r4, [r2, #4]
 8004762:	e7ca      	b.n	80046fa <_free_r+0x26>
 8004764:	b003      	add	sp, #12
 8004766:	bd30      	pop	{r4, r5, pc}
 8004768:	20000160 	.word	0x20000160

0800476c <sbrk_aligned>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4e0e      	ldr	r6, [pc, #56]	; (80047a8 <sbrk_aligned+0x3c>)
 8004770:	460c      	mov	r4, r1
 8004772:	6831      	ldr	r1, [r6, #0]
 8004774:	4605      	mov	r5, r0
 8004776:	b911      	cbnz	r1, 800477e <sbrk_aligned+0x12>
 8004778:	f000 fb7a 	bl	8004e70 <_sbrk_r>
 800477c:	6030      	str	r0, [r6, #0]
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 fb75 	bl	8004e70 <_sbrk_r>
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	d00a      	beq.n	80047a0 <sbrk_aligned+0x34>
 800478a:	1cc4      	adds	r4, r0, #3
 800478c:	f024 0403 	bic.w	r4, r4, #3
 8004790:	42a0      	cmp	r0, r4
 8004792:	d007      	beq.n	80047a4 <sbrk_aligned+0x38>
 8004794:	1a21      	subs	r1, r4, r0
 8004796:	4628      	mov	r0, r5
 8004798:	f000 fb6a 	bl	8004e70 <_sbrk_r>
 800479c:	3001      	adds	r0, #1
 800479e:	d101      	bne.n	80047a4 <sbrk_aligned+0x38>
 80047a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80047a4:	4620      	mov	r0, r4
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	20000164 	.word	0x20000164

080047ac <_malloc_r>:
 80047ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b0:	1ccd      	adds	r5, r1, #3
 80047b2:	f025 0503 	bic.w	r5, r5, #3
 80047b6:	3508      	adds	r5, #8
 80047b8:	2d0c      	cmp	r5, #12
 80047ba:	bf38      	it	cc
 80047bc:	250c      	movcc	r5, #12
 80047be:	2d00      	cmp	r5, #0
 80047c0:	4607      	mov	r7, r0
 80047c2:	db01      	blt.n	80047c8 <_malloc_r+0x1c>
 80047c4:	42a9      	cmp	r1, r5
 80047c6:	d905      	bls.n	80047d4 <_malloc_r+0x28>
 80047c8:	230c      	movs	r3, #12
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	2600      	movs	r6, #0
 80047ce:	4630      	mov	r0, r6
 80047d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d4:	4e2e      	ldr	r6, [pc, #184]	; (8004890 <_malloc_r+0xe4>)
 80047d6:	f000 fbf5 	bl	8004fc4 <__malloc_lock>
 80047da:	6833      	ldr	r3, [r6, #0]
 80047dc:	461c      	mov	r4, r3
 80047de:	bb34      	cbnz	r4, 800482e <_malloc_r+0x82>
 80047e0:	4629      	mov	r1, r5
 80047e2:	4638      	mov	r0, r7
 80047e4:	f7ff ffc2 	bl	800476c <sbrk_aligned>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	4604      	mov	r4, r0
 80047ec:	d14d      	bne.n	800488a <_malloc_r+0xde>
 80047ee:	6834      	ldr	r4, [r6, #0]
 80047f0:	4626      	mov	r6, r4
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	d140      	bne.n	8004878 <_malloc_r+0xcc>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	4631      	mov	r1, r6
 80047fa:	4638      	mov	r0, r7
 80047fc:	eb04 0803 	add.w	r8, r4, r3
 8004800:	f000 fb36 	bl	8004e70 <_sbrk_r>
 8004804:	4580      	cmp	r8, r0
 8004806:	d13a      	bne.n	800487e <_malloc_r+0xd2>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	3503      	adds	r5, #3
 800480c:	1a6d      	subs	r5, r5, r1
 800480e:	f025 0503 	bic.w	r5, r5, #3
 8004812:	3508      	adds	r5, #8
 8004814:	2d0c      	cmp	r5, #12
 8004816:	bf38      	it	cc
 8004818:	250c      	movcc	r5, #12
 800481a:	4629      	mov	r1, r5
 800481c:	4638      	mov	r0, r7
 800481e:	f7ff ffa5 	bl	800476c <sbrk_aligned>
 8004822:	3001      	adds	r0, #1
 8004824:	d02b      	beq.n	800487e <_malloc_r+0xd2>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	442b      	add	r3, r5
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	e00e      	b.n	800484c <_malloc_r+0xa0>
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	1b52      	subs	r2, r2, r5
 8004832:	d41e      	bmi.n	8004872 <_malloc_r+0xc6>
 8004834:	2a0b      	cmp	r2, #11
 8004836:	d916      	bls.n	8004866 <_malloc_r+0xba>
 8004838:	1961      	adds	r1, r4, r5
 800483a:	42a3      	cmp	r3, r4
 800483c:	6025      	str	r5, [r4, #0]
 800483e:	bf18      	it	ne
 8004840:	6059      	strne	r1, [r3, #4]
 8004842:	6863      	ldr	r3, [r4, #4]
 8004844:	bf08      	it	eq
 8004846:	6031      	streq	r1, [r6, #0]
 8004848:	5162      	str	r2, [r4, r5]
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	4638      	mov	r0, r7
 800484e:	f104 060b 	add.w	r6, r4, #11
 8004852:	f000 fbbd 	bl	8004fd0 <__malloc_unlock>
 8004856:	f026 0607 	bic.w	r6, r6, #7
 800485a:	1d23      	adds	r3, r4, #4
 800485c:	1af2      	subs	r2, r6, r3
 800485e:	d0b6      	beq.n	80047ce <_malloc_r+0x22>
 8004860:	1b9b      	subs	r3, r3, r6
 8004862:	50a3      	str	r3, [r4, r2]
 8004864:	e7b3      	b.n	80047ce <_malloc_r+0x22>
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	42a3      	cmp	r3, r4
 800486a:	bf0c      	ite	eq
 800486c:	6032      	streq	r2, [r6, #0]
 800486e:	605a      	strne	r2, [r3, #4]
 8004870:	e7ec      	b.n	800484c <_malloc_r+0xa0>
 8004872:	4623      	mov	r3, r4
 8004874:	6864      	ldr	r4, [r4, #4]
 8004876:	e7b2      	b.n	80047de <_malloc_r+0x32>
 8004878:	4634      	mov	r4, r6
 800487a:	6876      	ldr	r6, [r6, #4]
 800487c:	e7b9      	b.n	80047f2 <_malloc_r+0x46>
 800487e:	230c      	movs	r3, #12
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4638      	mov	r0, r7
 8004884:	f000 fba4 	bl	8004fd0 <__malloc_unlock>
 8004888:	e7a1      	b.n	80047ce <_malloc_r+0x22>
 800488a:	6025      	str	r5, [r4, #0]
 800488c:	e7de      	b.n	800484c <_malloc_r+0xa0>
 800488e:	bf00      	nop
 8004890:	20000160 	.word	0x20000160

08004894 <__sfputc_r>:
 8004894:	6893      	ldr	r3, [r2, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	b410      	push	{r4}
 800489c:	6093      	str	r3, [r2, #8]
 800489e:	da08      	bge.n	80048b2 <__sfputc_r+0x1e>
 80048a0:	6994      	ldr	r4, [r2, #24]
 80048a2:	42a3      	cmp	r3, r4
 80048a4:	db01      	blt.n	80048aa <__sfputc_r+0x16>
 80048a6:	290a      	cmp	r1, #10
 80048a8:	d103      	bne.n	80048b2 <__sfputc_r+0x1e>
 80048aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ae:	f7ff bc31 	b.w	8004114 <__swbuf_r>
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	1c58      	adds	r0, r3, #1
 80048b6:	6010      	str	r0, [r2, #0]
 80048b8:	7019      	strb	r1, [r3, #0]
 80048ba:	4608      	mov	r0, r1
 80048bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <__sfputs_r>:
 80048c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c4:	4606      	mov	r6, r0
 80048c6:	460f      	mov	r7, r1
 80048c8:	4614      	mov	r4, r2
 80048ca:	18d5      	adds	r5, r2, r3
 80048cc:	42ac      	cmp	r4, r5
 80048ce:	d101      	bne.n	80048d4 <__sfputs_r+0x12>
 80048d0:	2000      	movs	r0, #0
 80048d2:	e007      	b.n	80048e4 <__sfputs_r+0x22>
 80048d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d8:	463a      	mov	r2, r7
 80048da:	4630      	mov	r0, r6
 80048dc:	f7ff ffda 	bl	8004894 <__sfputc_r>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d1f3      	bne.n	80048cc <__sfputs_r+0xa>
 80048e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048e8 <_vfiprintf_r>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	460d      	mov	r5, r1
 80048ee:	b09d      	sub	sp, #116	; 0x74
 80048f0:	4614      	mov	r4, r2
 80048f2:	4698      	mov	r8, r3
 80048f4:	4606      	mov	r6, r0
 80048f6:	b118      	cbz	r0, 8004900 <_vfiprintf_r+0x18>
 80048f8:	6983      	ldr	r3, [r0, #24]
 80048fa:	b90b      	cbnz	r3, 8004900 <_vfiprintf_r+0x18>
 80048fc:	f7ff fde4 	bl	80044c8 <__sinit>
 8004900:	4b89      	ldr	r3, [pc, #548]	; (8004b28 <_vfiprintf_r+0x240>)
 8004902:	429d      	cmp	r5, r3
 8004904:	d11b      	bne.n	800493e <_vfiprintf_r+0x56>
 8004906:	6875      	ldr	r5, [r6, #4]
 8004908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800490a:	07d9      	lsls	r1, r3, #31
 800490c:	d405      	bmi.n	800491a <_vfiprintf_r+0x32>
 800490e:	89ab      	ldrh	r3, [r5, #12]
 8004910:	059a      	lsls	r2, r3, #22
 8004912:	d402      	bmi.n	800491a <_vfiprintf_r+0x32>
 8004914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004916:	f7ff fe75 	bl	8004604 <__retarget_lock_acquire_recursive>
 800491a:	89ab      	ldrh	r3, [r5, #12]
 800491c:	071b      	lsls	r3, r3, #28
 800491e:	d501      	bpl.n	8004924 <_vfiprintf_r+0x3c>
 8004920:	692b      	ldr	r3, [r5, #16]
 8004922:	b9eb      	cbnz	r3, 8004960 <_vfiprintf_r+0x78>
 8004924:	4629      	mov	r1, r5
 8004926:	4630      	mov	r0, r6
 8004928:	f7ff fc46 	bl	80041b8 <__swsetup_r>
 800492c:	b1c0      	cbz	r0, 8004960 <_vfiprintf_r+0x78>
 800492e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004930:	07dc      	lsls	r4, r3, #31
 8004932:	d50e      	bpl.n	8004952 <_vfiprintf_r+0x6a>
 8004934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004938:	b01d      	add	sp, #116	; 0x74
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	4b7b      	ldr	r3, [pc, #492]	; (8004b2c <_vfiprintf_r+0x244>)
 8004940:	429d      	cmp	r5, r3
 8004942:	d101      	bne.n	8004948 <_vfiprintf_r+0x60>
 8004944:	68b5      	ldr	r5, [r6, #8]
 8004946:	e7df      	b.n	8004908 <_vfiprintf_r+0x20>
 8004948:	4b79      	ldr	r3, [pc, #484]	; (8004b30 <_vfiprintf_r+0x248>)
 800494a:	429d      	cmp	r5, r3
 800494c:	bf08      	it	eq
 800494e:	68f5      	ldreq	r5, [r6, #12]
 8004950:	e7da      	b.n	8004908 <_vfiprintf_r+0x20>
 8004952:	89ab      	ldrh	r3, [r5, #12]
 8004954:	0598      	lsls	r0, r3, #22
 8004956:	d4ed      	bmi.n	8004934 <_vfiprintf_r+0x4c>
 8004958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800495a:	f7ff fe54 	bl	8004606 <__retarget_lock_release_recursive>
 800495e:	e7e9      	b.n	8004934 <_vfiprintf_r+0x4c>
 8004960:	2300      	movs	r3, #0
 8004962:	9309      	str	r3, [sp, #36]	; 0x24
 8004964:	2320      	movs	r3, #32
 8004966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800496a:	f8cd 800c 	str.w	r8, [sp, #12]
 800496e:	2330      	movs	r3, #48	; 0x30
 8004970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b34 <_vfiprintf_r+0x24c>
 8004974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004978:	f04f 0901 	mov.w	r9, #1
 800497c:	4623      	mov	r3, r4
 800497e:	469a      	mov	sl, r3
 8004980:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004984:	b10a      	cbz	r2, 800498a <_vfiprintf_r+0xa2>
 8004986:	2a25      	cmp	r2, #37	; 0x25
 8004988:	d1f9      	bne.n	800497e <_vfiprintf_r+0x96>
 800498a:	ebba 0b04 	subs.w	fp, sl, r4
 800498e:	d00b      	beq.n	80049a8 <_vfiprintf_r+0xc0>
 8004990:	465b      	mov	r3, fp
 8004992:	4622      	mov	r2, r4
 8004994:	4629      	mov	r1, r5
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff ff93 	bl	80048c2 <__sfputs_r>
 800499c:	3001      	adds	r0, #1
 800499e:	f000 80aa 	beq.w	8004af6 <_vfiprintf_r+0x20e>
 80049a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a4:	445a      	add	r2, fp
 80049a6:	9209      	str	r2, [sp, #36]	; 0x24
 80049a8:	f89a 3000 	ldrb.w	r3, [sl]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a2 	beq.w	8004af6 <_vfiprintf_r+0x20e>
 80049b2:	2300      	movs	r3, #0
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049bc:	f10a 0a01 	add.w	sl, sl, #1
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	9307      	str	r3, [sp, #28]
 80049c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049c8:	931a      	str	r3, [sp, #104]	; 0x68
 80049ca:	4654      	mov	r4, sl
 80049cc:	2205      	movs	r2, #5
 80049ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d2:	4858      	ldr	r0, [pc, #352]	; (8004b34 <_vfiprintf_r+0x24c>)
 80049d4:	f7fb fbfc 	bl	80001d0 <memchr>
 80049d8:	9a04      	ldr	r2, [sp, #16]
 80049da:	b9d8      	cbnz	r0, 8004a14 <_vfiprintf_r+0x12c>
 80049dc:	06d1      	lsls	r1, r2, #27
 80049de:	bf44      	itt	mi
 80049e0:	2320      	movmi	r3, #32
 80049e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e6:	0713      	lsls	r3, r2, #28
 80049e8:	bf44      	itt	mi
 80049ea:	232b      	movmi	r3, #43	; 0x2b
 80049ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f0:	f89a 3000 	ldrb.w	r3, [sl]
 80049f4:	2b2a      	cmp	r3, #42	; 0x2a
 80049f6:	d015      	beq.n	8004a24 <_vfiprintf_r+0x13c>
 80049f8:	9a07      	ldr	r2, [sp, #28]
 80049fa:	4654      	mov	r4, sl
 80049fc:	2000      	movs	r0, #0
 80049fe:	f04f 0c0a 	mov.w	ip, #10
 8004a02:	4621      	mov	r1, r4
 8004a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a08:	3b30      	subs	r3, #48	; 0x30
 8004a0a:	2b09      	cmp	r3, #9
 8004a0c:	d94e      	bls.n	8004aac <_vfiprintf_r+0x1c4>
 8004a0e:	b1b0      	cbz	r0, 8004a3e <_vfiprintf_r+0x156>
 8004a10:	9207      	str	r2, [sp, #28]
 8004a12:	e014      	b.n	8004a3e <_vfiprintf_r+0x156>
 8004a14:	eba0 0308 	sub.w	r3, r0, r8
 8004a18:	fa09 f303 	lsl.w	r3, r9, r3
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	46a2      	mov	sl, r4
 8004a22:	e7d2      	b.n	80049ca <_vfiprintf_r+0xe2>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	1d19      	adds	r1, r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	9103      	str	r1, [sp, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bfbb      	ittet	lt
 8004a30:	425b      	neglt	r3, r3
 8004a32:	f042 0202 	orrlt.w	r2, r2, #2
 8004a36:	9307      	strge	r3, [sp, #28]
 8004a38:	9307      	strlt	r3, [sp, #28]
 8004a3a:	bfb8      	it	lt
 8004a3c:	9204      	strlt	r2, [sp, #16]
 8004a3e:	7823      	ldrb	r3, [r4, #0]
 8004a40:	2b2e      	cmp	r3, #46	; 0x2e
 8004a42:	d10c      	bne.n	8004a5e <_vfiprintf_r+0x176>
 8004a44:	7863      	ldrb	r3, [r4, #1]
 8004a46:	2b2a      	cmp	r3, #42	; 0x2a
 8004a48:	d135      	bne.n	8004ab6 <_vfiprintf_r+0x1ce>
 8004a4a:	9b03      	ldr	r3, [sp, #12]
 8004a4c:	1d1a      	adds	r2, r3, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	9203      	str	r2, [sp, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bfb8      	it	lt
 8004a56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a5a:	3402      	adds	r4, #2
 8004a5c:	9305      	str	r3, [sp, #20]
 8004a5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b44 <_vfiprintf_r+0x25c>
 8004a62:	7821      	ldrb	r1, [r4, #0]
 8004a64:	2203      	movs	r2, #3
 8004a66:	4650      	mov	r0, sl
 8004a68:	f7fb fbb2 	bl	80001d0 <memchr>
 8004a6c:	b140      	cbz	r0, 8004a80 <_vfiprintf_r+0x198>
 8004a6e:	2340      	movs	r3, #64	; 0x40
 8004a70:	eba0 000a 	sub.w	r0, r0, sl
 8004a74:	fa03 f000 	lsl.w	r0, r3, r0
 8004a78:	9b04      	ldr	r3, [sp, #16]
 8004a7a:	4303      	orrs	r3, r0
 8004a7c:	3401      	adds	r4, #1
 8004a7e:	9304      	str	r3, [sp, #16]
 8004a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a84:	482c      	ldr	r0, [pc, #176]	; (8004b38 <_vfiprintf_r+0x250>)
 8004a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a8a:	2206      	movs	r2, #6
 8004a8c:	f7fb fba0 	bl	80001d0 <memchr>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d03f      	beq.n	8004b14 <_vfiprintf_r+0x22c>
 8004a94:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <_vfiprintf_r+0x254>)
 8004a96:	bb1b      	cbnz	r3, 8004ae0 <_vfiprintf_r+0x1f8>
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	3307      	adds	r3, #7
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	9303      	str	r3, [sp, #12]
 8004aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa6:	443b      	add	r3, r7
 8004aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aaa:	e767      	b.n	800497c <_vfiprintf_r+0x94>
 8004aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	e7a5      	b.n	8004a02 <_vfiprintf_r+0x11a>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	3401      	adds	r4, #1
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	4619      	mov	r1, r3
 8004abe:	f04f 0c0a 	mov.w	ip, #10
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ac8:	3a30      	subs	r2, #48	; 0x30
 8004aca:	2a09      	cmp	r2, #9
 8004acc:	d903      	bls.n	8004ad6 <_vfiprintf_r+0x1ee>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0c5      	beq.n	8004a5e <_vfiprintf_r+0x176>
 8004ad2:	9105      	str	r1, [sp, #20]
 8004ad4:	e7c3      	b.n	8004a5e <_vfiprintf_r+0x176>
 8004ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ada:	4604      	mov	r4, r0
 8004adc:	2301      	movs	r3, #1
 8004ade:	e7f0      	b.n	8004ac2 <_vfiprintf_r+0x1da>
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <_vfiprintf_r+0x258>)
 8004ae8:	a904      	add	r1, sp, #16
 8004aea:	4630      	mov	r0, r6
 8004aec:	f3af 8000 	nop.w
 8004af0:	4607      	mov	r7, r0
 8004af2:	1c78      	adds	r0, r7, #1
 8004af4:	d1d6      	bne.n	8004aa4 <_vfiprintf_r+0x1bc>
 8004af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af8:	07d9      	lsls	r1, r3, #31
 8004afa:	d405      	bmi.n	8004b08 <_vfiprintf_r+0x220>
 8004afc:	89ab      	ldrh	r3, [r5, #12]
 8004afe:	059a      	lsls	r2, r3, #22
 8004b00:	d402      	bmi.n	8004b08 <_vfiprintf_r+0x220>
 8004b02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b04:	f7ff fd7f 	bl	8004606 <__retarget_lock_release_recursive>
 8004b08:	89ab      	ldrh	r3, [r5, #12]
 8004b0a:	065b      	lsls	r3, r3, #25
 8004b0c:	f53f af12 	bmi.w	8004934 <_vfiprintf_r+0x4c>
 8004b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b12:	e711      	b.n	8004938 <_vfiprintf_r+0x50>
 8004b14:	ab03      	add	r3, sp, #12
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	462a      	mov	r2, r5
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <_vfiprintf_r+0x258>)
 8004b1c:	a904      	add	r1, sp, #16
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f000 f880 	bl	8004c24 <_printf_i>
 8004b24:	e7e4      	b.n	8004af0 <_vfiprintf_r+0x208>
 8004b26:	bf00      	nop
 8004b28:	080055fc 	.word	0x080055fc
 8004b2c:	0800561c 	.word	0x0800561c
 8004b30:	080055dc 	.word	0x080055dc
 8004b34:	0800563c 	.word	0x0800563c
 8004b38:	08005646 	.word	0x08005646
 8004b3c:	00000000 	.word	0x00000000
 8004b40:	080048c3 	.word	0x080048c3
 8004b44:	08005642 	.word	0x08005642

08004b48 <_printf_common>:
 8004b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	4699      	mov	r9, r3
 8004b50:	688a      	ldr	r2, [r1, #8]
 8004b52:	690b      	ldr	r3, [r1, #16]
 8004b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bfb8      	it	lt
 8004b5c:	4613      	movlt	r3, r2
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b64:	4607      	mov	r7, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	b10a      	cbz	r2, 8004b6e <_printf_common+0x26>
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	0699      	lsls	r1, r3, #26
 8004b72:	bf42      	ittt	mi
 8004b74:	6833      	ldrmi	r3, [r6, #0]
 8004b76:	3302      	addmi	r3, #2
 8004b78:	6033      	strmi	r3, [r6, #0]
 8004b7a:	6825      	ldr	r5, [r4, #0]
 8004b7c:	f015 0506 	ands.w	r5, r5, #6
 8004b80:	d106      	bne.n	8004b90 <_printf_common+0x48>
 8004b82:	f104 0a19 	add.w	sl, r4, #25
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	6832      	ldr	r2, [r6, #0]
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	42ab      	cmp	r3, r5
 8004b8e:	dc26      	bgt.n	8004bde <_printf_common+0x96>
 8004b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b94:	1e13      	subs	r3, r2, #0
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	bf18      	it	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	0692      	lsls	r2, r2, #26
 8004b9e:	d42b      	bmi.n	8004bf8 <_printf_common+0xb0>
 8004ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	47c0      	blx	r8
 8004baa:	3001      	adds	r0, #1
 8004bac:	d01e      	beq.n	8004bec <_printf_common+0xa4>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	68e5      	ldr	r5, [r4, #12]
 8004bb2:	6832      	ldr	r2, [r6, #0]
 8004bb4:	f003 0306 	and.w	r3, r3, #6
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	bf08      	it	eq
 8004bbc:	1aad      	subeq	r5, r5, r2
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	6922      	ldr	r2, [r4, #16]
 8004bc2:	bf0c      	ite	eq
 8004bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc8:	2500      	movne	r5, #0
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	bfc4      	itt	gt
 8004bce:	1a9b      	subgt	r3, r3, r2
 8004bd0:	18ed      	addgt	r5, r5, r3
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	341a      	adds	r4, #26
 8004bd6:	42b5      	cmp	r5, r6
 8004bd8:	d11a      	bne.n	8004c10 <_printf_common+0xc8>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e008      	b.n	8004bf0 <_printf_common+0xa8>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4649      	mov	r1, r9
 8004be4:	4638      	mov	r0, r7
 8004be6:	47c0      	blx	r8
 8004be8:	3001      	adds	r0, #1
 8004bea:	d103      	bne.n	8004bf4 <_printf_common+0xac>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	e7c6      	b.n	8004b86 <_printf_common+0x3e>
 8004bf8:	18e1      	adds	r1, r4, r3
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	2030      	movs	r0, #48	; 0x30
 8004bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c02:	4422      	add	r2, r4
 8004c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	e7c7      	b.n	8004ba0 <_printf_common+0x58>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4622      	mov	r2, r4
 8004c14:	4649      	mov	r1, r9
 8004c16:	4638      	mov	r0, r7
 8004c18:	47c0      	blx	r8
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d0e6      	beq.n	8004bec <_printf_common+0xa4>
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7d9      	b.n	8004bd6 <_printf_common+0x8e>
	...

08004c24 <_printf_i>:
 8004c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	7e0f      	ldrb	r7, [r1, #24]
 8004c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c2c:	2f78      	cmp	r7, #120	; 0x78
 8004c2e:	4691      	mov	r9, r2
 8004c30:	4680      	mov	r8, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	469a      	mov	sl, r3
 8004c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c3a:	d807      	bhi.n	8004c4c <_printf_i+0x28>
 8004c3c:	2f62      	cmp	r7, #98	; 0x62
 8004c3e:	d80a      	bhi.n	8004c56 <_printf_i+0x32>
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	f000 80d8 	beq.w	8004df6 <_printf_i+0x1d2>
 8004c46:	2f58      	cmp	r7, #88	; 0x58
 8004c48:	f000 80a3 	beq.w	8004d92 <_printf_i+0x16e>
 8004c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c54:	e03a      	b.n	8004ccc <_printf_i+0xa8>
 8004c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c5a:	2b15      	cmp	r3, #21
 8004c5c:	d8f6      	bhi.n	8004c4c <_printf_i+0x28>
 8004c5e:	a101      	add	r1, pc, #4	; (adr r1, 8004c64 <_printf_i+0x40>)
 8004c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cd1 	.word	0x08004cd1
 8004c6c:	08004c4d 	.word	0x08004c4d
 8004c70:	08004c4d 	.word	0x08004c4d
 8004c74:	08004c4d 	.word	0x08004c4d
 8004c78:	08004c4d 	.word	0x08004c4d
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004c4d 	.word	0x08004c4d
 8004c84:	08004c4d 	.word	0x08004c4d
 8004c88:	08004c4d 	.word	0x08004c4d
 8004c8c:	08004c4d 	.word	0x08004c4d
 8004c90:	08004ddd 	.word	0x08004ddd
 8004c94:	08004d01 	.word	0x08004d01
 8004c98:	08004dbf 	.word	0x08004dbf
 8004c9c:	08004c4d 	.word	0x08004c4d
 8004ca0:	08004c4d 	.word	0x08004c4d
 8004ca4:	08004dff 	.word	0x08004dff
 8004ca8:	08004c4d 	.word	0x08004c4d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c4d 	.word	0x08004c4d
 8004cb4:	08004c4d 	.word	0x08004c4d
 8004cb8:	08004dc7 	.word	0x08004dc7
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	602a      	str	r2, [r5, #0]
 8004cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0a3      	b.n	8004e18 <_printf_i+0x1f4>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	6829      	ldr	r1, [r5, #0]
 8004cd4:	0606      	lsls	r6, r0, #24
 8004cd6:	f101 0304 	add.w	r3, r1, #4
 8004cda:	d50a      	bpl.n	8004cf2 <_printf_i+0xce>
 8004cdc:	680e      	ldr	r6, [r1, #0]
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	da03      	bge.n	8004cec <_printf_i+0xc8>
 8004ce4:	232d      	movs	r3, #45	; 0x2d
 8004ce6:	4276      	negs	r6, r6
 8004ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cec:	485e      	ldr	r0, [pc, #376]	; (8004e68 <_printf_i+0x244>)
 8004cee:	230a      	movs	r3, #10
 8004cf0:	e019      	b.n	8004d26 <_printf_i+0x102>
 8004cf2:	680e      	ldr	r6, [r1, #0]
 8004cf4:	602b      	str	r3, [r5, #0]
 8004cf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cfa:	bf18      	it	ne
 8004cfc:	b236      	sxthne	r6, r6
 8004cfe:	e7ef      	b.n	8004ce0 <_printf_i+0xbc>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	6820      	ldr	r0, [r4, #0]
 8004d04:	1d19      	adds	r1, r3, #4
 8004d06:	6029      	str	r1, [r5, #0]
 8004d08:	0601      	lsls	r1, r0, #24
 8004d0a:	d501      	bpl.n	8004d10 <_printf_i+0xec>
 8004d0c:	681e      	ldr	r6, [r3, #0]
 8004d0e:	e002      	b.n	8004d16 <_printf_i+0xf2>
 8004d10:	0646      	lsls	r6, r0, #25
 8004d12:	d5fb      	bpl.n	8004d0c <_printf_i+0xe8>
 8004d14:	881e      	ldrh	r6, [r3, #0]
 8004d16:	4854      	ldr	r0, [pc, #336]	; (8004e68 <_printf_i+0x244>)
 8004d18:	2f6f      	cmp	r7, #111	; 0x6f
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2308      	moveq	r3, #8
 8004d1e:	230a      	movne	r3, #10
 8004d20:	2100      	movs	r1, #0
 8004d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d26:	6865      	ldr	r5, [r4, #4]
 8004d28:	60a5      	str	r5, [r4, #8]
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	bfa2      	ittt	ge
 8004d2e:	6821      	ldrge	r1, [r4, #0]
 8004d30:	f021 0104 	bicge.w	r1, r1, #4
 8004d34:	6021      	strge	r1, [r4, #0]
 8004d36:	b90e      	cbnz	r6, 8004d3c <_printf_i+0x118>
 8004d38:	2d00      	cmp	r5, #0
 8004d3a:	d04d      	beq.n	8004dd8 <_printf_i+0x1b4>
 8004d3c:	4615      	mov	r5, r2
 8004d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d42:	fb03 6711 	mls	r7, r3, r1, r6
 8004d46:	5dc7      	ldrb	r7, [r0, r7]
 8004d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d4c:	4637      	mov	r7, r6
 8004d4e:	42bb      	cmp	r3, r7
 8004d50:	460e      	mov	r6, r1
 8004d52:	d9f4      	bls.n	8004d3e <_printf_i+0x11a>
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d10b      	bne.n	8004d70 <_printf_i+0x14c>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	07de      	lsls	r6, r3, #31
 8004d5c:	d508      	bpl.n	8004d70 <_printf_i+0x14c>
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6861      	ldr	r1, [r4, #4]
 8004d62:	4299      	cmp	r1, r3
 8004d64:	bfde      	ittt	le
 8004d66:	2330      	movle	r3, #48	; 0x30
 8004d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d70:	1b52      	subs	r2, r2, r5
 8004d72:	6122      	str	r2, [r4, #16]
 8004d74:	f8cd a000 	str.w	sl, [sp]
 8004d78:	464b      	mov	r3, r9
 8004d7a:	aa03      	add	r2, sp, #12
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f7ff fee2 	bl	8004b48 <_printf_common>
 8004d84:	3001      	adds	r0, #1
 8004d86:	d14c      	bne.n	8004e22 <_printf_i+0x1fe>
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d8c:	b004      	add	sp, #16
 8004d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d92:	4835      	ldr	r0, [pc, #212]	; (8004e68 <_printf_i+0x244>)
 8004d94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d98:	6829      	ldr	r1, [r5, #0]
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004da0:	6029      	str	r1, [r5, #0]
 8004da2:	061d      	lsls	r5, r3, #24
 8004da4:	d514      	bpl.n	8004dd0 <_printf_i+0x1ac>
 8004da6:	07df      	lsls	r7, r3, #31
 8004da8:	bf44      	itt	mi
 8004daa:	f043 0320 	orrmi.w	r3, r3, #32
 8004dae:	6023      	strmi	r3, [r4, #0]
 8004db0:	b91e      	cbnz	r6, 8004dba <_printf_i+0x196>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f023 0320 	bic.w	r3, r3, #32
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	2310      	movs	r3, #16
 8004dbc:	e7b0      	b.n	8004d20 <_printf_i+0xfc>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f043 0320 	orr.w	r3, r3, #32
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	2378      	movs	r3, #120	; 0x78
 8004dc8:	4828      	ldr	r0, [pc, #160]	; (8004e6c <_printf_i+0x248>)
 8004dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dce:	e7e3      	b.n	8004d98 <_printf_i+0x174>
 8004dd0:	0659      	lsls	r1, r3, #25
 8004dd2:	bf48      	it	mi
 8004dd4:	b2b6      	uxthmi	r6, r6
 8004dd6:	e7e6      	b.n	8004da6 <_printf_i+0x182>
 8004dd8:	4615      	mov	r5, r2
 8004dda:	e7bb      	b.n	8004d54 <_printf_i+0x130>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	6826      	ldr	r6, [r4, #0]
 8004de0:	6961      	ldr	r1, [r4, #20]
 8004de2:	1d18      	adds	r0, r3, #4
 8004de4:	6028      	str	r0, [r5, #0]
 8004de6:	0635      	lsls	r5, r6, #24
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	d501      	bpl.n	8004df0 <_printf_i+0x1cc>
 8004dec:	6019      	str	r1, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <_printf_i+0x1d2>
 8004df0:	0670      	lsls	r0, r6, #25
 8004df2:	d5fb      	bpl.n	8004dec <_printf_i+0x1c8>
 8004df4:	8019      	strh	r1, [r3, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	4615      	mov	r5, r2
 8004dfc:	e7ba      	b.n	8004d74 <_printf_i+0x150>
 8004dfe:	682b      	ldr	r3, [r5, #0]
 8004e00:	1d1a      	adds	r2, r3, #4
 8004e02:	602a      	str	r2, [r5, #0]
 8004e04:	681d      	ldr	r5, [r3, #0]
 8004e06:	6862      	ldr	r2, [r4, #4]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f7fb f9e0 	bl	80001d0 <memchr>
 8004e10:	b108      	cbz	r0, 8004e16 <_printf_i+0x1f2>
 8004e12:	1b40      	subs	r0, r0, r5
 8004e14:	6060      	str	r0, [r4, #4]
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e20:	e7a8      	b.n	8004d74 <_printf_i+0x150>
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4649      	mov	r1, r9
 8004e28:	4640      	mov	r0, r8
 8004e2a:	47d0      	blx	sl
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d0ab      	beq.n	8004d88 <_printf_i+0x164>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	079b      	lsls	r3, r3, #30
 8004e34:	d413      	bmi.n	8004e5e <_printf_i+0x23a>
 8004e36:	68e0      	ldr	r0, [r4, #12]
 8004e38:	9b03      	ldr	r3, [sp, #12]
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	bfb8      	it	lt
 8004e3e:	4618      	movlt	r0, r3
 8004e40:	e7a4      	b.n	8004d8c <_printf_i+0x168>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4632      	mov	r2, r6
 8004e46:	4649      	mov	r1, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	47d0      	blx	sl
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d09b      	beq.n	8004d88 <_printf_i+0x164>
 8004e50:	3501      	adds	r5, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	9903      	ldr	r1, [sp, #12]
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	42ab      	cmp	r3, r5
 8004e5a:	dcf2      	bgt.n	8004e42 <_printf_i+0x21e>
 8004e5c:	e7eb      	b.n	8004e36 <_printf_i+0x212>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	f104 0619 	add.w	r6, r4, #25
 8004e64:	e7f5      	b.n	8004e52 <_printf_i+0x22e>
 8004e66:	bf00      	nop
 8004e68:	0800564d 	.word	0x0800564d
 8004e6c:	0800565e 	.word	0x0800565e

08004e70 <_sbrk_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d06      	ldr	r5, [pc, #24]	; (8004e8c <_sbrk_r+0x1c>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	602b      	str	r3, [r5, #0]
 8004e7c:	f7fb fdd2 	bl	8000a24 <_sbrk>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_sbrk_r+0x1a>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_sbrk_r+0x1a>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20000168 	.word	0x20000168

08004e90 <__sread>:
 8004e90:	b510      	push	{r4, lr}
 8004e92:	460c      	mov	r4, r1
 8004e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e98:	f000 f8a0 	bl	8004fdc <_read_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	bfab      	itete	ge
 8004ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ea4:	181b      	addge	r3, r3, r0
 8004ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004eaa:	bfac      	ite	ge
 8004eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eae:	81a3      	strhlt	r3, [r4, #12]
 8004eb0:	bd10      	pop	{r4, pc}

08004eb2 <__swrite>:
 8004eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb6:	461f      	mov	r7, r3
 8004eb8:	898b      	ldrh	r3, [r1, #12]
 8004eba:	05db      	lsls	r3, r3, #23
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	d505      	bpl.n	8004ed0 <__swrite+0x1e>
 8004ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec8:	2302      	movs	r3, #2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f000 f868 	bl	8004fa0 <_lseek_r>
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	4632      	mov	r2, r6
 8004ede:	463b      	mov	r3, r7
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee6:	f000 b817 	b.w	8004f18 <_write_r>

08004eea <__sseek>:
 8004eea:	b510      	push	{r4, lr}
 8004eec:	460c      	mov	r4, r1
 8004eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef2:	f000 f855 	bl	8004fa0 <_lseek_r>
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	bf15      	itete	ne
 8004efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f06:	81a3      	strheq	r3, [r4, #12]
 8004f08:	bf18      	it	ne
 8004f0a:	81a3      	strhne	r3, [r4, #12]
 8004f0c:	bd10      	pop	{r4, pc}

08004f0e <__sclose>:
 8004f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f12:	f000 b813 	b.w	8004f3c <_close_r>
	...

08004f18 <_write_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d07      	ldr	r5, [pc, #28]	; (8004f38 <_write_r+0x20>)
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	4608      	mov	r0, r1
 8004f20:	4611      	mov	r1, r2
 8004f22:	2200      	movs	r2, #0
 8004f24:	602a      	str	r2, [r5, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 f911 	bl	800514e <_write>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_write_r+0x1e>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_write_r+0x1e>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000168 	.word	0x20000168

08004f3c <_close_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d06      	ldr	r5, [pc, #24]	; (8004f58 <_close_r+0x1c>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f000 f932 	bl	80051b0 <_close>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_close_r+0x1a>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_close_r+0x1a>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20000168 	.word	0x20000168

08004f5c <_fstat_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d07      	ldr	r5, [pc, #28]	; (8004f7c <_fstat_r+0x20>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	f000 f968 	bl	800523e <_fstat>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d102      	bne.n	8004f78 <_fstat_r+0x1c>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	b103      	cbz	r3, 8004f78 <_fstat_r+0x1c>
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000168 	.word	0x20000168

08004f80 <_isatty_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d06      	ldr	r5, [pc, #24]	; (8004f9c <_isatty_r+0x1c>)
 8004f84:	2300      	movs	r3, #0
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	f000 fabe 	bl	800550c <_isatty>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_isatty_r+0x1a>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_isatty_r+0x1a>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	20000168 	.word	0x20000168

08004fa0 <_lseek_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	; (8004fc0 <_lseek_r+0x20>)
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 f8bb 	bl	800512a <_lseek>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_lseek_r+0x1e>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_lseek_r+0x1e>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	20000168 	.word	0x20000168

08004fc4 <__malloc_lock>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__malloc_lock+0x8>)
 8004fc6:	f7ff bb1d 	b.w	8004604 <__retarget_lock_acquire_recursive>
 8004fca:	bf00      	nop
 8004fcc:	2000015c 	.word	0x2000015c

08004fd0 <__malloc_unlock>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__malloc_unlock+0x8>)
 8004fd2:	f7ff bb18 	b.w	8004606 <__retarget_lock_release_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	2000015c 	.word	0x2000015c

08004fdc <_read_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d07      	ldr	r5, [pc, #28]	; (8004ffc <_read_r+0x20>)
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 f845 	bl	800507a <_read>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_read_r+0x1e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_read_r+0x1e>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000168 	.word	0x20000168

08005000 <findslot>:
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <findslot+0x2c>)
 8005002:	b510      	push	{r4, lr}
 8005004:	4604      	mov	r4, r0
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	b118      	cbz	r0, 8005012 <findslot+0x12>
 800500a:	6983      	ldr	r3, [r0, #24]
 800500c:	b90b      	cbnz	r3, 8005012 <findslot+0x12>
 800500e:	f7ff fa5b 	bl	80044c8 <__sinit>
 8005012:	2c13      	cmp	r4, #19
 8005014:	d807      	bhi.n	8005026 <findslot+0x26>
 8005016:	4806      	ldr	r0, [pc, #24]	; (8005030 <findslot+0x30>)
 8005018:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800501c:	3201      	adds	r2, #1
 800501e:	d002      	beq.n	8005026 <findslot+0x26>
 8005020:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005024:	bd10      	pop	{r4, pc}
 8005026:	2000      	movs	r0, #0
 8005028:	e7fc      	b.n	8005024 <findslot+0x24>
 800502a:	bf00      	nop
 800502c:	20000040 	.word	0x20000040
 8005030:	20000178 	.word	0x20000178

08005034 <error>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	f7fe ffac 	bl	8003f94 <__errno>
 800503c:	2613      	movs	r6, #19
 800503e:	4605      	mov	r5, r0
 8005040:	2700      	movs	r7, #0
 8005042:	4630      	mov	r0, r6
 8005044:	4639      	mov	r1, r7
 8005046:	beab      	bkpt	0x00ab
 8005048:	4606      	mov	r6, r0
 800504a:	602e      	str	r6, [r5, #0]
 800504c:	4620      	mov	r0, r4
 800504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005050 <checkerror>:
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d101      	bne.n	8005058 <checkerror+0x8>
 8005054:	f7ff bfee 	b.w	8005034 <error>
 8005058:	4770      	bx	lr

0800505a <_swiread>:
 800505a:	b530      	push	{r4, r5, lr}
 800505c:	b085      	sub	sp, #20
 800505e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005062:	9203      	str	r2, [sp, #12]
 8005064:	2406      	movs	r4, #6
 8005066:	ad01      	add	r5, sp, #4
 8005068:	4620      	mov	r0, r4
 800506a:	4629      	mov	r1, r5
 800506c:	beab      	bkpt	0x00ab
 800506e:	4604      	mov	r4, r0
 8005070:	4620      	mov	r0, r4
 8005072:	f7ff ffed 	bl	8005050 <checkerror>
 8005076:	b005      	add	sp, #20
 8005078:	bd30      	pop	{r4, r5, pc}

0800507a <_read>:
 800507a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800507c:	4615      	mov	r5, r2
 800507e:	9101      	str	r1, [sp, #4]
 8005080:	f7ff ffbe 	bl	8005000 <findslot>
 8005084:	9901      	ldr	r1, [sp, #4]
 8005086:	4604      	mov	r4, r0
 8005088:	b938      	cbnz	r0, 800509a <_read+0x20>
 800508a:	f7fe ff83 	bl	8003f94 <__errno>
 800508e:	2309      	movs	r3, #9
 8005090:	6003      	str	r3, [r0, #0]
 8005092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005096:	b003      	add	sp, #12
 8005098:	bd30      	pop	{r4, r5, pc}
 800509a:	6800      	ldr	r0, [r0, #0]
 800509c:	462a      	mov	r2, r5
 800509e:	f7ff ffdc 	bl	800505a <_swiread>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d0f7      	beq.n	8005096 <_read+0x1c>
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	1a2a      	subs	r2, r5, r0
 80050aa:	4413      	add	r3, r2
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	4610      	mov	r0, r2
 80050b0:	e7f1      	b.n	8005096 <_read+0x1c>

080050b2 <_swilseek>:
 80050b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b4:	460c      	mov	r4, r1
 80050b6:	4616      	mov	r6, r2
 80050b8:	f7ff ffa2 	bl	8005000 <findslot>
 80050bc:	4605      	mov	r5, r0
 80050be:	b940      	cbnz	r0, 80050d2 <_swilseek+0x20>
 80050c0:	f7fe ff68 	bl	8003f94 <__errno>
 80050c4:	2309      	movs	r3, #9
 80050c6:	6003      	str	r3, [r0, #0]
 80050c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050cc:	4620      	mov	r0, r4
 80050ce:	b003      	add	sp, #12
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	2e02      	cmp	r6, #2
 80050d4:	d903      	bls.n	80050de <_swilseek+0x2c>
 80050d6:	f7fe ff5d 	bl	8003f94 <__errno>
 80050da:	2316      	movs	r3, #22
 80050dc:	e7f3      	b.n	80050c6 <_swilseek+0x14>
 80050de:	2e01      	cmp	r6, #1
 80050e0:	d112      	bne.n	8005108 <_swilseek+0x56>
 80050e2:	6843      	ldr	r3, [r0, #4]
 80050e4:	18e4      	adds	r4, r4, r3
 80050e6:	d4f6      	bmi.n	80050d6 <_swilseek+0x24>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	260a      	movs	r6, #10
 80050ec:	e9cd 3400 	strd	r3, r4, [sp]
 80050f0:	466f      	mov	r7, sp
 80050f2:	4630      	mov	r0, r6
 80050f4:	4639      	mov	r1, r7
 80050f6:	beab      	bkpt	0x00ab
 80050f8:	4606      	mov	r6, r0
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7ff ffa8 	bl	8005050 <checkerror>
 8005100:	2800      	cmp	r0, #0
 8005102:	dbe1      	blt.n	80050c8 <_swilseek+0x16>
 8005104:	606c      	str	r4, [r5, #4]
 8005106:	e7e1      	b.n	80050cc <_swilseek+0x1a>
 8005108:	2e02      	cmp	r6, #2
 800510a:	d1ed      	bne.n	80050e8 <_swilseek+0x36>
 800510c:	6803      	ldr	r3, [r0, #0]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	260c      	movs	r6, #12
 8005112:	466f      	mov	r7, sp
 8005114:	4630      	mov	r0, r6
 8005116:	4639      	mov	r1, r7
 8005118:	beab      	bkpt	0x00ab
 800511a:	4606      	mov	r6, r0
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff ff97 	bl	8005050 <checkerror>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	d0d0      	beq.n	80050c8 <_swilseek+0x16>
 8005126:	4404      	add	r4, r0
 8005128:	e7de      	b.n	80050e8 <_swilseek+0x36>

0800512a <_lseek>:
 800512a:	f7ff bfc2 	b.w	80050b2 <_swilseek>

0800512e <_swiwrite>:
 800512e:	b530      	push	{r4, r5, lr}
 8005130:	b085      	sub	sp, #20
 8005132:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005136:	9203      	str	r2, [sp, #12]
 8005138:	2405      	movs	r4, #5
 800513a:	ad01      	add	r5, sp, #4
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	beab      	bkpt	0x00ab
 8005142:	4604      	mov	r4, r0
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff ff83 	bl	8005050 <checkerror>
 800514a:	b005      	add	sp, #20
 800514c:	bd30      	pop	{r4, r5, pc}

0800514e <_write>:
 800514e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005150:	4615      	mov	r5, r2
 8005152:	9101      	str	r1, [sp, #4]
 8005154:	f7ff ff54 	bl	8005000 <findslot>
 8005158:	9901      	ldr	r1, [sp, #4]
 800515a:	4604      	mov	r4, r0
 800515c:	b930      	cbnz	r0, 800516c <_write+0x1e>
 800515e:	f7fe ff19 	bl	8003f94 <__errno>
 8005162:	2309      	movs	r3, #9
 8005164:	6003      	str	r3, [r0, #0]
 8005166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800516a:	e012      	b.n	8005192 <_write+0x44>
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	462a      	mov	r2, r5
 8005170:	f7ff ffdd 	bl	800512e <_swiwrite>
 8005174:	2800      	cmp	r0, #0
 8005176:	dbf6      	blt.n	8005166 <_write+0x18>
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	1a2b      	subs	r3, r5, r0
 800517c:	441a      	add	r2, r3
 800517e:	42a8      	cmp	r0, r5
 8005180:	6062      	str	r2, [r4, #4]
 8005182:	d105      	bne.n	8005190 <_write+0x42>
 8005184:	2000      	movs	r0, #0
 8005186:	b003      	add	sp, #12
 8005188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800518c:	f7ff bf52 	b.w	8005034 <error>
 8005190:	4618      	mov	r0, r3
 8005192:	b003      	add	sp, #12
 8005194:	bd30      	pop	{r4, r5, pc}

08005196 <_swiclose>:
 8005196:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005198:	2402      	movs	r4, #2
 800519a:	9001      	str	r0, [sp, #4]
 800519c:	ad01      	add	r5, sp, #4
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	beab      	bkpt	0x00ab
 80051a4:	4604      	mov	r4, r0
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff ff52 	bl	8005050 <checkerror>
 80051ac:	b003      	add	sp, #12
 80051ae:	bd30      	pop	{r4, r5, pc}

080051b0 <_close>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4605      	mov	r5, r0
 80051b4:	f7ff ff24 	bl	8005000 <findslot>
 80051b8:	4604      	mov	r4, r0
 80051ba:	b930      	cbnz	r0, 80051ca <_close+0x1a>
 80051bc:	f7fe feea 	bl	8003f94 <__errno>
 80051c0:	2309      	movs	r3, #9
 80051c2:	6003      	str	r3, [r0, #0]
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
 80051ca:	3d01      	subs	r5, #1
 80051cc:	2d01      	cmp	r5, #1
 80051ce:	d809      	bhi.n	80051e4 <_close+0x34>
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <_close+0x48>)
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d104      	bne.n	80051e4 <_close+0x34>
 80051da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051de:	6003      	str	r3, [r0, #0]
 80051e0:	2000      	movs	r0, #0
 80051e2:	e7f1      	b.n	80051c8 <_close+0x18>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	f7ff ffd6 	bl	8005196 <_swiclose>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d1ec      	bne.n	80051c8 <_close+0x18>
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	e7e8      	b.n	80051c8 <_close+0x18>
 80051f6:	bf00      	nop
 80051f8:	20000178 	.word	0x20000178

080051fc <_swistat>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	460c      	mov	r4, r1
 8005200:	f7ff fefe 	bl	8005000 <findslot>
 8005204:	4605      	mov	r5, r0
 8005206:	b930      	cbnz	r0, 8005216 <_swistat+0x1a>
 8005208:	f7fe fec4 	bl	8003f94 <__errno>
 800520c:	2309      	movs	r3, #9
 800520e:	6003      	str	r3, [r0, #0]
 8005210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005214:	bd70      	pop	{r4, r5, r6, pc}
 8005216:	6863      	ldr	r3, [r4, #4]
 8005218:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005222:	64a3      	str	r3, [r4, #72]	; 0x48
 8005224:	260c      	movs	r6, #12
 8005226:	4630      	mov	r0, r6
 8005228:	4629      	mov	r1, r5
 800522a:	beab      	bkpt	0x00ab
 800522c:	4605      	mov	r5, r0
 800522e:	4628      	mov	r0, r5
 8005230:	f7ff ff0e 	bl	8005050 <checkerror>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	bf1c      	itt	ne
 8005238:	6120      	strne	r0, [r4, #16]
 800523a:	2000      	movne	r0, #0
 800523c:	e7ea      	b.n	8005214 <_swistat+0x18>

0800523e <_fstat>:
 800523e:	460b      	mov	r3, r1
 8005240:	b510      	push	{r4, lr}
 8005242:	2100      	movs	r1, #0
 8005244:	4604      	mov	r4, r0
 8005246:	2258      	movs	r2, #88	; 0x58
 8005248:	4618      	mov	r0, r3
 800524a:	f7fe fecd 	bl	8003fe8 <memset>
 800524e:	4601      	mov	r1, r0
 8005250:	4620      	mov	r0, r4
 8005252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005256:	f7ff bfd1 	b.w	80051fc <_swistat>

0800525a <_stat>:
 800525a:	b538      	push	{r3, r4, r5, lr}
 800525c:	460d      	mov	r5, r1
 800525e:	4604      	mov	r4, r0
 8005260:	2258      	movs	r2, #88	; 0x58
 8005262:	2100      	movs	r1, #0
 8005264:	4628      	mov	r0, r5
 8005266:	f7fe febf 	bl	8003fe8 <memset>
 800526a:	4620      	mov	r0, r4
 800526c:	2100      	movs	r1, #0
 800526e:	f000 f811 	bl	8005294 <_swiopen>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	4604      	mov	r4, r0
 8005276:	d00b      	beq.n	8005290 <_stat+0x36>
 8005278:	686b      	ldr	r3, [r5, #4]
 800527a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800527e:	606b      	str	r3, [r5, #4]
 8005280:	4629      	mov	r1, r5
 8005282:	f7ff ffbb 	bl	80051fc <_swistat>
 8005286:	4605      	mov	r5, r0
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff ff91 	bl	80051b0 <_close>
 800528e:	462c      	mov	r4, r5
 8005290:	4620      	mov	r0, r4
 8005292:	bd38      	pop	{r3, r4, r5, pc}

08005294 <_swiopen>:
 8005294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005298:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005344 <_swiopen+0xb0>
 800529c:	b097      	sub	sp, #92	; 0x5c
 800529e:	4607      	mov	r7, r0
 80052a0:	460e      	mov	r6, r1
 80052a2:	2500      	movs	r5, #0
 80052a4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80052a8:	1c61      	adds	r1, r4, #1
 80052aa:	d037      	beq.n	800531c <_swiopen+0x88>
 80052ac:	3501      	adds	r5, #1
 80052ae:	2d14      	cmp	r5, #20
 80052b0:	d1f8      	bne.n	80052a4 <_swiopen+0x10>
 80052b2:	f7fe fe6f 	bl	8003f94 <__errno>
 80052b6:	2318      	movs	r3, #24
 80052b8:	6003      	str	r3, [r0, #0]
 80052ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052be:	e03d      	b.n	800533c <_swiopen+0xa8>
 80052c0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80052c4:	f240 6301 	movw	r3, #1537	; 0x601
 80052c8:	07b2      	lsls	r2, r6, #30
 80052ca:	bf48      	it	mi
 80052cc:	f044 0402 	orrmi.w	r4, r4, #2
 80052d0:	421e      	tst	r6, r3
 80052d2:	bf18      	it	ne
 80052d4:	f044 0404 	orrne.w	r4, r4, #4
 80052d8:	0733      	lsls	r3, r6, #28
 80052da:	bf48      	it	mi
 80052dc:	f024 0404 	bicmi.w	r4, r4, #4
 80052e0:	4638      	mov	r0, r7
 80052e2:	bf48      	it	mi
 80052e4:	f044 0408 	orrmi.w	r4, r4, #8
 80052e8:	9700      	str	r7, [sp, #0]
 80052ea:	f7fa ffc1 	bl	8000270 <strlen>
 80052ee:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80052f2:	2401      	movs	r4, #1
 80052f4:	4620      	mov	r0, r4
 80052f6:	4649      	mov	r1, r9
 80052f8:	beab      	bkpt	0x00ab
 80052fa:	4604      	mov	r4, r0
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	db08      	blt.n	8005312 <_swiopen+0x7e>
 8005300:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005304:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8005308:	2300      	movs	r3, #0
 800530a:	f8c8 3004 	str.w	r3, [r8, #4]
 800530e:	462c      	mov	r4, r5
 8005310:	e014      	b.n	800533c <_swiopen+0xa8>
 8005312:	4620      	mov	r0, r4
 8005314:	f7ff fe8e 	bl	8005034 <error>
 8005318:	4604      	mov	r4, r0
 800531a:	e00f      	b.n	800533c <_swiopen+0xa8>
 800531c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005320:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005324:	46e9      	mov	r9, sp
 8005326:	d1cb      	bne.n	80052c0 <_swiopen+0x2c>
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	f7ff ff95 	bl	800525a <_stat>
 8005330:	3001      	adds	r0, #1
 8005332:	d0c5      	beq.n	80052c0 <_swiopen+0x2c>
 8005334:	f7fe fe2e 	bl	8003f94 <__errno>
 8005338:	2311      	movs	r3, #17
 800533a:	6003      	str	r3, [r0, #0]
 800533c:	4620      	mov	r0, r4
 800533e:	b017      	add	sp, #92	; 0x5c
 8005340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005344:	20000178 	.word	0x20000178

08005348 <_get_semihosting_exts>:
 8005348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	482a      	ldr	r0, [pc, #168]	; (80053fc <_get_semihosting_exts+0xb4>)
 8005352:	2100      	movs	r1, #0
 8005354:	4615      	mov	r5, r2
 8005356:	f7ff ff9d 	bl	8005294 <_swiopen>
 800535a:	462a      	mov	r2, r5
 800535c:	4604      	mov	r4, r0
 800535e:	2100      	movs	r1, #0
 8005360:	4630      	mov	r0, r6
 8005362:	f7fe fe41 	bl	8003fe8 <memset>
 8005366:	1c63      	adds	r3, r4, #1
 8005368:	d016      	beq.n	8005398 <_get_semihosting_exts+0x50>
 800536a:	4620      	mov	r0, r4
 800536c:	f7ff fe48 	bl	8005000 <findslot>
 8005370:	f04f 090c 	mov.w	r9, #12
 8005374:	4680      	mov	r8, r0
 8005376:	4648      	mov	r0, r9
 8005378:	4641      	mov	r1, r8
 800537a:	beab      	bkpt	0x00ab
 800537c:	4680      	mov	r8, r0
 800537e:	4640      	mov	r0, r8
 8005380:	f7ff fe66 	bl	8005050 <checkerror>
 8005384:	2803      	cmp	r0, #3
 8005386:	dd02      	ble.n	800538e <_get_semihosting_exts+0x46>
 8005388:	1ec3      	subs	r3, r0, #3
 800538a:	42ab      	cmp	r3, r5
 800538c:	dc08      	bgt.n	80053a0 <_get_semihosting_exts+0x58>
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff ff0e 	bl	80051b0 <_close>
 8005394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005398:	4620      	mov	r0, r4
 800539a:	b003      	add	sp, #12
 800539c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053a0:	2204      	movs	r2, #4
 80053a2:	eb0d 0102 	add.w	r1, sp, r2
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7ff fe67 	bl	800507a <_read>
 80053ac:	2803      	cmp	r0, #3
 80053ae:	ddee      	ble.n	800538e <_get_semihosting_exts+0x46>
 80053b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053b4:	2b53      	cmp	r3, #83	; 0x53
 80053b6:	d1ea      	bne.n	800538e <_get_semihosting_exts+0x46>
 80053b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80053bc:	2b48      	cmp	r3, #72	; 0x48
 80053be:	d1e6      	bne.n	800538e <_get_semihosting_exts+0x46>
 80053c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80053c4:	2b46      	cmp	r3, #70	; 0x46
 80053c6:	d1e2      	bne.n	800538e <_get_semihosting_exts+0x46>
 80053c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053cc:	2b42      	cmp	r3, #66	; 0x42
 80053ce:	d1de      	bne.n	800538e <_get_semihosting_exts+0x46>
 80053d0:	2201      	movs	r2, #1
 80053d2:	4639      	mov	r1, r7
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7ff fe6c 	bl	80050b2 <_swilseek>
 80053da:	2800      	cmp	r0, #0
 80053dc:	dbd7      	blt.n	800538e <_get_semihosting_exts+0x46>
 80053de:	462a      	mov	r2, r5
 80053e0:	4631      	mov	r1, r6
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7ff fe49 	bl	800507a <_read>
 80053e8:	4605      	mov	r5, r0
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff fee0 	bl	80051b0 <_close>
 80053f0:	4628      	mov	r0, r5
 80053f2:	f7ff fe2d 	bl	8005050 <checkerror>
 80053f6:	4604      	mov	r4, r0
 80053f8:	e7ce      	b.n	8005398 <_get_semihosting_exts+0x50>
 80053fa:	bf00      	nop
 80053fc:	0800566f 	.word	0x0800566f

08005400 <initialise_semihosting_exts>:
 8005400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005402:	4d0a      	ldr	r5, [pc, #40]	; (800542c <initialise_semihosting_exts+0x2c>)
 8005404:	4c0a      	ldr	r4, [pc, #40]	; (8005430 <initialise_semihosting_exts+0x30>)
 8005406:	2100      	movs	r1, #0
 8005408:	2201      	movs	r2, #1
 800540a:	a801      	add	r0, sp, #4
 800540c:	6029      	str	r1, [r5, #0]
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	f7ff ff9a 	bl	8005348 <_get_semihosting_exts>
 8005414:	2800      	cmp	r0, #0
 8005416:	dd07      	ble.n	8005428 <initialise_semihosting_exts+0x28>
 8005418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800541c:	f003 0201 	and.w	r2, r3, #1
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	602a      	str	r2, [r5, #0]
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	b003      	add	sp, #12
 800542a:	bd30      	pop	{r4, r5, pc}
 800542c:	200000a4 	.word	0x200000a4
 8005430:	200000a8 	.word	0x200000a8

08005434 <_has_ext_stdout_stderr>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4c04      	ldr	r4, [pc, #16]	; (8005448 <_has_ext_stdout_stderr+0x14>)
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	da01      	bge.n	8005442 <_has_ext_stdout_stderr+0xe>
 800543e:	f7ff ffdf 	bl	8005400 <initialise_semihosting_exts>
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	bd10      	pop	{r4, pc}
 8005446:	bf00      	nop
 8005448:	200000a8 	.word	0x200000a8

0800544c <initialise_monitor_handles>:
 800544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005450:	b085      	sub	sp, #20
 8005452:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005504 <initialise_monitor_handles+0xb8>
 8005456:	f8cd 9004 	str.w	r9, [sp, #4]
 800545a:	2303      	movs	r3, #3
 800545c:	2400      	movs	r4, #0
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	af01      	add	r7, sp, #4
 8005462:	9402      	str	r4, [sp, #8]
 8005464:	2501      	movs	r5, #1
 8005466:	4628      	mov	r0, r5
 8005468:	4639      	mov	r1, r7
 800546a:	beab      	bkpt	0x00ab
 800546c:	4605      	mov	r5, r0
 800546e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005508 <initialise_monitor_handles+0xbc>
 8005472:	4623      	mov	r3, r4
 8005474:	4c20      	ldr	r4, [pc, #128]	; (80054f8 <initialise_monitor_handles+0xac>)
 8005476:	f8c8 5000 	str.w	r5, [r8]
 800547a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800547e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005482:	3301      	adds	r3, #1
 8005484:	2b14      	cmp	r3, #20
 8005486:	d1fa      	bne.n	800547e <initialise_monitor_handles+0x32>
 8005488:	f7ff ffd4 	bl	8005434 <_has_ext_stdout_stderr>
 800548c:	4d1b      	ldr	r5, [pc, #108]	; (80054fc <initialise_monitor_handles+0xb0>)
 800548e:	b1d0      	cbz	r0, 80054c6 <initialise_monitor_handles+0x7a>
 8005490:	f04f 0a03 	mov.w	sl, #3
 8005494:	2304      	movs	r3, #4
 8005496:	f8cd 9004 	str.w	r9, [sp, #4]
 800549a:	2601      	movs	r6, #1
 800549c:	f8cd a00c 	str.w	sl, [sp, #12]
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	4630      	mov	r0, r6
 80054a4:	4639      	mov	r1, r7
 80054a6:	beab      	bkpt	0x00ab
 80054a8:	4683      	mov	fp, r0
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <initialise_monitor_handles+0xb4>)
 80054ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80054b0:	f8c3 b000 	str.w	fp, [r3]
 80054b4:	2308      	movs	r3, #8
 80054b6:	f8cd a00c 	str.w	sl, [sp, #12]
 80054ba:	9302      	str	r3, [sp, #8]
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	beab      	bkpt	0x00ab
 80054c2:	4606      	mov	r6, r0
 80054c4:	602e      	str	r6, [r5, #0]
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	bf02      	ittt	eq
 80054cc:	4b0c      	ldreq	r3, [pc, #48]	; (8005500 <initialise_monitor_handles+0xb4>)
 80054ce:	681b      	ldreq	r3, [r3, #0]
 80054d0:	602b      	streq	r3, [r5, #0]
 80054d2:	2600      	movs	r6, #0
 80054d4:	f8d8 3000 	ldr.w	r3, [r8]
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	6066      	str	r6, [r4, #4]
 80054dc:	f7ff ffaa 	bl	8005434 <_has_ext_stdout_stderr>
 80054e0:	b130      	cbz	r0, 80054f0 <initialise_monitor_handles+0xa4>
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <initialise_monitor_handles+0xb4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80054ea:	682b      	ldr	r3, [r5, #0]
 80054ec:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80054f0:	b005      	add	sp, #20
 80054f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f6:	bf00      	nop
 80054f8:	20000178 	.word	0x20000178
 80054fc:	2000016c 	.word	0x2000016c
 8005500:	20000174 	.word	0x20000174
 8005504:	08005685 	.word	0x08005685
 8005508:	20000170 	.word	0x20000170

0800550c <_isatty>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	f7ff fd77 	bl	8005000 <findslot>
 8005512:	2509      	movs	r5, #9
 8005514:	4604      	mov	r4, r0
 8005516:	b920      	cbnz	r0, 8005522 <_isatty+0x16>
 8005518:	f7fe fd3c 	bl	8003f94 <__errno>
 800551c:	6005      	str	r5, [r0, #0]
 800551e:	4620      	mov	r0, r4
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	4628      	mov	r0, r5
 8005524:	4621      	mov	r1, r4
 8005526:	beab      	bkpt	0x00ab
 8005528:	4604      	mov	r4, r0
 800552a:	2c01      	cmp	r4, #1
 800552c:	d0f7      	beq.n	800551e <_isatty+0x12>
 800552e:	f7fe fd31 	bl	8003f94 <__errno>
 8005532:	2400      	movs	r4, #0
 8005534:	4605      	mov	r5, r0
 8005536:	2613      	movs	r6, #19
 8005538:	4630      	mov	r0, r6
 800553a:	4621      	mov	r1, r4
 800553c:	beab      	bkpt	0x00ab
 800553e:	4606      	mov	r6, r0
 8005540:	602e      	str	r6, [r5, #0]
 8005542:	e7ec      	b.n	800551e <_isatty+0x12>

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
